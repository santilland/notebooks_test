{"version":1,"kind":"Notebook","sha256":"31ec959ff1fd44a2db75d5b067aa2bca04f53692065a7aba2f0b764d3958e6a4","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.igarss2022.igarss-22-detect-trucks-sentinel2","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/IGARSS2022/IGARSS-22_Detect_Trucks_Sentinel2.ipynb","dependencies":[],"frontmatter":{"title":"Truck Detection Exercise","content_includes_title":true,"kernelspec":{"name":"conda-env-edc-default-2022.07-00-py","display_name":"python3 (edc-default-2022.07-00)","language":"python"},"github":"https://github.com/eoxhub-workspaces/documentation/","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/eoxhub-workspaces/documentation//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/IGARSS2022/IGARSS-22_Detect_Trucks_Sentinel2.ipynb","exports":[{"format":"ipynb","filename":"IGARSS-22_Detect_Trucks_Sentinel2.ipynb","url":"/build/IGARSS-22_Detect_Tru-161bb57771822d360339837779d57464.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:35.725426Z","iopub.status.busy":"2022-10-13T12:28:35.724314Z","iopub.status.idle":"2022-10-13T12:28:35.864258Z","shell.execute_reply":"2022-10-13T12:28:35.862910Z"},"papermill":{"duration":0.174516,"end_time":"2022-10-13T12:28:35.869689","exception":false,"start_time":"2022-10-13T12:28:35.695173","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import check_compatibility\ncheck_compatibility(\"user-2022.10-14\", dependencies=[\"SH\"])","visibility":"show","key":"ZRmFBT9X0e"},{"type":"output","id":"ukC-vptgwj-iU-t1Ssmqz","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script type=\"text/javascript\">\n        function toggle(id) {\n            el = document.getElementById(id);\n            el.style.display = el.style.display === \"none\" ? \"block\" : \"none\";\n        }\n    </script>","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"This notebook is compatible with this base image version (user-2022.10-14).","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"\n\n---------\n\nThe following environment variables are available:\n\n* `SH_CLIENT_ID`, `SH_INSTANCE_ID`, `SH_CLIENT_NAME`, `SH_CLIENT_SECRET`\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"Xt6wBafdPK"}],"visibility":"show","key":"UsR7bABy9o"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.015623,"end_time":"2022-10-13T12:28:35.925979","exception":false,"start_time":"2022-10-13T12:28:35.910356","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Truck Detection Exercise","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"llvkU6Au8r"}],"identifier":"truck-detection-exercise","label":"Truck Detection Exercise","html_id":"truck-detection-exercise","implicit":true,"key":"Jn5WOaIdXD"}],"visibility":"show","key":"Zn13eQKxnJ"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.015134,"end_time":"2022-10-13T12:28:35.964826","exception":false,"start_time":"2022-10-13T12:28:35.949692","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Detect Trucks using Sentinel-2 data user guide","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dITiekPBHV"}],"identifier":"detect-trucks-using-sentinel-2-data-user-guide","label":"Detect Trucks using Sentinel-2 data user guide","html_id":"detect-trucks-using-sentinel-2-data-user-guide","implicit":true,"key":"GYJ8ZOYyGd"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Parallax-based truck detection","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FhitAJRXUf"}],"identifier":"parallax-based-truck-detection","label":"Parallax-based truck detection","html_id":"parallax-based-truck-detection","implicit":true,"key":"wU2OTPMlpA"},{"type":"thematicBreak","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"d6iXOqAgOQ"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook is a comprehensive script for detecting trucks with Sentinel-2 data. In order to run the detection in your area of interest you will have to modify two cells:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"guN93eZ33D"}],"key":"F8cbCw5iYI"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Area of Interest (specify the aoi as bounding box)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nKucKvFLEj"}],"key":"Fc55zAFOGL"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Date (specify an acquisition date)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"DOqFGJXEd8"}],"key":"kGgj1BS0Lg"}],"key":"te4f3C9m32"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Afterwards, you may simply run all cells and check the result at the end of the script where you can also write the detections as points.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"uw0aaW9tcR"}],"key":"s2BHM75Qr5"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Ensure that you have access to the Sentinel Hub resources for retrieving Sentinel-2 data through its API (via xcube_sh).","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"aJmxh8TNjG"}],"key":"CUT12KTBob"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Author: Henrik Fisser, 2020","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"mkepEG1Fse"},{"type":"break","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"UMRQwI6HVa"},{"type":"text","value":"Explanations on the truck detection on GitHub: ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Ds02nPlltn"},{"type":"link","url":"https://github.com/hfisser/Truck_Detection_Sentinel2_COVID19","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"https://​github​.com​/hfisser​/Truck​_Detection​_Sentinel2​_COVID19","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"m4cpBfBsiz"}],"urlSource":"https://github.com/hfisser/Truck_Detection_Sentinel2_COVID19","error":true,"key":"H66F97cmAS"}],"key":"T4Iw1R17Cj"}],"visibility":"show","key":"O6IrhHO7gA"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:35.999261Z","iopub.status.busy":"2022-10-13T12:28:35.998744Z","iopub.status.idle":"2022-10-13T12:28:49.583357Z","shell.execute_reply":"2022-10-13T12:28:49.582038Z"},"papermill":{"duration":13.605848,"end_time":"2022-10-13T12:28:49.585994","exception":false,"start_time":"2022-10-13T12:28:35.980146","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport subprocess\nimport sys\n\n# installations\ndef install_package(pkg):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg])\ninstall_package(\"OSMPythonTools\")\ninstall_package(\"geocube\")\n\n# OSM API\nfrom OSMPythonTools.overpass import overpassQueryBuilder, Overpass\n\nimport numpy as np\nimport xarray as xr\nimport geocube\nimport geopandas as gpd\nimport pandas as pd\nfrom xcube_sh.cube import open_cube\nfrom xcube_sh.config import CubeConfig\nfrom xcube.core.maskset import MaskSet\nfrom rasterio import features\nfrom affine import Affine\nfrom shapely import geometry, coords\nfrom shapely.geometry import Polygon, Point, box\nfrom numba import jit\n\nimport IPython.display\n%matplotlib inline","visibility":"show","key":"WMMFsmlvaw"},{"type":"output","id":"nostpSPi90FOzxdpLtJhQ","data":[{"name":"stdout","output_type":"stream","text":"Collecting OSMPythonTools\n  Downloading OSMPythonTools-0.3.5.tar.gz (28 kB)\n  Preparing metadata (setup.py): started\n"},{"name":"stdout","output_type":"stream","text":"  Preparing metadata (setup.py): finished with status 'done'\nRequirement already satisfied: beautifulsoup4 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (4.11.1)\nRequirement already satisfied: geojson in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (2.5.0)\nRequirement already satisfied: lxml in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (4.9.1)\nRequirement already satisfied: matplotlib in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (3.6.1)\nRequirement already satisfied: numpy in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (1.23.3)\nRequirement already satisfied: pandas in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (1.5.0)\nCollecting ujson\n"},{"name":"stdout","output_type":"stream","text":"  Downloading ujson-5.5.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (46 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 46.1/46.1 kB 8.3 MB/s eta 0:00:00\nRequirement already satisfied: xarray in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from OSMPythonTools) (2022.9.0)\nRequirement already satisfied: soupsieve>1.2 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from beautifulsoup4->OSMPythonTools) (2.3.2.post1)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (9.2.0)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (4.37.4)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (0.11.0)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (1.0.5)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (2.8.2)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (21.3)\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (3.0.9)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from matplotlib->OSMPythonTools) (1.4.4)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from pandas->OSMPythonTools) (2022.4)\n"},{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: six>=1.5 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from python-dateutil>=2.7->matplotlib->OSMPythonTools) (1.16.0)\nBuilding wheels for collected packages: OSMPythonTools\n  Building wheel for OSMPythonTools (setup.py): started\n"},{"name":"stdout","output_type":"stream","text":"  Building wheel for OSMPythonTools (setup.py): finished with status 'done'\n  Created wheel for OSMPythonTools: filename=OSMPythonTools-0.3.5-py3-none-any.whl size=32717 sha256=1dd60ca069c3595d49c3dd814eeab6f9547671147edf2bdd369ebbbfe470cf94\n  Stored in directory: /home/jovyan/.cache/pip/wheels/24/da/ad/aff21ba9e9c127c4997d1f9b0251f17c5c13373524297ae6bd\nSuccessfully built OSMPythonTools\n"},{"name":"stdout","output_type":"stream","text":"Installing collected packages: ujson, OSMPythonTools\nSuccessfully installed OSMPythonTools-0.3.5 ujson-5.5.0\n"},{"name":"stdout","output_type":"stream","text":"Collecting geocube\n  Downloading geocube-0.3.3-py3-none-any.whl (20 kB)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (1.23.3)\nRequirement already satisfied: rasterio in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (1.3.2)\nRequirement already satisfied: rioxarray>=0.4 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (0.12.2)\nRequirement already satisfied: click>=6.0 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (8.0.4)\nRequirement already satisfied: pyproj>=2 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (3.4.0)\nRequirement already satisfied: xarray>=0.17 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (2022.9.0)\nRequirement already satisfied: appdirs in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (1.4.4)\nRequirement already satisfied: scipy in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (1.9.1)\n"},{"name":"stdout","output_type":"stream","text":"Collecting odc-geo\n  Downloading odc_geo-0.3.0-py3-none-any.whl (114 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 114.0/114.0 kB 14.7 MB/s eta 0:00:00\nRequirement already satisfied: geopandas>=0.7 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geocube) (0.11.1)\nRequirement already satisfied: packaging in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geopandas>=0.7->geocube) (21.3)\nRequirement already satisfied: shapely<2,>=1.7 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geopandas>=0.7->geocube) (1.8.5)\nRequirement already satisfied: pandas>=1.0.0 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geopandas>=0.7->geocube) (1.5.0)\nRequirement already satisfied: fiona>=1.8 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from geopandas>=0.7->geocube) (1.8.21)\nRequirement already satisfied: certifi in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from pyproj>=2->geocube) (2022.9.24)\nRequirement already satisfied: attrs in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (22.1.0)\nRequirement already satisfied: snuggs>=1.4.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (1.4.7)\nRequirement already satisfied: setuptools in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (65.4.1)\nRequirement already satisfied: cligj>=0.5 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (0.7.2)\nRequirement already satisfied: affine in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (2.3.1)\nRequirement already satisfied: click-plugins in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from rasterio->geocube) (1.1.1)\n"},{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: cachetools in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from odc-geo->geocube) (5.2.0)\nRequirement already satisfied: six>=1.7 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from fiona>=1.8->geopandas>=0.7->geocube) (1.16.0)\nRequirement already satisfied: munch in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from fiona>=1.8->geopandas>=0.7->geocube) (2.5.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from packaging->geopandas>=0.7->geocube) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.8.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from pandas>=1.0.0->geopandas>=0.7->geocube) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages (from pandas>=1.0.0->geopandas>=0.7->geocube) (2022.4)\n"},{"name":"stdout","output_type":"stream","text":"Installing collected packages: odc-geo, geocube\n"},{"name":"stdout","output_type":"stream","text":"Successfully installed geocube-0.3.3 odc-geo-0.3.0\n"}],"visibility":"show","key":"h0cpQf7yEy"}],"visibility":"show","key":"hMNibv8Rmn"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.01392,"end_time":"2022-10-13T12:28:49.613473","exception":false,"start_time":"2022-10-13T12:28:49.599553","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area of Interest","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rb2TSd5LrY"}],"identifier":"area-of-interest","label":"Area of Interest","html_id":"area-of-interest","implicit":true,"key":"xuhdLYStdP"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Specify an area of interest as bounding box in format:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"isO2BFXjIl"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EZgMNZG53e"},{"type":"text","value":"xmin, ymin, ymax, ymax","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"SYGkDsVZmh"}],"key":"F7PJUT1Ypo"}],"visibility":"show","key":"IIWfx89HbO"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:49.643153Z","iopub.status.busy":"2022-10-13T12:28:49.642285Z","iopub.status.idle":"2022-10-13T12:28:49.669763Z","shell.execute_reply":"2022-10-13T12:28:49.668344Z"},"papermill":{"duration":0.045774,"end_time":"2022-10-13T12:28:49.672880","exception":false,"start_time":"2022-10-13T12:28:49.627106","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"bbox = 101.607,3.0500, 101.7507, 3.20, # Kuala Lumpur\nkualalumpur_bbox = [101.607,3.0500, 101.7507, 3.20]\nIPython.display.GeoJSON(box(*bbox).__geo_interface__)","visibility":"show","key":"nvI5gQbxIe"},{"type":"output","id":"ouWga2nEO2utZEM-p6Q0N","data":[{"output_type":"display_data","metadata":{"application/geo+json":{"expanded":false,"root":"root"}},"data":{"application/geo+json":{"content":"{\"coordinates\":[[[101.7507,3.05],[101.7507,3.2],[101.607,3.2],[101.607,3.05],[101.7507,3.05]]],\"type\":\"Polygon\"}","content_type":"application/geo+json"},"text/plain":{"content":"<IPython.display.GeoJSON object>","content_type":"text/plain"}}}],"visibility":"show","key":"tuvISBRtoM"}],"visibility":"show","key":"QaHDlAMmB4"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.016932,"end_time":"2022-10-13T12:28:49.710878","exception":false,"start_time":"2022-10-13T12:28:49.693946","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Other AOIs can be generated here, just remeber toc change bbox in the code accrodingly","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LfyITGTzqU"}],"key":"Qhppabe2IR"}],"visibility":"show","key":"uDE8UqRt4O"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:49.749009Z","iopub.status.busy":"2022-10-13T12:28:49.748486Z","iopub.status.idle":"2022-10-13T12:28:49.755405Z","shell.execute_reply":"2022-10-13T12:28:49.753958Z"},"papermill":{"duration":0.033822,"end_time":"2022-10-13T12:28:49.760973","exception":false,"start_time":"2022-10-13T12:28:49.727151","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# bbox = -3.85, 40.3, -3.55, 40.5 # Madrid\n# Madrid_bbox = [-3.85, 40.3, -3.55, 40.5]","visibility":"show","key":"xCYkhFs1aQ"},{"type":"output","id":"fvF6gw_5lOTPSYBe3Xy2f","data":[],"visibility":"show","key":"om2VR6I4YL"}],"visibility":"show","key":"stybhQqjRY"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.027844,"end_time":"2022-10-13T12:28:49.808190","exception":false,"start_time":"2022-10-13T12:28:49.780346","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Date","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tl6ZgszxjB"}],"identifier":"date","label":"Date","html_id":"date","implicit":true,"key":"w7qFyxiSdu"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Select a cloud-free acquisition and provide the date as “YYYY-MM-DD”.\nYou may select data e.g. here:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"RTDGxF75cy"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FNTuVgyrXz"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Copernicus Open Access Hub","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zRijTVLnFW"}],"key":"V8jFGNaXDV"},{"type":"text","value":"\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"MplRdDuSg7"},{"type":"link","url":"https://scihub.copernicus.eu/dhus/#/home","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​scihub​.copernicus​.eu​/dhus​/​#​/home","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Vqfkifcc0b"}],"urlSource":"https://scihub.copernicus.eu/dhus/#/home","key":"iDeZzwSn2m"},{"type":"text","value":" ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VStxr8WJHF"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Lm7D39daw3"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"EO Browser","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"U1Wacc8EIy"}],"key":"CIQR87eeTu"},{"type":"text","value":"\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DzN4g1LuqO"},{"type":"link","url":"https://apps.sentinel-hub.com/eo-browser/?zoom=10&lat=41.9&lng=12.5&themeId=DEFAULT-THEME","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​apps​.sentinel​-hub​.com​/eo​-browser​/​?zoom​=​10​&​lat​=​41​.9​&​lng​=​12​.5​&​themeId​=​DEFAULT​-THEME","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"TZH1PTj6mu"}],"urlSource":"https://apps.sentinel-hub.com/eo-browser/?zoom=10&lat=41.9&lng=12.5&themeId=DEFAULT-THEME","key":"mDuK2pAJOQ"}],"key":"rmCObbvGRl"}],"visibility":"show","key":"xkXCs06mow"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.018196,"end_time":"2022-10-13T12:28:49.849753","exception":false,"start_time":"2022-10-13T12:28:49.831557","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"the identified date below is an almost cloud free image of Sentinel 2 over the area of Kuala Lumpur. In case of other AOI you need to identify a proper date as explained above and set here the updated one","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"C0yRVHTNsZ"}],"key":"UEzMWhAvmQ"}],"visibility":"show","key":"fwrH4G9NVH"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:49.907170Z","iopub.status.busy":"2022-10-13T12:28:49.906717Z","iopub.status.idle":"2022-10-13T12:28:49.926347Z","shell.execute_reply":"2022-10-13T12:28:49.925122Z"},"papermill":{"duration":0.056189,"end_time":"2022-10-13T12:28:49.928516","exception":false,"start_time":"2022-10-13T12:28:49.872327","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Start and end date for Kuala Lumpur use case\ndate_start = \"2020-05-18\"\ndate_end = \"2020-05-18\"","visibility":"show","key":"qLZs9jlVoW"},{"type":"output","id":"F6Rt7zUHnLZiaMEK1yeh-","data":[],"visibility":"show","key":"aGftwlDGAX"}],"visibility":"show","key":"VYppawpWUm"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.014624,"end_time":"2022-10-13T12:28:49.960811","exception":false,"start_time":"2022-10-13T12:28:49.946187","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open Street Maps (OSM)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vY8UrJ3cKS"}],"identifier":"open-street-maps-osm","label":"Open Street Maps (OSM)","html_id":"open-street-maps-osm","implicit":true,"key":"XiPGqRbNIV"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Trucks are only detected on roads obtained from OSM.\nYou may specify road types to include. Their descriptions can be found here:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YoRVYEc7N1"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Inpvi8cS0w"},{"type":"link","url":"https://wiki.openstreetmap.org/wiki/Key:highway","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​wiki​.openstreetmap​.org​/wiki​/Key:highway","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Lz1NcNXTX9"}],"urlSource":"https://wiki.openstreetmap.org/wiki/Key:highway","key":"cM5tn5F3XI"}],"key":"mUBjZgBYQL"}],"visibility":"show","key":"n8YnkH76l7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:49.991442Z","iopub.status.busy":"2022-10-13T12:28:49.990496Z","iopub.status.idle":"2022-10-13T12:28:50.000636Z","shell.execute_reply":"2022-10-13T12:28:49.997940Z"},"papermill":{"duration":0.028425,"end_time":"2022-10-13T12:28:50.003607","exception":false,"start_time":"2022-10-13T12:28:49.975182","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_values = [\"motorway\", \"trunk\", \"primary\"] # all of key \"highway\"\nroads_buffer = 0.00022 # degree, OSM road vectors are buffered, for motorway, the others lower","visibility":"show","key":"tpxmMbdwFV"},{"type":"output","id":"QTdZWe65BmcugakeAZ2wI","data":[],"visibility":"show","key":"DYMGeGlx3b"}],"visibility":"show","key":"Chh72jtrj9"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.01477,"end_time":"2022-10-13T12:28:50.032851","exception":false,"start_time":"2022-10-13T12:28:50.018081","status":"completed"},"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uuikwoP4r8"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Processing methods","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"NBb65tVPFw"}],"identifier":"processing-methods","label":"Processing methods","html_id":"processing-methods","implicit":true,"key":"p93aZ3L47U"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cells all needed methods are defined. They will be invoked further below.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"i8OSAzTLHj"}],"key":"Yc1EFHkMDB"}],"visibility":"show","key":"hU0XrZg8mX"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.076593Z","iopub.status.busy":"2022-10-13T12:28:50.076010Z","iopub.status.idle":"2022-10-13T12:28:50.123886Z","shell.execute_reply":"2022-10-13T12:28:50.122514Z"},"papermill":{"duration":0.074278,"end_time":"2022-10-13T12:28:50.128373","exception":false,"start_time":"2022-10-13T12:28:50.054095","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# re-order bbox from W,S,E,N to S,W,N,E, starting from the bbox defined at the beginning\n\ndef convert_bbox_osm(bbox):\n    offset = 0.05 # add a buffer to bbox in order to be sure cube is entirely covered, pay attention to the signs before the adding the offset\n    bbox_osm = [bbox[1], bbox[0], bbox[3], bbox[2]]\n    bbox_osm[0] -= offset # min lat\n    bbox_osm[1] -= offset # min lon\n    bbox_osm[2] += offset # max lat\n    bbox_osm[3] += offset # max lon\n    return bbox_osm\n\n# bbox List of four coords\n# osm_value String OSM value\n# osm_key String OSM key\n# element_type List of String\n# returns GeoDataFrame\ndef get_osm(bbox, \n            osm_value,\n            element_type = [\"way\", \"relation\"]):\n    osm_key = \"highway\"\n    bbox_osm = convert_bbox_osm(bbox)\n    quot = '\"'\n    select = quot+osm_key+quot + '=' + quot+osm_value+quot\n    select_link = select.replace(osm_value, osm_value + \"_link\") # also get road links\n    select_junction = select.replace(osm_value, osm_value + \"_junction\")\n    geoms = []\n    for selector in [select, select_link, select_junction]:  \n        try:\n            query = overpassQueryBuilder(bbox=bbox_osm, \n                                         elementType=element_type, \n                                         selector=selector, \n                                         out='body',\n                                         includeGeometry=True)\n            elements = Overpass().query(query, timeout=60).elements()\n            # create multiline of all elements\n            if len(elements) > 0:\n                for i in range(len(elements)):\n                    elem = elements[i]\n                    geoms.append(elem.geometry())\n        except:\n            Warning(\"Could not retrieve \" + select)\n    try:\n        lines = gpd.GeoDataFrame(crs = \"EPSG:4326\", geometry = geoms)\n        n = len(geoms)\n        lines[\"osm_value\"] = [osm_value]*n # add road type\n        return lines\n    except:\n        Warning(\"Could not merge \" + osm_value)\n        \n# buffer Float road buffer distance [m]\n# bbox List of four coords\n# bbox_id Integer processing id of bbox\n# osm_values List of String OSM values\n# osm_key String OSM key\n# roads_buffer Float buffer width\n# returns GeoDataFrame\ndef get_roads(bbox, osm_values, roads_buffer):\n    osm_key = \"highway\"\n    roads = []\n    has_error = []\n    offset = 0.00002\n    buffer_dist = \"buffer_distance\"\n    # buffer according to road type\n    m,t,p,s,ter = \"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\"\n    buffers = {m:roads_buffer, t:roads_buffer-offset, p:roads_buffer-(2*offset), s:roads_buffer-(3*offset), ter:roads_buffer-(4*offset)}\n    osm_values_int = {m:1, t:2, p:3, s:4, ter:5}\n    for osm_value in osm_values:\n        roads_osm = get_osm(bbox, osm_value)\n        try:\n            roads_osm = get_osm(bbox, osm_value)\n            roads_osm[buffer_dist] = [buffers[osm_value]] * len(roads_osm)\n            roads_osm[\"osm_value_int\"] = osm_values_int[osm_value]\n            roads.append(roads_osm)\n        except:\n            has_error.append(1)\n            print(\"'get_osm'\" + \"failed for bbox_id osm_value \" + osm_value + \"osm_key\" + osm_key)\n    if len(roads) > len(has_error):\n        roads_merge = gpd.GeoDataFrame(pd.concat(roads, ignore_index=True), crs=roads[0].crs)\n        buffered = roads_merge.buffer(distance=roads_merge[buffer_dist])\n        roads_merge.geometry = buffered\n        return roads_merge\n\n# osm geodataframe of polygons\n# reference_raster xarray with lat and lon\n# returns numpy array\ndef rasterize_osm(osm, reference_raster):\n    osm_values = list(set(osm[\"osm_value\"]))\n    nan_placeholder = 100\n    road_rasters = []\n    for osm_value in osm_values:\n        osm_subset = osm[osm[\"osm_value\"] == osm_value]\n        raster = rasterize(osm_subset, reference_raster.lat, reference_raster.lon)\n        cond = np.isfinite(raster)\n        raster_osm = np.where(cond, list(osm_subset.osm_value_int)[0], nan_placeholder) # use placeholder instead of nan first\n        raster_osm = raster_osm.astype(np.float)\n        road_rasters.append(raster_osm)        \n    # merge road types in one layer\n    road_raster_np = np.array(road_rasters).min(axis=0) # now use the lowest value (highest road level) because some intersect\n    road_raster_np[road_raster_np == nan_placeholder] = 0\n    return road_raster_np # 0=no_road 1=motorway, 2=trunk, ...\n\ndef transform_lat_lon(lat, lon):\n    lat = np.asarray(lat)\n    lon = np.asarray(lon)\n    trans = Affine.translation(lon[0], lat[0])\n    scale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0])\n    return trans * scale\n\ndef rasterize(polygons, lat, lon, fill=np.nan):\n    transform = transform_lat_lon(lat, lon)\n    out_shape = (len(lat), len(lon))\n    raster = features.rasterize(polygons.geometry, out_shape=out_shape,\n                                fill=fill, transform=transform,\n                                dtype=float)\n    return xr.DataArray(raster, coords={\"lat\":lat, \"lon\":lon}, dims=(\"lat\", \"lon\"))","visibility":"show","key":"RyK5Ak0m4j"},{"type":"output","id":"0TZQ_nMN5a9gIqjrI6k65","data":[],"visibility":"show","key":"jiYJfLjp1o"}],"visibility":"show","key":"tULy0hCl71"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.167983Z","iopub.status.busy":"2022-10-13T12:28:50.166447Z","iopub.status.idle":"2022-10-13T12:28:50.241216Z","shell.execute_reply":"2022-10-13T12:28:50.240004Z"},"papermill":{"duration":0.09808,"end_time":"2022-10-13T12:28:50.243750","exception":false,"start_time":"2022-10-13T12:28:50.145670","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# TruckDetector detects trucks at acquisition-level\nclass TruckDetector():   \n    def __init__(self, band_stack):\n        is_none = band_stack is None\n        self.band_stack = band_stack.chunk(band_stack.dims[\"lat\"], band_stack.dims[\"lon\"]) if not is_none else None\n        self.no_truck_mask = None\n        self.trucks = None\n    \n    def detect(self):\n        B02 = self.band_stack.B02.persist().values\n        B03 = self.band_stack.B03.persist().values\n        B04 = self.band_stack.B04.persist().values\n        B08 = self.band_stack.B08.persist().values\n        B11 = self.band_stack.B11.persist().values\n        no_truck_mask = calc_no_trucks(B02, B03, B04, B08, B11)\n        trucks = detect_trucks(B02, B03, B04, no_truck_mask)\n        lon_lat = {\"lat\":self.band_stack.lat, \"lon\":self.band_stack.lon}\n        self.no_truck_mask = xr.DataArray(no_truck_mask, coords=lon_lat, dims=(\"lat\", \"lon\"))\n        self.trucks = xr.DataArray(trucks, coords=lon_lat, dims=(\"lat\", \"lon\")).astype(np.int)\n        self.filter_trucks()\n                            \n    def filter_trucks(self):\n        self.trucks = filter_spatial_3x3_extended(self.trucks)\n        \n# take xarray and ensure each value with 1 in data has no neighbor with 1 in an extended 3x3 block. Extended means: horizontally and vertically\n# it is also checked for the second-next pixel\n# Method checks only surrounding of values equal 1\n# arr xarray DataArray with values and lat lon\ndef filter_spatial_3x3_extended(arr):\n    values = arr.values\n    lon = arr.lon\n    lat = arr.lat\n    valid = np.where(arr == 1)\n    for y,x in zip(valid[0], valid[1]):\n        y_above = y - 1\n        y_above_next = y - 2\n        x_left = x - 1\n        x_right = x + 1\n        x_left_next = x - 2\n        space_left = x_left >= 0\n        space_right = x_right >= 0 and x_right < len(lon)\n        space_above = y_above >= 0\n        val_left_above = values[y_above, x_left] if space_left and space_above else 0\n        val_right_above = values[y_above, x_right] if space_right and space_above else 0\n        val_left = values[y, x_left] if space_left else 0\n        val_above = values[y_above, x] if space_above else 0\n        val_left_next = values[y, x_left_next] if x_left_next >= 0 else 0\n        val_above_next = values[y_above_next, x] if y_above_next >= 0 else 0\n        # if any of the values left, above and left above has 1 set current value 0\n        if (val_left_above + val_right_above + val_left + val_above + val_left_next + val_above_next) >= 1:\n            values[y,x] = 0\n    arr.values = values\n    return arr\n\n# extracts coordinates at value in np array and returns points as GeoDataFrame\n# data 2d np array\n# match_value Float value in data where point coordinates are extracted\n# lon_lat dict of:\n### \"lon\": np array longitude values\"\n### \"lat\": np array latitude values\"\n# crs String EPSG:XXXX\ndef points_from_np(data, match_value, lon_lat, crs):\n    indices = np.argwhere(data == match_value)\n    if len(indices) > 0:\n        lat_indices = indices[:,[0]]\n        lon_indices = indices[:,[1]]\n        lat_coords = lon_lat[\"lat\"][lat_indices]\n        lon_coords = lon_lat[\"lon\"][lon_indices]\n        points = gpd.GeoDataFrame(geometry = gpd.points_from_xy(lon_coords, lat_coords))\n        points.crs = crs\n        return points\n    \ndef raster_to_points(raster, lon_lat, field_name, crs):\n    points_list = []\n    match_values = np.unique(raster[(raster != 0) * ~np.isnan(raster)]) # by pixel value\n    for x in match_values:\n        points = points_from_np(raster, x, lon_lat, crs=crs)\n        points[field_name] = [x] * len(points)\n        points_list.append(points)\n    return gpd.GeoDataFrame(pd.concat(points_list, ignore_index=True))\n        \n# Calculate a binary mask where pixels that are definitely no trucks are represented as 0. A dictionary with a set of trheshold values is required to reduce or avoid false detection on specific land cover types\n# thresholds Dict with at least:\n### max_ndvi Float above this val: no trucks. For Vegetation\n### max_ndwi Float above this val: no trucks. For Water\n### max_ndsi Float above this val: no_trucks. For Snow\n### min_rgb Float above this val: no_trucks. For dark surfaces, e.g. shadows\n### max_blue Float above this val: no_trucks\n### max_green Float above this val: no trucks\n### max_red Float above this val: no trucks\n### min_b11 Float below this val: no trucks. For dark surfaces, e.g. shadows\n### max_b11 Float below this val: no trucks. For bright (sealed) surfaces, e.g. buildings\n@jit(nopython=True, parallel=True)\ndef calc_no_trucks(B02, B03, B04, B08, B11):\n    th = {\"min_blue\":0.06, \n          \"min_green\":0.04, \n          \"min_red\":0.04,\n          \"max_red\":0.15,\n          \"max_green\":0.15,\n          \"max_blue\":0.2,\n          \"max_ndvi\":0.5,\n          \"max_ndwi\":0.0001,\n          \"max_ndsi\":0.0001,\n          \"min_blue_green_ratio\":0.03,\n          \"min_blue_red_ratio\":0.05, \n          \"max_blue_green_ratio\":0.17, \n          \"max_blue_red_ratio\":0.2}\n    ndvi_mask = ratio(B08, B04) < th[\"max_ndvi\"]\n    ndwi_mask = ratio(B02, B11) < th[\"max_ndwi\"]\n    ndsi_mask = ratio(B03, B11) < th[\"max_ndsi\"]\n    low_rgb_mask = (B02 > th[\"min_blue\"]) * (B03 > th[\"min_green\"]) * (B04 > th[\"min_red\"])\n    high_rgb_mask = (B02 < th[\"max_blue\"]) * (B03 < th[\"max_green\"]) * (B04 < th[\"max_red\"])\n    no_truck_mask = ndvi_mask * ndwi_mask * ndsi_mask * low_rgb_mask * high_rgb_mask\n    return no_truck_mask\n\n# Calculate a binary mask where trucks are represented as 1 and no trucks as 0.\n# thresholds Dict with at least:\n### min_green_ratio Float, minimum value of blue-green ratio\n### min_red_ratio Float, minimum value of blue-red ratio\n@jit(nopython=True, parallel=True)\ndef detect_trucks(B02, B03, B04, no_truck_mask):\n    th = {\"min_blue\":0.06, \n          \"min_green\":0.04, \n          \"min_red\":0.04,\n          \"max_red\":0.15,\n          \"max_green\":0.15,\n          \"max_blue\":0.2,\n          \"max_ndvi\":0.5,\n          \"max_ndwi\":0.0001,\n          \"max_ndsi\":0.0001,\n          \"min_blue_green_ratio\":0.03,\n          \"min_blue_red_ratio\":0.05, \n          \"max_blue_green_ratio\":0.17, \n          \"max_blue_red_ratio\":0.2}\n    bg_ratio = ratio(B02, B03)\n    br_ratio = ratio(B02, B04)\n    bg = bg_ratio > th[\"min_blue_green_ratio\"]\n    br = br_ratio > th[\"min_blue_red_ratio\"]\n    bg_max = bg_ratio < th[\"max_blue_green_ratio\"]\n    br_max = br_ratio < th[\"max_blue_red_ratio\"]\n    trucks = (bg * br * bg_max * br_max) * no_truck_mask\n    return trucks\n\n@jit(nopython=True, parallel=True)\ndef ratio(a, b):\n    return (a-b)/(a+b)","visibility":"show","key":"R8J0Jf9qV8"},{"type":"output","id":"Z5HxZZ1xfm9V2tV2R1jrC","data":[],"visibility":"show","key":"FEbKVNOOEm"}],"visibility":"show","key":"eUsc8q3rqU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.278600Z","iopub.status.busy":"2022-10-13T12:28:50.277141Z","iopub.status.idle":"2022-10-13T12:28:50.297519Z","shell.execute_reply":"2022-10-13T12:28:50.295873Z"},"papermill":{"duration":0.042165,"end_time":"2022-10-13T12:28:50.301186","exception":false,"start_time":"2022-10-13T12:28:50.259021","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# AcquisitionProcessor processes all valid pixels of a single acquisition in cube\nclass AcquisitionProcessor():\n    def __init__(self, date_np64, cube):\n        self.date_np64 = date_np64\n        self.cube = cube\n        self.band_stack = cube.sel(time = date_np64)\n        self.detector = None\n        self.no_clouds = None\n        self.osm_mask = None\n           \n    def mask_clouds(self):\n        cloud_masking_thresholds = {\"rgb\":0.25,\"blue_green\":0.2,\"blue_red\":0.2}\n        scl = MaskSet(self.band_stack.SCL)\n        high_prob = scl.clouds_high_probability\n        med_prob = scl.clouds_medium_probability\n        cirrus = scl.cirrus\n        no_data = scl.no_data\n        rgb_cloud_mask = calc_rgb_cloud_mask(self.band_stack, cloud_masking_thresholds)\n        self.no_clouds = (high_prob + med_prob + cirrus + no_data + rgb_cloud_mask) == 0\n        self.band_stack = self.band_stack.where(self.no_clouds)\n    \n    def mask_with_osm(self, osm_mask):\n        self.osm_mask = osm_mask\n        self.band_stack = self.band_stack.where(self.osm_mask != 0)\n                \n    def do_detection(self):\n        self.detector = TruckDetector(self.band_stack)\n        self.detector.detect()\n        \ndef calc_rgb_cloud_mask(band_stack, cloud_masking_thresholds):\n    B02, B03, B04 = band_stack.B02, band_stack.B03, band_stack.B04\n    c = cloud_masking_thresholds[\"rgb\"]\n    clouds_rgb = ((B02 > c) + (B03 > c) + (B04 > c)) >= 1\n    # attempt to mask haze without masking out truck pixels (similar! higher blue than red and green)\n    blue_green_ratio = (B02-B03) / (B02+B03)\n    blue_red_ratio = (B02-B04) / (B02+B04)\n    clouds_blue_green = blue_green_ratio > cloud_masking_thresholds[\"blue_green\"]\n    clouds_blue_red = blue_red_ratio > cloud_masking_thresholds[\"blue_red\"]\n    clouds = (clouds_rgb + clouds_blue_green + clouds_blue_red) >= 1\n    return clouds","visibility":"show","key":"dxBBGT244W"},{"type":"output","id":"i7oan3qdzbeO_EaQC3U05","data":[],"visibility":"show","key":"T36TdryG9K"}],"visibility":"show","key":"gjhY99rCjL"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.018542,"end_time":"2022-10-13T12:28:50.340181","exception":false,"start_time":"2022-10-13T12:28:50.321639","status":"completed"},"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cdzd9v50U8"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Get Sentinel-2 L2A xcube","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"S7LKytEVWh"}],"identifier":"get-sentinel-2-l2a-xcube","label":"Get Sentinel-2 L2A xcube","html_id":"get-sentinel-2-l2a-xcube","implicit":true,"key":"HHsrfRbgpJ"}],"visibility":"show","key":"MEgyTzoTkZ"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.0184,"end_time":"2022-10-13T12:28:50.376972","exception":false,"start_time":"2022-10-13T12:28:50.358572","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the following cell you need to configure the cube and the interested bbox of the AOI, so please be careful in aligning the below bbox variable and the time range start and end dates with the one desidere at the beginning of the notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"U42PcXaky8"}],"key":"bbiFcEJC2f"}],"visibility":"show","key":"CdUYhmRfnl"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.432408Z","iopub.status.busy":"2022-10-13T12:28:50.432027Z","iopub.status.idle":"2022-10-13T12:28:50.705997Z","shell.execute_reply":"2022-10-13T12:28:50.704190Z"},"papermill":{"duration":0.298156,"end_time":"2022-10-13T12:28:50.708975","exception":false,"start_time":"2022-10-13T12:28:50.410819","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"config = CubeConfig(dataset_name = \"S2L2A\",\n                    band_names = [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"SCL\"],\n                    tile_size = [512, 512],\n                    bbox = bbox,\n                    spatial_res = 0.00009,\n                    time_range = [date_start, date_end],\n                    time_period='2D')\ncube = open_cube(config)","visibility":"show","key":"Zv625vhR9p"},{"type":"output","id":"lgY8EfxAizIVunbGeKr5p","data":[],"visibility":"show","key":"bTSznmGpGM"}],"visibility":"show","key":"tPlPwftJKe"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.017201,"end_time":"2022-10-13T12:28:50.742504","exception":false,"start_time":"2022-10-13T12:28:50.725303","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Acquisition","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fQiuatILWC"}],"identifier":"acquisition","label":"Acquisition","html_id":"acquisition","implicit":true,"key":"tKZc4L37oa"}],"visibility":"show","key":"HeTNqkexTH"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.806669Z","iopub.status.busy":"2022-10-13T12:28:50.806183Z","iopub.status.idle":"2022-10-13T12:28:50.823263Z","shell.execute_reply":"2022-10-13T12:28:50.820595Z"},"papermill":{"duration":0.048946,"end_time":"2022-10-13T12:28:50.828337","exception":false,"start_time":"2022-10-13T12:28:50.779391","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition = AcquisitionProcessor(cube.time.values[0], cube)","visibility":"show","key":"SOGVv0bGrq"},{"type":"output","id":"0iDn1HMpDThu_nS9rd-hX","data":[],"visibility":"show","key":"kUWtqnYO7v"}],"visibility":"show","key":"tI9pmxGfXb"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.015457,"end_time":"2022-10-13T12:28:50.863251","exception":false,"start_time":"2022-10-13T12:28:50.847794","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot RGB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xFYjT8egZP"}],"identifier":"plot-rgb","label":"Plot RGB","html_id":"plot-rgb","implicit":true,"key":"d9GkdmqW84"}],"visibility":"show","key":"XJfcfeDh34"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:28:50.902491Z","iopub.status.busy":"2022-10-13T12:28:50.901711Z","iopub.status.idle":"2022-10-13T12:29:19.535264Z","shell.execute_reply":"2022-10-13T12:29:19.533957Z"},"papermill":{"duration":28.693716,"end_time":"2022-10-13T12:29:19.574936","exception":false,"start_time":"2022-10-13T12:28:50.881220","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rgb_bands = [\"B04\", \"B03\", \"B02\"]\ncoords, dims = [rgb_bands, cube.lat, cube.lon], [\"bands\", \"lat\", \"lon\"]\nrgb = np.vstack([cube.B04.persist().values, cube.B03.persist().values, cube.B02.persist().values])\nrgb_xr = xr.DataArray(rgb, coords=coords, dims=dims)\nrgb_xr.plot.imshow(figsize=[12,10], rgb=\"bands\", vmin=0, vmax=0.4)\nrgb, rgb_xr = None, None","visibility":"show","key":"QGI3IQPO0u"},{"type":"output","id":"PvsSaE_2WBgFvRizHK1vR","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"deb46d05a9203f219375388bafe9a6f5","path":"/build/deb46d05a9203f219375388bafe9a6f5.png"},"text/plain":{"content":"<Figure size 1200x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"qJoKolKJyN"}],"visibility":"show","key":"zYxJS6NtWs"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.063014,"end_time":"2022-10-13T12:29:19.700087","exception":false,"start_time":"2022-10-13T12:29:19.637073","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"RGB reflectance","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"diXMDeTmbR"}],"key":"aNcf5GYB8Z"}],"visibility":"show","key":"YEGZKALQub"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.0578,"end_time":"2022-10-13T12:29:19.809337","exception":false,"start_time":"2022-10-13T12:29:19.751537","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get OSM roads","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Am2YjMj8oQ"}],"identifier":"get-osm-roads","label":"Get OSM roads","html_id":"get-osm-roads","implicit":true,"key":"FsjRlxrNuP"}],"visibility":"show","key":"FDE73o2Xq7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:29:19.933011Z","iopub.status.busy":"2022-10-13T12:29:19.931918Z","iopub.status.idle":"2022-10-13T12:31:07.490240Z","shell.execute_reply":"2022-10-13T12:31:07.487858Z"},"papermill":{"duration":107.611349,"end_time":"2022-10-13T12:31:07.492789","exception":false,"start_time":"2022-10-13T12:29:19.881440","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_roads = get_roads(bbox, osm_values, roads_buffer)\nosm_roads.plot(figsize=[12,10])","visibility":"show","key":"WGG3gxNCuj"},{"type":"output","id":"KfjQ2N_qP0EeYKcy-tYNk","data":[{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"motorway\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway_link\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"motorway_link\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway_junction\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"motorway_junction\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"trunk\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[OSMPythonTools.Element] Cannot build geometry: no outer rings found.\nNoneType: None\n"},{"name":"stderr","output_type":"stream","text":"[OSMPythonTools.Element] Cannot build geometry: no outer rings found. (relation/6110277)\nTraceback (most recent call last):\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/element.py\", line 186, in __geometry\n    self._raiseException('Cannot build geometry: no outer rings found.')\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/element.py\", line 50, in _raiseException\n    OSMPythonTools._raiseException('Element', msg)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/__init__.py\", line 13, in _raiseException\n    raise(Exception(msgComplete))\nException: [OSMPythonTools.Element] Cannot build geometry: no outer rings found.\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk_link\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"trunk_link\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk_junction\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"trunk_junction\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[OSMPythonTools.Element] Cannot build geometry: no outer rings found.\nNoneType: None\n"},{"name":"stderr","output_type":"stream","text":"[OSMPythonTools.Element] Cannot build geometry: no outer rings found. (relation/6110277)\nTraceback (most recent call last):\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/element.py\", line 186, in __geometry\n    self._raiseException('Cannot build geometry: no outer rings found.')\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/element.py\", line 50, in _raiseException\n    OSMPythonTools._raiseException('Element', msg)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/__init__.py\", line 13, in _raiseException\n    raise(Exception(msgComplete))\nException: [OSMPythonTools.Element] Cannot build geometry: no outer rings found.\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"primary\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary_link\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"primary_link\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary_junction\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"primary_junction\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"The requested data could not be downloaded. HTTP Error 504: Gateway Timeout\nTraceback (most recent call last):\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/site-packages/OSMPythonTools/internal/cacheObject.py\", line 95, in __query\n    response = urllib.request.urlopen(request)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 214, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 523, in open\n    response = meth(req, response)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 632, in http_response\n    response = self.parent.error(\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 561, in error\n    return self._call_chain(*args)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 494, in _call_chain\n    result = func(*args)\n  File \"/opt/conda/envs/edc-default-2022.10-14/lib/python3.9/urllib/request.py\", line 641, in http_error_default\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\nurllib.error.HTTPError: HTTP Error 504: Gateway Timeout\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary_junction\"](3.0,101.557,3.25,101.80069999999999);relation[\"highway\"=\"primary_junction\"](3.0,101.557,3.25,101.80069999999999);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1994/1510730153.py:79: UserWarning: Geometry is in a geographic CRS. Results from 'buffer' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  buffered = roads_merge.buffer(distance=roads_merge[buffer_dist])\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"dd62314b49a1d2bb7e274711fa1d1626","path":"/build/dd62314b49a1d2bb7e274711fa1d1626.png"},"text/plain":{"content":"<Figure size 1200x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"bnHgAGac1Z"}],"visibility":"show","key":"ewNV58xadm"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.050224,"end_time":"2022-10-13T12:31:07.602194","exception":false,"start_time":"2022-10-13T12:31:07.551970","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The OSM road vectors are buffered, hence we see polygons here.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s6PZ8CRCqn"}],"key":"UmGPIJKMoL"}],"visibility":"show","key":"rzJ42VhpKg"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.046799,"end_time":"2022-10-13T12:31:07.706914","exception":false,"start_time":"2022-10-13T12:31:07.660115","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Rasterize OSM roads to S2 cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hXGa9p6BQc"}],"identifier":"rasterize-osm-roads-to-s2-cube","label":"Rasterize OSM roads to S2 cube","html_id":"rasterize-osm-roads-to-s2-cube","implicit":true,"key":"bGVJGzcol2"}],"visibility":"show","key":"WtB2cki15y"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:07.804880Z","iopub.status.busy":"2022-10-13T12:31:07.804413Z","iopub.status.idle":"2022-10-13T12:31:09.469225Z","shell.execute_reply":"2022-10-13T12:31:09.468260Z"},"papermill":{"duration":1.717294,"end_time":"2022-10-13T12:31:09.473573","exception":false,"start_time":"2022-10-13T12:31:07.756279","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_roads_np = rasterize_osm(osm_roads, cube.B02)","visibility":"show","key":"EbXCBmp93z"},{"type":"output","id":"SuJXMKDZTLjnM3KkiXYFE","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1994/1510730153.py:95: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  raster_osm = raster_osm.astype(np.float)\n"},{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1994/1510730153.py:95: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  raster_osm = raster_osm.astype(np.float)\n"},{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1994/1510730153.py:95: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  raster_osm = raster_osm.astype(np.float)\n"}],"visibility":"show","key":"xXzE6q4YUU"}],"visibility":"show","key":"CBGdHJ3EFO"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.053111,"end_time":"2022-10-13T12:31:09.594043","exception":false,"start_time":"2022-10-13T12:31:09.540932","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mask","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dRlN9p4gWE"}],"identifier":"mask","label":"Mask","html_id":"mask","implicit":true,"key":"XbljPpTp9N"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In case there are clouds in the imagery, they are masked out here. Furthermore, the data is constrained to the OSM roads.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"sBC5l8ra4L"}],"key":"qZL9G7uqjN"}],"visibility":"show","key":"nV1shlviQT"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.05156,"end_time":"2022-10-13T12:31:09.713426","exception":false,"start_time":"2022-10-13T12:31:09.661866","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Clouds","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bsnGAcNvAe"}],"identifier":"clouds","label":"Clouds","html_id":"clouds","implicit":true,"key":"Lan0xSfgMg"}],"visibility":"show","key":"xc85aQQwl3"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:09.830398Z","iopub.status.busy":"2022-10-13T12:31:09.829805Z","iopub.status.idle":"2022-10-13T12:31:09.956936Z","shell.execute_reply":"2022-10-13T12:31:09.955727Z"},"papermill":{"duration":0.192997,"end_time":"2022-10-13T12:31:09.959427","exception":false,"start_time":"2022-10-13T12:31:09.766430","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.mask_clouds()","visibility":"show","key":"OAYud8alHh"},{"type":"output","id":"lmZxQAmuupj14Oequ4oVR","data":[],"visibility":"show","key":"fSI8Y1jvNS"}],"visibility":"show","key":"dFyyTT66D8"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.048948,"end_time":"2022-10-13T12:31:10.065908","exception":false,"start_time":"2022-10-13T12:31:10.016960","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To OSM roads","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XdEInxr3Ie"}],"identifier":"to-osm-roads","label":"To OSM roads","html_id":"to-osm-roads","implicit":true,"key":"wYCE6bY8pB"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Only pixels within the buffered OSM roads are considered.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ffwt2EmBUu"}],"key":"KFAn6SmVtI"}],"visibility":"show","key":"Fue5boeJKL"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:10.173261Z","iopub.status.busy":"2022-10-13T12:31:10.172770Z","iopub.status.idle":"2022-10-13T12:31:10.241702Z","shell.execute_reply":"2022-10-13T12:31:10.240702Z"},"papermill":{"duration":0.120114,"end_time":"2022-10-13T12:31:10.244233","exception":false,"start_time":"2022-10-13T12:31:10.124119","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.mask_with_osm(osm_roads_np)","visibility":"show","key":"w3B6nAkNPH"},{"type":"output","id":"DgsCZWLyr6WhYxoUBiWWc","data":[],"visibility":"show","key":"x0dlj6Gjr8"}],"visibility":"show","key":"HnNQLdlZJ3"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.050594,"end_time":"2022-10-13T12:31:10.342836","exception":false,"start_time":"2022-10-13T12:31:10.292242","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Detect trucks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HgsDGmgaJT"}],"identifier":"detect-trucks","label":"Detect trucks","html_id":"detect-trucks","implicit":true,"key":"wfKMk7toSa"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This is the actual detection being invoked in the “do_detection” wrapper. The output is an xarray DataArray, which is afterwards converted to a GeoDataFrame of points.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"D4S26ul0zJ"}],"key":"LxXQ6V3oRw"}],"visibility":"show","key":"E1UVegCaB3"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:10.462115Z","iopub.status.busy":"2022-10-13T12:31:10.461069Z","iopub.status.idle":"2022-10-13T12:31:44.237645Z","shell.execute_reply":"2022-10-13T12:31:44.235942Z"},"papermill":{"duration":33.843165,"end_time":"2022-10-13T12:31:44.240501","exception":false,"start_time":"2022-10-13T12:31:10.397336","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.do_detection()\n# raster detections to points\ntruck_points = raster_to_points(acquisition.detector.trucks.values, {\"lon\":cube.lon.values, \"lat\":cube.lat.values}, \"trucks\", \"EPSG:4326\")\ntruck_points.plot(figsize=[12,10])","visibility":"show","key":"mXP9zG6iNu"},{"type":"output","id":"ZRvirGpPcsOayba5g5Pji","data":[{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1994/2429981473.py:19: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  self.trucks = xr.DataArray(trucks, coords=lon_lat, dims=(\"lat\", \"lon\")).astype(np.int)\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"39da16d695b5002c3a90f72edf054511","path":"/build/39da16d695b5002c3a90f72edf054511.png"},"text/plain":{"content":"<Figure size 1200x1000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"d960N9zuqQ"}],"visibility":"show","key":"yQKyulCcXa"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.047713,"end_time":"2022-10-13T12:31:44.365681","exception":false,"start_time":"2022-10-13T12:31:44.317968","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Write detections","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fPRzeyoCbL"}],"identifier":"write-detections","label":"Write detections","html_id":"write-detections","implicit":true,"key":"LdKLAVAQzC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"If you would like to write the truck points, simply modify the file path here","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"wr3XXdddbF"}],"key":"YfJG3ECUQl"}],"visibility":"show","key":"cOzzbW1p6G"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:44.477192Z","iopub.status.busy":"2022-10-13T12:31:44.476677Z","iopub.status.idle":"2022-10-13T12:31:44.600874Z","shell.execute_reply":"2022-10-13T12:31:44.599479Z"},"papermill":{"duration":0.183446,"end_time":"2022-10-13T12:31:44.603478","exception":false,"start_time":"2022-10-13T12:31:44.420032","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"truck_points.to_file(\"trucks.gpkg\", driver=\"GPKG\")","visibility":"show","key":"JodiwZIM1n"},{"type":"output","id":"4t9gAA9nqF91WPjKNupvN","data":[],"visibility":"show","key":"bd4IuSXmBX"}],"visibility":"show","key":"muptTOker5"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:44.706641Z","iopub.status.busy":"2022-10-13T12:31:44.705394Z","iopub.status.idle":"2022-10-13T12:31:44.711620Z","shell.execute_reply":"2022-10-13T12:31:44.710399Z"},"papermill":{"duration":0.067009,"end_time":"2022-10-13T12:31:44.716770","exception":false,"start_time":"2022-10-13T12:31:44.649761","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import geopandas","visibility":"show","key":"lbjpjTPckl"},{"type":"output","id":"Fp2hp0Pb2hqTsyBIWtKxc","data":[],"visibility":"show","key":"PZXJGWdbH3"}],"visibility":"show","key":"ZSrqIppVEF"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.058935,"end_time":"2022-10-13T12:31:44.831362","exception":false,"start_time":"2022-10-13T12:31:44.772427","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Could be interesting to have a look at the geopackage fields and values, so ise the geopandas read_file to get more information on the file generated.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R7pVK0ZVta"}],"key":"kV9nVCH4yg"}],"visibility":"show","key":"mmKaQsTN4a"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:44.952994Z","iopub.status.busy":"2022-10-13T12:31:44.951317Z","iopub.status.idle":"2022-10-13T12:31:45.010974Z","shell.execute_reply":"2022-10-13T12:31:45.008451Z"},"papermill":{"duration":0.122704,"end_time":"2022-10-13T12:31:45.015227","exception":false,"start_time":"2022-10-13T12:31:44.892523","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"trucks_gpkg = geopandas.read_file(\"trucks.gpkg\")\ntrucks_gpkg ","visibility":"show","key":"ld5Ee5ZQZq"},{"type":"output","id":"eGIHoTOTwy8UjYqZHkmpp","data":[{"output_type":"execute_result","execution_count":20,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trucks</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>POINT (101.70758 3.23409)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>POINT (101.68895 3.23328)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>POINT (101.72441 3.23310)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>POINT (101.67239 3.23292)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>POINT (101.67239 3.23265)</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>284</th>\n      <td>1</td>\n      <td>POINT (101.68778 3.05950)</td>\n    </tr>\n    <tr>\n      <th>285</th>\n      <td>1</td>\n      <td>POINT (101.63818 3.05877)</td>\n    </tr>\n    <tr>\n      <th>286</th>\n      <td>1</td>\n      <td>POINT (101.68868 3.05509)</td>\n    </tr>\n    <tr>\n      <th>287</th>\n      <td>1</td>\n      <td>POINT (101.70578 3.05382)</td>\n    </tr>\n    <tr>\n      <th>288</th>\n      <td>1</td>\n      <td>POINT (101.69660 3.05041)</td>\n    </tr>\n  </tbody>\n</table>\n<p>289 rows × 2 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"     trucks                   geometry\n0         1  POINT (101.70758 3.23409)\n1         1  POINT (101.68895 3.23328)\n2         1  POINT (101.72441 3.23310)\n3         1  POINT (101.67239 3.23292)\n4         1  POINT (101.67239 3.23265)\n..      ...                        ...\n284       1  POINT (101.68778 3.05950)\n285       1  POINT (101.63818 3.05877)\n286       1  POINT (101.68868 3.05509)\n287       1  POINT (101.70578 3.05382)\n288       1  POINT (101.69660 3.05041)\n\n[289 rows x 2 columns]","content_type":"text/plain"}}}],"visibility":"show","key":"dVxfhrYx9O"}],"visibility":"show","key":"Mbjhk6qy3E"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.086874,"end_time":"2022-10-13T12:31:45.172736","exception":false,"start_time":"2022-10-13T12:31:45.085862","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Download the Sentinel 2 True color image from Sentinel hub","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ircD96JkON"}],"identifier":"download-the-sentinel-2-true-color-image-from-sentinel-hub","label":"Download the Sentinel 2 True color image from Sentinel hub","html_id":"download-the-sentinel-2-true-color-image-from-sentinel-hub","implicit":true,"key":"wwT3CX1yKO"}],"visibility":"show","key":"r340ajuTSc"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:45.276136Z","iopub.status.busy":"2022-10-13T12:31:45.275230Z","iopub.status.idle":"2022-10-13T12:31:45.428141Z","shell.execute_reply":"2022-10-13T12:31:45.425908Z"},"papermill":{"duration":0.209098,"end_time":"2022-10-13T12:31:45.431880","exception":false,"start_time":"2022-10-13T12:31:45.222782","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from sentinelhub import SHConfig\n\nconfig = SHConfig()\n\nif not config.sh_client_id or not config.sh_client_secret:\n    print(\"Warning! To use Process API, please provide the credentials (OAuth client ID and client secret).\")","visibility":"show","key":"IkCMVDO2Qo"},{"type":"output","id":"rOQwW57j7REFcUO4tMmAM","data":[{"name":"stdout","output_type":"stream","text":"Warning! To use Process API, please provide the credentials (OAuth client ID and client secret).\n"}],"visibility":"show","key":"aPbSUAIVus"}],"visibility":"show","key":"pzoavtUjxn"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.047416,"end_time":"2022-10-13T12:31:45.530525","exception":false,"start_time":"2022-10-13T12:31:45.483109","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Injection of SH credentials to run the processing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sbYSbJnatY"}],"key":"CJLj9XtRjx"}],"visibility":"show","key":"Rf5bsf6apM"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:45.634844Z","iopub.status.busy":"2022-10-13T12:31:45.633880Z","iopub.status.idle":"2022-10-13T12:31:45.641833Z","shell.execute_reply":"2022-10-13T12:31:45.639998Z"},"papermill":{"duration":0.061901,"end_time":"2022-10-13T12:31:45.646672","exception":false,"start_time":"2022-10-13T12:31:45.584771","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"config.sh_client_id = os.environ[\"SH_CLIENT_ID\"]\nconfig.sh_client_secret = os.environ[\"SH_CLIENT_SECRET\"]","visibility":"show","key":"YZ2Zgd9VqS"},{"type":"output","id":"QvdKRmHfjSEMBu1wpVjJS","data":[],"visibility":"show","key":"IN7rid9dSj"}],"visibility":"show","key":"n2x1dupD3c"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:45.771395Z","iopub.status.busy":"2022-10-13T12:31:45.770418Z","iopub.status.idle":"2022-10-13T12:31:45.814956Z","shell.execute_reply":"2022-10-13T12:31:45.814127Z"},"papermill":{"duration":0.115452,"end_time":"2022-10-13T12:31:45.817385","exception":false,"start_time":"2022-10-13T12:31:45.701933","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"%reload_ext autoreload\n%autoreload 2","visibility":"show","key":"jitGKIfKlH"},{"type":"output","id":"5VX1Cv7ywOBv4eDn18498","data":[],"visibility":"show","key":"NLUF27AG1o"}],"visibility":"show","key":"gHalroCQHT"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:45.921286Z","iopub.status.busy":"2022-10-13T12:31:45.920602Z","iopub.status.idle":"2022-10-13T12:31:45.959417Z","shell.execute_reply":"2022-10-13T12:31:45.957771Z"},"papermill":{"duration":0.092326,"end_time":"2022-10-13T12:31:45.962471","exception":false,"start_time":"2022-10-13T12:31:45.870145","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport rasterio\nfrom rasterio import plot\nfrom rasterio.plot import show\nfrom rasterio.mask import mask","visibility":"show","key":"IVk88Fz1fK"},{"type":"output","id":"zXvV8RoVLcLd36c8eO1Ou","data":[],"visibility":"show","key":"aHLleh3kmU"}],"visibility":"show","key":"OXG7kopSSM"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:46.059604Z","iopub.status.busy":"2022-10-13T12:31:46.058903Z","iopub.status.idle":"2022-10-13T12:31:46.095234Z","shell.execute_reply":"2022-10-13T12:31:46.093801Z"},"papermill":{"duration":0.087956,"end_time":"2022-10-13T12:31:46.097658","exception":false,"start_time":"2022-10-13T12:31:46.009702","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import datetime\nfrom sentinelhub import (\n    CRS,\n    BBox,\n    DataCollection,\n    DownloadRequest,\n    MimeType,\n    #MosaickingOrder,\n    SentinelHubDownloadClient,\n    SentinelHubRequest,\n    bbox_to_dimensions,\n)","visibility":"show","key":"R7jtWOGNHR"},{"type":"output","id":"0lW6KSftU76je3mc2KLCA","data":[],"visibility":"show","key":"kku8A84SZA"}],"visibility":"show","key":"SX6lksv5FY"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.080317,"end_time":"2022-10-13T12:31:46.226272","exception":false,"start_time":"2022-10-13T12:31:46.145955","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In the following  cell we need to set resolution of the image, the bbox and the CRS of reference. Please be careful in using the same CRS or EPSG used for the detection in order to execute the last cell properly. Currently the detections CRS has been set as:\n“EPSG:4326” or “CRS:WGS84”","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mADQbxldGI"}],"key":"bntob8skre"}],"visibility":"show","key":"OeEVQC6Bo7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:46.339864Z","iopub.status.busy":"2022-10-13T12:31:46.339445Z","iopub.status.idle":"2022-10-13T12:31:46.424188Z","shell.execute_reply":"2022-10-13T12:31:46.421493Z"},"papermill":{"duration":0.138347,"end_time":"2022-10-13T12:31:46.427371","exception":false,"start_time":"2022-10-13T12:31:46.289024","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"resolution = 10\nkualalumpur_bbox = BBox(bbox=bbox, crs=CRS.WGS84)\nkualalumpur_size = bbox_to_dimensions(kualalumpur_bbox, resolution=resolution)\n\nprint(f\"Image shape at {resolution} m resolution: {kualalumpur_size} pixels\")","visibility":"show","key":"LnfjZnAFCE"},{"type":"output","id":"WakXJTDphSzXnAOWySHtP","data":[{"name":"stdout","output_type":"stream","text":"Image shape at 10 m resolution: (1594, 1664) pixels\n"}],"visibility":"show","key":"q1gAuNEuqu"}],"visibility":"show","key":"XO3xtlyzri"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:46.533540Z","iopub.status.busy":"2022-10-13T12:31:46.532959Z","iopub.status.idle":"2022-10-13T12:31:46.583674Z","shell.execute_reply":"2022-10-13T12:31:46.582947Z"},"papermill":{"duration":0.105216,"end_time":"2022-10-13T12:31:46.586085","exception":false,"start_time":"2022-10-13T12:31:46.480869","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"evalscript = \"\"\"\n    //VERSION=3\n\n    function setup() {\n        return {\n            input: [{\n                bands: [\"B02\", \"B03\", \"B04\"],\n               \n            }],\n            output: {\n                bands: 3,\n                sampleType: \"AUTO\"\n                \n            }\n        };\n    }\n\n    \n    function evaluatePixel(sample) {\n        return [sample.B04*2, sample.B03*2, sample.B02*2];\n    }\n\"\"\"\n\nrequest_true_colour = SentinelHubRequest(\n    data_folder= \"./Outputs\",\n    evalscript=evalscript,\n    input_data=[\n        SentinelHubRequest.input_data(\n            data_collection=DataCollection.SENTINEL2_L2A,\n            time_interval=(date_start, date_end)\n            \n        )\n    ],\n    responses=[\n        SentinelHubRequest.output_response(\"default\", MimeType.TIFF)\n        \n    ],\n    bbox=kualalumpur_bbox,\n    size=kualalumpur_size,\n    config=config,\n)","visibility":"show","key":"bYV9ZswTdU"},{"type":"output","id":"DG1nDdXaI5kZ9J1yguBlv","data":[],"visibility":"show","key":"B72YA4Z4VX"}],"visibility":"show","key":"fkH1qoH2pn"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:46.688376Z","iopub.status.busy":"2022-10-13T12:31:46.687657Z","iopub.status.idle":"2022-10-13T12:31:49.815652Z","shell.execute_reply":"2022-10-13T12:31:49.814716Z"},"papermill":{"duration":3.184763,"end_time":"2022-10-13T12:31:49.818326","exception":false,"start_time":"2022-10-13T12:31:46.633563","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"tiff_image = request_true_colour.get_data(save_data=True)","visibility":"show","key":"MyQc5pAc4x"},{"type":"output","id":"wBubbuJ1rGRjOzSCQeiDA","data":[],"visibility":"show","key":"nYcYiSCHCY"}],"visibility":"show","key":"fz67uVhqMW"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.050417,"end_time":"2022-10-13T12:31:49.933506","exception":false,"start_time":"2022-10-13T12:31:49.883089","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In order to plot the image downloaded we need first to define the plot_image function as follow. In case of mage too dark or too bright yuo could play with the","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GXpx4nzhxQ"}],"key":"CYDBShTdBf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"“”“function evaluatePixel(sample) {\nreturn [sample.B04","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hjWfG6hPH7"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2, sample.B03","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"f0Wt16VkFN"}],"key":"rK3DSNhBUQ"},{"type":"text","value":"2, sample.B02*2];”“”","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SZjvuUXmWo"}],"key":"g9FyzuWW7g"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"you can find in the evalscript above","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Wko9xXHgAl"}],"key":"krT0B0aJ6Y"}],"visibility":"show","key":"V9ma3APtRy"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:50.038695Z","iopub.status.busy":"2022-10-13T12:31:50.038314Z","iopub.status.idle":"2022-10-13T12:31:50.092939Z","shell.execute_reply":"2022-10-13T12:31:50.091884Z"},"papermill":{"duration":0.11034,"end_time":"2022-10-13T12:31:50.095655","exception":false,"start_time":"2022-10-13T12:31:49.985315","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the plot_image function\ndef plot_image(image, factor=1.0, clip_range = None, **kwargs):\n    \"\"\"\n    Utility function for plotting RGB images.\n    \"\"\"\n    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 15))\n    if clip_range is not None:\n        ax.imshow(np.clip(image * factor, *clip_range), **kwargs)\n    else:\n        ax.imshow(image * factor, **kwargs)\n    \n    ax.set_xticks([])\n    ax.set_yticks([])","visibility":"show","key":"J0cBj6obUv"},{"type":"output","id":"0Dg-dgU_HTvfDp-KvG_nl","data":[],"visibility":"show","key":"PLqlKsZNxb"}],"visibility":"show","key":"Ar2XbenoFr"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:50.206471Z","iopub.status.busy":"2022-10-13T12:31:50.205059Z","iopub.status.idle":"2022-10-13T12:31:52.343509Z","shell.execute_reply":"2022-10-13T12:31:52.338861Z"},"papermill":{"duration":2.239576,"end_time":"2022-10-13T12:31:52.386669","exception":false,"start_time":"2022-10-13T12:31:50.147093","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"plot_image(tiff_image[0], factor=1/255, clip_range=(0,1))","visibility":"show","key":"Vm0AEzc5ms"},{"type":"output","id":"x0YAcCr-8Kzp1WJqlHhPB","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"de86bf6add38ad21c7f4a2721227a4ec","path":"/build/de86bf6add38ad21c7f4a2721227a4ec.png"},"text/plain":{"content":"<Figure size 1500x1500 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"MUENzAVvl7"}],"visibility":"show","key":"AdFoZa7KnP"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.109077,"end_time":"2022-10-13T12:31:52.609474","exception":false,"start_time":"2022-10-13T12:31:52.500397","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In order to set the location of the tiff requesteed via SentinelHub, you need to identify the folder and set it in the input image path.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZpBm5w8nim"}],"key":"DHYLzrmel9"}],"visibility":"show","key":"Nj48eZNYH7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:52.826111Z","iopub.status.busy":"2022-10-13T12:31:52.825591Z","iopub.status.idle":"2022-10-13T12:31:52.863691Z","shell.execute_reply":"2022-10-13T12:31:52.862344Z"},"papermill":{"duration":0.148476,"end_time":"2022-10-13T12:31:52.866382","exception":false,"start_time":"2022-10-13T12:31:52.717906","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#input_image = \"Downloaded_S2_TCI/2020-05-18-00_00_2020-05-18-23_59_Sentinel-2_L2A_True_color (1).tiff\"\ninput_image = \"./Outputs/a308013e4b1539348e30b3393836e689/response.tiff\"","visibility":"show","key":"UmQuWpZdmA"},{"type":"output","id":"hK-tT1dRMdHSmnO1qSt9m","data":[],"visibility":"show","key":"TjTVnrSQ54"}],"visibility":"show","key":"n9RINzJeiU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:53.081173Z","iopub.status.busy":"2022-10-13T12:31:53.080605Z","iopub.status.idle":"2022-10-13T12:31:53.117546Z","shell.execute_reply":"2022-10-13T12:31:53.116803Z"},"papermill":{"duration":0.14729,"end_time":"2022-10-13T12:31:53.119970","exception":false,"start_time":"2022-10-13T12:31:52.972680","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"input_image_png = rasterio.open(input_image) ","visibility":"show","key":"xET9ArIRco"},{"type":"output","id":"q5dIfHzvYTRqk0csu1ugt","data":[],"visibility":"show","key":"PP4D9Ldyor"}],"visibility":"show","key":"vYk0FbQFYs"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:53.334921Z","iopub.status.busy":"2022-10-13T12:31:53.334431Z","iopub.status.idle":"2022-10-13T12:31:55.087629Z","shell.execute_reply":"2022-10-13T12:31:55.086034Z"},"papermill":{"duration":1.964911,"end_time":"2022-10-13T12:31:55.188737","exception":false,"start_time":"2022-10-13T12:31:53.223826","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"plt.figure(figsize=(15, 15))\nshow(input_image_png.read(), transform=input_image_png.transform)\nplt.show()","visibility":"show","key":"qVntKcl9J7"},{"type":"output","id":"mzW0VNrCMh6h8o0E9ruqS","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4de4b3423ddebd801686f6435864a838","path":"/build/4de4b3423ddebd801686f6435864a838.png"},"text/plain":{"content":"<Figure size 1500x1500 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"KJVRe8QfCy"}],"visibility":"show","key":"zG2wTxaWmm"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:55.652792Z","iopub.status.busy":"2022-10-13T12:31:55.652344Z","iopub.status.idle":"2022-10-13T12:31:56.195857Z","shell.execute_reply":"2022-10-13T12:31:56.195047Z"},"papermill":{"duration":0.759885,"end_time":"2022-10-13T12:31:56.198788","exception":false,"start_time":"2022-10-13T12:31:55.438903","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"trucks_gpkg.plot()","visibility":"show","key":"wN4OHLopBT"},{"type":"output","id":"9K5v2vIA-hm3kgGvSheR6","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b55becd65a1305ac4dbbe220bcb8d0c8","path":"/build/b55becd65a1305ac4dbbe220bcb8d0c8.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"nzATBXT3fn"}],"visibility":"show","key":"JB37skSnml"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:56.567674Z","iopub.status.busy":"2022-10-13T12:31:56.567213Z","iopub.status.idle":"2022-10-13T12:31:56.617782Z","shell.execute_reply":"2022-10-13T12:31:56.615337Z"},"papermill":{"duration":0.250767,"end_time":"2022-10-13T12:31:56.621671","exception":false,"start_time":"2022-10-13T12:31:56.370904","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print('vector data projection is:', trucks_gpkg.crs)\nprint('raster data projection is:', input_image_png.crs)","visibility":"show","key":"Jr8ayye6FC"},{"type":"output","id":"iAyDTNTjehhDmwtSQ9OUE","data":[{"name":"stdout","output_type":"stream","text":"vector data projection is: epsg:4326\nraster data projection is: EPSG:4326\n"}],"visibility":"show","key":"xyAVn1sO4v"}],"visibility":"show","key":"mjZs03oRYH"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:57.033134Z","iopub.status.busy":"2022-10-13T12:31:57.032444Z","iopub.status.idle":"2022-10-13T12:31:57.070904Z","shell.execute_reply":"2022-10-13T12:31:57.069935Z"},"papermill":{"duration":0.248824,"end_time":"2022-10-13T12:31:57.074090","exception":false,"start_time":"2022-10-13T12:31:56.825266","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib inline","visibility":"show","key":"BBugMdhHy0"},{"type":"output","id":"SpCahbiB5vcPcLOvKTTpL","data":[],"visibility":"show","key":"A5MJXbkunQ"}],"visibility":"show","key":"KxMQ3neZlo"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2022-10-13T12:31:57.468299Z","iopub.status.busy":"2022-10-13T12:31:57.467923Z","iopub.status.idle":"2022-10-13T12:32:09.291195Z","shell.execute_reply":"2022-10-13T12:32:09.288167Z"},"papermill":{"duration":12.300531,"end_time":"2022-10-13T12:32:09.555582","exception":false,"start_time":"2022-10-13T12:31:57.255051","status":"completed"},"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(100, 50))\nshow(input_image_png.read(), transform=input_image_png.transform, ax=ax)\ntrucks_gpkg.plot(ax=ax, color='yellow', alpha=.30) ## alpha is the transparency setting\nplt.show()","visibility":"show","key":"kSK9ByEMxX"},{"type":"output","id":"KEYtdmjsjGT7mmWCrNiZL","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ec6f79462ff16fad67259fc46bd22967","path":"/build/ec6f79462ff16fad67259fc46bd22967.png"},"text/plain":{"content":"<Figure size 10000x5000 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"tEkwObqTc4"}],"visibility":"show","key":"gqE41wO5gC"}],"key":"fzZ8ueLou4"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Data Access","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/igarss2022/igarss-22-data-access","group":"Contributions"},"next":{"title":"Environmental Impacts of Lockdown in Venice, Italy during 2020","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/igarss2022/igarss-22-lockdown-in-venice","group":"Contributions"}}},"domain":"http://localhost:3000"}