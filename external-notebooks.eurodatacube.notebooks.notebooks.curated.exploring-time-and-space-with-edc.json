{"version":1,"kind":"Notebook","sha256":"60bcfbfc9b3c0c300aa657351f2fdd6e544129c33c1cf097883fc90e34b5a920","slug":"external-notebooks.eurodatacube.notebooks.notebooks.curated.exploring-time-and-space-with-edc","location":"/external_notebooks/eurodatacube/notebooks/notebooks/curated/Exploring_time_and_space_with_EDC.ipynb","dependencies":[],"frontmatter":{"title":"Exploring Time and Space: A guide to accessing, analysing and visualising data in the Euro Data Cube","content_includes_title":true,"kernelspec":{"name":"conda-env-users-edc-2023.10-01-py","display_name":"EDC 0.25.0-preview.7 (Python3)","language":"python"},"github":"https://github.com/eoxhub-workspaces/documentation/","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/eoxhub-workspaces/documentation//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/curated/Exploring_time_and_space_with_EDC.ipynb","exports":[{"format":"ipynb","filename":"Exploring_time_and_space_with_EDC.ipynb","url":"/notebooks_test/build/Exploring_time_and_s-e58baed7dde158689fdc596e3b9f8229.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:24.419400Z","iopub.status.busy":"2023-10-24T07:57:24.419132Z","iopub.status.idle":"2023-10-24T07:57:24.462660Z","shell.execute_reply":"2023-10-24T07:57:24.462220Z"},"papermill":{"duration":0.074494,"end_time":"2023-10-24T07:57:24.463684","exception":false,"start_time":"2023-10-24T07:57:24.389190","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import check_compatibility\ncheck_compatibility(\"user-2023.10-01\", dependencies=[\"SH\"])","visibility":"show","key":"p6kGw5eDJk"},{"type":"output","id":"2-F1yZ9UO9WZ0lhYpd4C8","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script type=\"text/javascript\">\n        function toggle(id) {\n            el = document.getElementById(id);\n            el.style.display = el.style.display === \"none\" ? \"block\" : \"none\";\n        }\n    </script>","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"This notebook is compatible with this base image version (user-2023.10-01).","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"\n\n---------\n\nThe following environment variables are available:\n\n* `SH_CLIENT_ID`, `SH_INSTANCE_ID`, `SH_CLIENT_NAME`, `SH_CLIENT_SECRET`\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"CV6rqwltQt"}],"visibility":"show","key":"SxM4bmUvdl"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.025326,"end_time":"2023-10-24T07:57:24.542494","exception":false,"start_time":"2023-10-24T07:57:24.517168","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Exploring Time and Space: A guide to accessing, analysing and visualising data in the Euro Data Cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"w9d4U1nXST"}],"identifier":"exploring-time-and-space-a-guide-to-accessing-analysing-and-visualising-data-in-the-euro-data-cube","label":"Exploring Time and Space: A guide to accessing, analysing and visualising data in the Euro Data Cube","html_id":"exploring-time-and-space-a-guide-to-accessing-analysing-and-visualising-data-in-the-euro-data-cube","implicit":true,"key":"ZTa4Lt6M38"},{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"G64FHWL6Vs"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Written by: ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xhwuwb9Syx"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"William Ray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"LQjOzS7ZGd"}],"key":"KIHTsdd2dl"}],"key":"WUwA6o15BD"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Getting started with EDC","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YUnyAyqKGU"}],"identifier":"getting-started-with-edc","label":"Getting started with EDC","html_id":"getting-started-with-edc","implicit":true,"key":"kyQXWn9MZJ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In this demonstration Jupyter Notebook, we will be visualising and analysing river flooding using Sentinel data to demonstrate how you can use EDC for your own applications. Much of what we we will focus on can be used for many other applications and use cases.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"yehwCZsKVU"}],"key":"uiJ9aD5zzQ"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"We are going to use the EDC and its associated libaries and APIs to do this. In this notebook we will learn how to:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"b1VX2J3Fa5"}],"key":"f1hiIvoYvV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Build a cube","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NVzt1dxWqM"}],"key":"KeS60bbddM"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Visualise a variable in your data cube","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"z908pPOVIK"}],"key":"FAVgA0QHiZ"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Create a new variable","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"C6IwypXDlY"}],"key":"XKXRCSB7dy"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Create a new variable using a threshold","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"n40saP7Vry"}],"key":"z1GHqvWdNr"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Visualise a spatial subset of a variable over time","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"jeNBFchWGd"}],"key":"QKWIYnjGNB"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Create a new variable based upon space and time.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"xefT66iaVN"}],"key":"Lwxfceljym"}],"key":"qAZTEcR3ya"}],"visibility":"show","key":"B35H7dN6ij"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.025435,"end_time":"2023-10-24T07:57:24.610465","exception":false,"start_time":"2023-10-24T07:57:24.585030","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Configuration","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GufnZDSUzY"}],"identifier":"configuration","label":"Configuration","html_id":"configuration","implicit":true,"key":"bijzNMmibB"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Before acccessing the data, we will start by importing the necessary Python libraries (already configured in your EDC workspace), and generate credentials automatically to access the services.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wUg6RHxK9F"}],"key":"RuFpKxy1Go"}],"visibility":"show","key":"E9kcqrZIQ7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:24.689701Z","iopub.status.busy":"2023-10-24T07:57:24.689296Z","iopub.status.idle":"2023-10-24T07:57:27.783850Z","shell.execute_reply":"2023-10-24T07:57:27.783383Z"},"papermill":{"duration":3.122828,"end_time":"2023-10-24T07:57:27.784920","exception":false,"start_time":"2023-10-24T07:57:24.662092","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# EDC libraries\nfrom edc import setup_environment_variables\nfrom xcube_sh.config import CubeConfig\nfrom xcube_sh.cube import open_cube\nfrom xcube_sh.sentinelhub import SentinelHub\nfrom xcube.core.gen2.local.combiner import CubesCombiner\nfrom xcube.core.geom import mask_dataset_by_geometry\n\n# Sentinel Hub\nfrom sentinelhub import BBox, SentinelHubRequest, bbox_to_dimensions, DataCollection, MimeType, SHConfig, geometry\n\n# Utilities\nimport IPython.display\nfrom os import environ\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport geopandas\nimport rioxarray\n\n# Numerical computation\nimport xarray as xr\nimport numpy as np\n\n# Fetch credentials as environement variables\nsetup_environment_variables()\n\n# Pass Sentinel Hub credentials to dictionnary\nsh_credentials = dict(client_id=environ[\"SH_CLIENT_ID\"],\n                      client_secret=environ[\"SH_CLIENT_SECRET\"])","visibility":"show","key":"rlFS4ZTfu7"},{"type":"output","id":"UhT6Szdea5BIAUkh7K319","data":[{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"API credentials have automatically been injected for your active subscriptions.  \nThe following environment variables are now available:\n\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"PhxQSg0tDs"}],"visibility":"show","key":"sy6PzOIpcG"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.025768,"end_time":"2023-10-24T07:57:27.852952","exception":false,"start_time":"2023-10-24T07:57:27.827184","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define an AOI","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UBDcUE3Ju1"}],"key":"ji4PG5F3ae"}],"key":"EztGwl6CmY"}],"key":"WyBIYImeAj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next, we will define our area of interest using a bounding box. This must be provided in WGS84 coordinates to build the cube. But later, we will clip this further using a GeoJSON to a far better defined AOI. We have chosen an AOI on the River Severn in the UK. This area regularly floods in the winter months with a wide floodplain. Last winter (2020/2021), there was significant flooding in the second half of December and at the end of January / start of February.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YQQKgkQql6"}],"key":"UisFVZEAUk"}],"visibility":"show","key":"ldmCqG3SV7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:27.925005Z","iopub.status.busy":"2023-10-24T07:57:27.924339Z","iopub.status.idle":"2023-10-24T07:57:27.927594Z","shell.execute_reply":"2023-10-24T07:57:27.927143Z"},"papermill":{"duration":0.03055,"end_time":"2023-10-24T07:57:27.928518","exception":false,"start_time":"2023-10-24T07:57:27.897968","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Bbox\ntewkesbury_uk_bbox = [-2.24, 51.93, -2.09, 52.10]\nsmaller_box = [-2.24, 51.99, -2.15, 52.05]\n\n# Bbox EPSG\nbbox_epsg = 4326","visibility":"show","key":"Ylk0hRtxnV"},{"type":"output","id":"iiz4RhPUySnrhogRWRINH","data":[],"visibility":"show","key":"AWXWLOQZC6"}],"visibility":"show","key":"PXjYyMtqCL"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:27.994416Z","iopub.status.busy":"2023-10-24T07:57:27.994010Z","iopub.status.idle":"2023-10-24T07:57:27.997863Z","shell.execute_reply":"2023-10-24T07:57:27.997412Z"},"papermill":{"duration":0.0319,"end_time":"2023-10-24T07:57:27.998873","exception":false,"start_time":"2023-10-24T07:57:27.966973","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the bounding box on a map\nIPython.display.GeoJSON(BBox(smaller_box,crs=bbox_epsg).get_geojson())","visibility":"show","key":"nTaA2vtYse"},{"type":"output","id":"MZJu4Hj3yU4SbNke-OpHj","data":[{"output_type":"display_data","metadata":{"application/geo+json":{"expanded":false,"root":"root"}},"data":{"application/geo+json":{"content":"{\"coordinates\":[[[-2.24,51.99],[-2.24,52.05],[-2.15,52.05],[-2.15,51.99],[-2.24,51.99]]],\"crs\":{\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::4326\"},\"type\":\"name\"},\"type\":\"Polygon\"}","content_type":"application/geo+json"},"text/plain":{"content":"<IPython.display.GeoJSON object>","content_type":"text/plain"}}}],"visibility":"show","key":"n1rMjrGL6T"}],"visibility":"show","key":"ZJz4oAlci0"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.026264,"end_time":"2023-10-24T07:57:28.064427","exception":false,"start_time":"2023-10-24T07:57:28.038163","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"How to build a data cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mohchwSZPh"}],"identifier":"how-to-build-a-data-cube","label":"How to build a data cube","html_id":"how-to-build-a-data-cube","implicit":true,"key":"GTAGiAviII"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Firstly, we will go through how to build a data cube.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rPUEmCmIoy"}],"key":"UnVVWzGXOZ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We are going to visualise the floods using Sentinel-2 imagery. Sentinel-2 is part of the Copernicus programme and collects multispectral data globally with a revisit time of 5 days. The satellite’s multispectral imager provides collects data in 13 spectral bands spanning from the visible and near infrared to the shortwave infrared. The visible and near infrared data we will use in this example is collected at 10m resolution.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"STnx5lYtfy"}],"key":"mMHeQ0ZFfi"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Check Sentinel-2 L2A available bands","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SBJPABbKgZ"}],"key":"Y29GBHj2dp"}],"key":"uIacmGTi4R"}],"key":"WkX3LBfHLD"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Using EDC inbuilt functions that query Sentinel Hub services, we can easily list the available bands for a given dataset to help us build the cube!","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"kxGPIXoKhd"}],"key":"MMK8LZXzZU"}],"visibility":"show","key":"gTXgc0TOFI"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:28.134167Z","iopub.status.busy":"2023-10-24T07:57:28.133851Z","iopub.status.idle":"2023-10-24T07:57:28.198165Z","shell.execute_reply":"2023-10-24T07:57:28.197654Z"},"papermill":{"duration":0.095941,"end_time":"2023-10-24T07:57:28.199205","exception":false,"start_time":"2023-10-24T07:57:28.103264","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create a Sentinel Hub class, using our Sentinel Hub credentials\nSH = SentinelHub(**sh_credentials)\n\n# List bands for S2-L2A\nSH.band_names('S2L2A')","visibility":"show","key":"IRR0Aow8mK"},{"type":"output","id":"rnfHEPWoirtALpDBZfomP","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"['B01',\n 'B02',\n 'B03',\n 'B04',\n 'B05',\n 'B06',\n 'B07',\n 'B08',\n 'B8A',\n 'B09',\n 'B11',\n 'B12',\n 'SCL',\n 'SNW',\n 'CLD',\n 'viewZenithMean',\n 'viewAzimuthMean',\n 'sunZenithAngles',\n 'sunAzimuthAngles',\n 'AOT',\n 'CLM',\n 'CLP']","content_type":"text/plain"}}}],"visibility":"show","key":"N4sCcREE7H"}],"visibility":"show","key":"iq5wNfGnUk"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.042013,"end_time":"2023-10-24T07:57:28.299809","exception":false,"start_time":"2023-10-24T07:57:28.257796","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build an xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n0K7sDXKkA"}],"key":"upirOoL8M5"}],"key":"jSP92dsKNL"}],"key":"r1BZQ7VQO6"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we will specify the input parameters needed to build an xcube array. The following parameters are specified:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SNi1E98L0Q"}],"key":"ZcghvWqylz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"dataset_name","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OjXvX8xdcs"}],"key":"D8dtCIKC3G"},{"type":"text","value":": the Sentinel Hub identification of the dataset. Here we will call ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QbEFIfWrc6"},{"type":"inlineCode","value":"S2L2A","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cb83mcAeoH"},{"type":"text","value":" for Sentinel-2 L2A. All available datasets can be listed with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cnawAYTXib"},{"type":"inlineCode","value":"SH.dataset_names","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"p2KKJ0ZAzX"}],"key":"qcBtmHGMtj"}],"key":"loW27zhc5F"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"band_names","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qi4zd7rKy1"}],"key":"AQ86Kj1owz"},{"type":"text","value":": the band names to be used in the xcube array (see previous code cell). Here, we will call the B02, B03, B04, B08, CLM (Blue, Green, Red & NIR, Cloud Mask) bands.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"XavJZZTdIa"}],"key":"PUjru54tRa"}],"key":"NGqN3VQOiW"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"bbox","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"c11v6HUWbV"}],"key":"epNYU037k6"},{"type":"text","value":": the bounding box that sets the extent of the AOI. Because we are using the default WGS84 coordinate system here, the CRS parameter doesn’t need to be set.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Zu5i6ZM4nC"}],"key":"JBDrQjsvAK"}],"key":"eQwNp7bjpw"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"spatial_res","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"wArtxtcy67"}],"key":"nP9nkbgx7r"},{"type":"text","value":": the spatial resolution of the rasters contained in the xcube array. The spatial resolution is expressed in the units of the coordinate system used. Therefore, in this example, the spatial resolution is set in degrees. For an approximate pixel size of 10 meters, we set the resolution to 0.000089 degrees.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"uN6M67FU4P"}],"key":"Onlgdg99L4"}],"key":"DUPjx4UpVR"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"time_range","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"oePEU1hdsU"}],"key":"IjqyjFygQh"},{"type":"text","value":": a list of two dates [start_date, end_date] forming a time period for which all acquisitions will be returned. Sentinel-2 L2A data is available from October 2016 onwards. In this example, we will fetch data for December 2020 - February 2021.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"kB3eo1REg3"}],"key":"SsdfISGOqZ"}],"key":"rUOZV2iwhA"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"time_tolerance","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"dgH9hr59us"}],"key":"rVlmOYjR3T"},{"type":"text","value":": The tolerance used to identify whether a dataset should still be included within a time period. Here, ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"wNTc2a2iiA"},{"type":"inlineCode","value":"30M","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"w9p5WmXRTN"},{"type":"text","value":" corresponds to 30 minutes, thus avoiding duplicate datasets.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"TgDUpUCDTm"}],"key":"jjS1Z3zxaq"}],"key":"x1K9yRat79"}],"key":"lFGcQOnLqe"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Note: the ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"UTF5lti0dp"},{"type":"inlineCode","value":"return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"pHgyU47kF3"},{"type":"text","value":" warning can be safely ignored.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Aa5AJUv60u"}],"key":"Iph7327iVV"}],"key":"DlRopwqIbG"}],"visibility":"show","key":"qYiB84V5j7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:28.399267Z","iopub.status.busy":"2023-10-24T07:57:28.398840Z","iopub.status.idle":"2023-10-24T07:57:28.403212Z","shell.execute_reply":"2023-10-24T07:57:28.402688Z"},"papermill":{"duration":0.048837,"end_time":"2023-10-24T07:57:28.404215","exception":false,"start_time":"2023-10-24T07:57:28.355378","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Setup xcube\ns2_cube_config = CubeConfig(dataset_name='S2L2A',\n                         band_names=['B02', 'B03', 'B04', 'B08', 'CLM'],\n                         bbox=smaller_box,\n                         spatial_res=0.000089,\n                         time_range=['2020-12-01', '2021-02-28'],\n                         time_tolerance='30M')","visibility":"show","key":"Rxa9eh8LFR"},{"type":"output","id":"k0khDo3jw3RTn8wlcyOsO","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/xcube_sh/config.py:248: FutureWarning: Units 'M', 'Y' and 'y' do not represent unambiguous timedelta values and will be removed in a future version.\n  time_tolerance = pd.to_timedelta(time_tolerance)\n"}],"visibility":"show","key":"JfEjsIC0i5"}],"visibility":"show","key":"cJw0DrHQRU"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.038275,"end_time":"2023-10-24T07:57:28.500045","exception":false,"start_time":"2023-10-24T07:57:28.461770","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open the xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L58niWHjCN"}],"key":"adAVxas08F"}],"key":"uNk89ucKoK"}],"key":"rCRhNUwqJk"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we open the cube and display its contents. The automatically generated credentials obtained earlier in this Jupyter Notebook are specified as a parameter when opening the cube. It’s important to note that at this stage, we’re not processing anything, just generating a cube on the fly with data ready to be called when needed for analysis.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"scNTcDOFIr"}],"key":"aHLttRgYep"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Once you open the cube, you can visualise the contents. You can view the number of timestamps and a list of them all too in the Coordinates tab. You can also visualise the seperate variables, with information on the size of the variables and their data type too.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"aNIhJowrxX"}],"key":"rM5bL8boYT"}],"visibility":"show","key":"UqCo9nnFs2"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:28.594535Z","iopub.status.busy":"2023-10-24T07:57:28.594114Z","iopub.status.idle":"2023-10-24T07:57:28.758785Z","shell.execute_reply":"2023-10-24T07:57:28.758336Z"},"papermill":{"duration":0.20717,"end_time":"2023-10-24T07:57:28.759976","exception":false,"start_time":"2023-10-24T07:57:28.552806","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Open cube (on the fly)\ns2_cube = open_cube(s2_cube_config, **sh_credentials)\n\n# Display contents\ns2_cube","visibility":"show","key":"ON8aKpecs3"},{"type":"output","id":"LbgH5PdZRnaaUbXepnosq","data":[{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"fd53da6516fcdff4870d4c43eb1a5173","path":"/notebooks_test/build/fd53da6516fcdff4870d4c43eb1a5173.html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:    (time: 34, lat: 674, lon: 1011, bnds: 2)\nCoordinates:\n  * lat        (lat) float64 52.05 52.05 52.05 52.05 ... 51.99 51.99 51.99 51.99\n  * lon        (lon) float64 -2.24 -2.24 -2.24 -2.24 ... -2.15 -2.15 -2.15 -2.15\n  * time       (time) datetime64[ns] 2020-12-02T11:16:51 ... 2021-02-25T11:16:50\n    time_bnds  (time, bnds) datetime64[ns] dask.array<chunksize=(34, 2), meta=np.ndarray>\nDimensions without coordinates: bnds\nData variables:\n    B02        (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\n    B03        (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\n    B04        (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\n    B08        (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\n    CLM        (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\nAttributes:\n    Conventions:             CF-1.7\n    title:                   S2L2A Data Cube Subset\n    history:                 [{'program': 'xcube_sh.chunkstore.SentinelHubChu...\n    date_created:            2023-10-24T07:57:28.694201\n    time_coverage_start:     2020-12-02T11:16:51+00:00\n    time_coverage_end:       2021-02-25T11:16:50+00:00\n    time_coverage_duration:  P84DT23H59M59S\n    geospatial_lon_min:      -2.24\n    geospatial_lat_min:      51.99\n    geospatial_lon_max:      -2.150021\n    geospatial_lat_max:      52.049986000000004\n    processing_level:        L2A","content_type":"text/plain"}}}],"visibility":"show","key":"wLbJo9vTc5"}],"visibility":"show","key":"SVQ5eGgluH"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.045236,"end_time":"2023-10-24T07:57:28.861186","exception":false,"start_time":"2023-10-24T07:57:28.815950","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"How to visualise your datacube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"djehVBas9K"}],"identifier":"how-to-visualise-your-datacube","label":"How to visualise your datacube","html_id":"how-to-visualise-your-datacube","implicit":true,"key":"EfCHZxTBVl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we have built our cube, let’s visualise the data! We are going to visualise a True Color image and an NDWI image in the same plot. In the below cell you can see we are selecting each band for 10:00:00 28th December 2020, and selecting the nearest acquisition to this date and time. We then stack the three bands and plot this using Matplotlib. We will call the three bands in the visible spectrum. In addition we will multiply the reflectance values by 3 to brighten the image due to the acquisition we’re visualising being acquired in the winter months.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pqXYTqsyuU"}],"key":"wMELw2RDHN"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Another way to visualise the extent of surface water is to use the Normalised Difference Water Index (NDWI). This is an index that can be used to extract surface water using multispectral imagery such as Sentinel-2. We can calculate the index with the Green and NIR bands as stated below, and add it into the data cube as a new variable.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uBQPpFtBAo"}],"key":"WeP1xuOSWI"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"NDWI = Green - NIR / Green + NIR","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"EthXkENGpe"}],"key":"FDcGNqcq6L"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"For this we are going to create a new variable in the next cell. To create the new variable we are using two existing variables defined as s2.cube.B03 and s2_cube.B08. We then insert these variables into an index formula to create NDWI. Once ndwi has been calculated it’s attributed a long_name and units before being defined as ndwi so that we can call it as a definition later in the notebook.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fYmghCbUdC"}],"key":"V4Fj2L5ENH"}],"visibility":"show","key":"cHO168N5uZ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:28.979828Z","iopub.status.busy":"2023-10-24T07:57:28.979473Z","iopub.status.idle":"2023-10-24T07:57:28.991763Z","shell.execute_reply":"2023-10-24T07:57:28.991379Z"},"papermill":{"duration":0.068123,"end_time":"2023-10-24T07:57:28.992822","exception":false,"start_time":"2023-10-24T07:57:28.924699","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define NDWI in visualisation\nndwi = ((s2_cube.B03-s2_cube.B08)/(s2_cube.B03+s2_cube.B08))\n\nndwi.attrs['long_name']='NDWI'\nndwi.attrs['units']='unitless'\n\ns2_cube['NDWI']= ndwi  ","visibility":"show","key":"jCJmzCCyST"},{"type":"output","id":"levXWK5xDd_Uxu5aj1yCI","data":[],"visibility":"show","key":"kOd8VhkRZw"}],"visibility":"show","key":"RH9TI4VUQk"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.045396,"end_time":"2023-10-24T07:57:29.097138","exception":false,"start_time":"2023-10-24T07:57:29.051742","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we want to plot both the True Color image and the NDWI in the same plot. We will use Matplotlib to achieve this.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"axze54M6lJ"}],"key":"GMIIqNk5HS"}],"visibility":"show","key":"saAqttZf01"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:29.212496Z","iopub.status.busy":"2023-10-24T07:57:29.212077Z","iopub.status.idle":"2023-10-24T07:57:35.652020Z","shell.execute_reply":"2023-10-24T07:57:35.651577Z"},"papermill":{"duration":6.49345,"end_time":"2023-10-24T07:57:35.654292","exception":false,"start_time":"2023-10-24T07:57:29.160842","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Select the bands and stack them.\nRed = s2_cube.B04.sel(time='2020-12-28 10:00:00', method='nearest')\nGreen = s2_cube.B03.sel(time='2020-12-28 10:00:00', method='nearest')\nBlue = s2_cube.B02.sel(time='2020-12-28 10:00:00', method='nearest')\n\nrgb = np.dstack((Red,Green,Blue)) #Stack the three arrays\n\nndwi = s2_cube.NDWI.sel(time='2020-12-28 10:00:00', method='nearest')\n\n# Plot \nf = plt.figure(figsize=[10, 15])\nf.add_subplot(1, 2, 1)\nplt.title(f\"True Color: {str(s2_cube.time.sel(time='2020-12-28 10:00:00', method='nearest').data).split('T')[0]}\")\nplt.imshow(5 * rgb)  # We multiply the rgb by 5 to make the image brighter\nf.add_subplot(1, 2, 2)\nplt.title(f\"NDWI: {str(s2_cube.time.sel(time='2020-12-28 10:00:00', method='nearest').data).split('T')[0]}\")\nplt.imshow(ndwi, vmin=-1, vmax=1, cmap='GnBu')\nplt.show()","visibility":"show","key":"RNqFsDc6kD"},{"type":"output","id":"fWyB-N6vvyO5fGFtTAQca","data":[{"name":"stderr","output_type":"stream","text":"Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"851575331294560376e857e0cdf1a251","path":"/notebooks_test/build/851575331294560376e857e0cdf1a251.png"},"text/plain":{"content":"<Figure size 1000x1500 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"FMRHomD5aw"}],"visibility":"show","key":"BH6yKiFfiS"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.062113,"end_time":"2023-10-24T07:57:35.785148","exception":false,"start_time":"2023-10-24T07:57:35.723035","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks good, and the extent of the flood waters is visualised really nicely here. The 10m resolution also enables us to see individual fields that are flooded with the linear boundaries of the fields highlighted nicely in the high resolution image provided by the 10m Sentinel 2 bands. This looks really useful so let’s try and visualise some more dates in the time period that we are examining;","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HLeLTuWgj9"}],"key":"dcUPrjumap"}],"visibility":"show","key":"xyeECkrMo9"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:35.915012Z","iopub.status.busy":"2023-10-24T07:57:35.914562Z","iopub.status.idle":"2023-10-24T07:57:48.700644Z","shell.execute_reply":"2023-10-24T07:57:48.700123Z"},"papermill":{"duration":12.85407,"end_time":"2023-10-24T07:57:48.709020","exception":false,"start_time":"2023-10-24T07:57:35.854950","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Select timestamps\nndwi1 = s2_cube.NDWI.sel(time='2020-12-05 10:00:00', method='nearest')\nndwi2 = s2_cube.NDWI.sel(time='2020-12-24 10:00:00', method='nearest')\nndwi3 = s2_cube.NDWI.sel(time='2020-12-31 10:00:00', method='nearest')\nndwi4 = s2_cube.NDWI.sel(time='2021-01-05 10:00:00', method='nearest')\nndwi5 = s2_cube.NDWI.sel(time='2021-01-24 10:00:00', method='nearest')\nndwi6 = s2_cube.NDWI.sel(time='2021-02-05 10:00:00', method='nearest')\n\n\n# Plot \nf = plt.figure(figsize=[15,11])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\nax4 = f.add_subplot(2,3, 4)\nax5 = f.add_subplot(2,3, 5)\nax6 = f.add_subplot(2,3, 6)\n\naxlist=[ax1,ax2,ax3,ax4,ax5,ax6]\n\nt = ndwi1.plot.imshow(ax=ax1, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi2.plot.imshow(ax=ax2, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi3.plot.imshow(ax=ax3, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi4.plot.imshow(ax=ax4, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi5.plot.imshow(ax=ax5, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\nndwi6.plot.imshow(ax=ax6, vmin=-1, vmax=1, cmap='GnBu', add_colorbar=False)\n\ncbar_ax = f.add_axes([1, 0.15, 0.05, 0.7])\nf.colorbar(t, cax=cbar_ax, label=\"NDWI\")\n\nplt.show()","visibility":"show","key":"wP5cyb2Pz7"},{"type":"output","id":"ywgt4fZ4higtpXhmrRIdh","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"441ee4dc08f986775c91c774a1d4db65","path":"/notebooks_test/build/441ee4dc08f986775c91c774a1d4db65.png"},"text/plain":{"content":"<Figure size 1500x1100 with 7 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"O5cWqFJ6vk"}],"visibility":"show","key":"UYuyyLs6AO"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.081567,"end_time":"2023-10-24T07:57:48.898526","exception":false,"start_time":"2023-10-24T07:57:48.816959","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is not so useful! Unsurprisingly, in a maritime climate most of the images are cloudy and of no use to flood monitoring. Of the six dates we have requested, only one is fully cloud free and four of the dates are unusable. From the limited data we have, we know the river was in its normal state on 5th December and in flood on 5th February but due to cloud cover we don’t know what is happening in between those dates. This problem is very common in the UK where cloud cover is extremely common during the winter months, meaning you are almost certain to have incomplete time series of data. Fortunately, there is a solution we can use, thanks to the Sentinel-1 platform.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"haE3QA0URR"}],"key":"UdJzlXIkgW"}],"visibility":"show","key":"HblWzJRAN1"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.082257,"end_time":"2023-10-24T07:57:49.077491","exception":false,"start_time":"2023-10-24T07:57:48.995234","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Sentinel-1 description","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GEmrZzzwx9"}],"identifier":"sentinel-1-description","label":"Sentinel-1 description","html_id":"sentinel-1-description","implicit":true,"key":"gSI9ybzyKT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Like Sentinel-2, Sentinel-1 is also part of the Copernicus programme and collects data globally with a revisit time of 5 days. In contrast to Sentinel-2, Sentinel-1 SAR is an active sensor using SAR signals recording the backscatter. Due to the wavelengths used, SAR is not hindered by clouds and can be operated day and night.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GxFZtDtCGm"}],"key":"rmDolFaaJq"}],"visibility":"show","key":"vZvPNLTfN6"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.078533,"end_time":"2023-10-24T07:57:49.264910","exception":false,"start_time":"2023-10-24T07:57:49.186377","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Check Sentinel-1 GRD available bands","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x3lDyVpUCo"}],"identifier":"check-sentinel-1-grd-available-bands","label":"Check Sentinel-1 GRD available bands","html_id":"check-sentinel-1-grd-available-bands","implicit":true,"key":"sHQUq9wBGY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Using EDC inbuilt functions that query Sentinel Hub services, we can easily list the available bands for a given dataset.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fMV72voXnA"}],"key":"HfbHEQyvP7"}],"visibility":"show","key":"uu4Slor798"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:49.441685Z","iopub.status.busy":"2023-10-24T07:57:49.441278Z","iopub.status.idle":"2023-10-24T07:57:49.455181Z","shell.execute_reply":"2023-10-24T07:57:49.454768Z"},"papermill":{"duration":0.093432,"end_time":"2023-10-24T07:57:49.456210","exception":false,"start_time":"2023-10-24T07:57:49.362778","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# List bands for S1-GRD\nSH.band_names('S1GRD')","visibility":"show","key":"AdEVW3WuUY"},{"type":"output","id":"dkrAE-EcR4TaAjppkH-Ju","data":[{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"['VV', 'HH', 'VH', 'localIncidenceAngle', 'scatteringArea', 'shadowMask', 'HV']","content_type":"text/plain"}}}],"visibility":"show","key":"dfyd319jEZ"}],"visibility":"show","key":"NViuvOSdsF"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.076546,"end_time":"2023-10-24T07:57:49.619864","exception":false,"start_time":"2023-10-24T07:57:49.543318","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build an xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vzY6X3PhiD"}],"identifier":"build-an-xcube","label":"Build an xcube","html_id":"build-an-xcube","implicit":true,"key":"iiaFDe5NR2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we will specify the input parameters needed to build an xcube array. The following parameters are specified:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BlCyHbV2Ft"}],"key":"LR0PUkq6Y6"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"dataset_name","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OdIwMNvMI6"}],"key":"P9AwhIULHM"},{"type":"text","value":": the Sentinel Hub identification of the dataset. Here we will call ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wHDwZCQgBt"},{"type":"inlineCode","value":"S1GRD","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hFZW5Gq3ys"},{"type":"text","value":" for Sentinel-1 GRD. All available datasets can be listed with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VWOvV84caB"},{"type":"inlineCode","value":"SH.dataset_names","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GoBoqDU0Zi"}],"key":"x9PHF60nIC"}],"key":"cYi9CY7cPw"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"band_names","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"q9R7e09WEq"}],"key":"NXkkxgHGXk"},{"type":"text","value":": the band names to be used in the xcube array (see previous code cell). Here, we will call just the VV polarisation band.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"mQmbIxN5im"}],"key":"x0lxjMY1tv"}],"key":"G3WLKX1UX3"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"bbox","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"jBsSCTJZ3m"}],"key":"ElXvfVCG96"},{"type":"text","value":": the bounding box that sets the extent of the AOI. Because we are using the default WGS84 coordinate system here, the CRS parameter doesn’t need to be set.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"YivveES6RP"}],"key":"ZPPNhMmHTz"}],"key":"I9zLQsI7Vd"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"spatial_res","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"t3wHb17WSc"}],"key":"eP3XfBaJyU"},{"type":"text","value":": the spatial resolution of the rasters contained in the xcube array. The spatial resolution is expressed in the units of the coordinate system used. Therefore, in this example, the spatial resolution is set in degrees. For an approximate pixel size of 10 meters, we set the resolution to 0.000089 degrees.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Tzn2Is6Ueu"}],"key":"M45HqQZnS4"}],"key":"CjQwABGL4B"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"time_range","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"EKMhWrNN54"}],"key":"mGykbG7EL1"},{"type":"text","value":": a list of two dates [start_date, end_date] forming a time period for which all acquisitions will be returned. Sentinel-1 GRD data is available from February 2015 onwards. In this example, we will fetch data for December 2020 - February 2021.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"nwLQvdFKZu"}],"key":"X5qFBOQxnX"}],"key":"bbcDkl2uTW"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"time_tolerance","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"RcOmvdaS4s"}],"key":"i2cIKsNmGp"},{"type":"text","value":": The tolerance used to identify whether a dataset should still be included within a time period. Here, ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Wc7aK2quIe"},{"type":"inlineCode","value":"30M","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"mlhaqPDv1R"},{"type":"text","value":" corresponds to 30 minutes, thus avoiding duplicate datasets.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tIbLD78Ahf"}],"key":"RHk5iFU9Nn"}],"key":"cgSMQvEO5r"}],"key":"sXpdAIV9zu"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Note: the ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"AoRTJpB6DK"},{"type":"inlineCode","value":"return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"QX1T2ZZrkh"},{"type":"text","value":" warning can be safely ignored.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"eg3x7uE8B1"}],"key":"K6IzUR5Hdt"}],"key":"doRUuhEShA"}],"visibility":"show","key":"qCLtmD0uFU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:49.809213Z","iopub.status.busy":"2023-10-24T07:57:49.808842Z","iopub.status.idle":"2023-10-24T07:57:49.812974Z","shell.execute_reply":"2023-10-24T07:57:49.812428Z"},"papermill":{"duration":0.085606,"end_time":"2023-10-24T07:57:49.814091","exception":false,"start_time":"2023-10-24T07:57:49.728485","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Setup xcube\ns1_cube_config = CubeConfig(dataset_name='S1GRD',\n                         band_names=['VV'],\n                         bbox=smaller_box,\n                         spatial_res=0.000089,\n                         time_range=['2020-12-01', '2021-02-28'],\n                         time_tolerance='30M')","visibility":"show","key":"uviCdhH5uo"},{"type":"output","id":"UJAbFxPsj8XaGVopQRuLH","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/xcube_sh/config.py:248: FutureWarning: Units 'M', 'Y' and 'y' do not represent unambiguous timedelta values and will be removed in a future version.\n  time_tolerance = pd.to_timedelta(time_tolerance)\n"}],"visibility":"show","key":"FZS25Y6HBn"}],"visibility":"show","key":"QGLYr5dmla"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.092268,"end_time":"2023-10-24T07:57:49.991165","exception":false,"start_time":"2023-10-24T07:57:49.898897","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open the xcube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vhtNpkc4je"}],"identifier":"open-the-xcube","label":"Open the xcube","html_id":"open-the-xcube","implicit":true,"key":"twSekmP8hc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cell we open the cube and display its contents. The automatically generated credentials obtained earlier in this Jupyter Notebook are specified as a parameter when opening the cube.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IDoRooEeNK"}],"key":"GMiaM8wP8R"}],"visibility":"show","key":"VLOZgKaR2K"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:50.177721Z","iopub.status.busy":"2023-10-24T07:57:50.177386Z","iopub.status.idle":"2023-10-24T07:57:50.342738Z","shell.execute_reply":"2023-10-24T07:57:50.342326Z"},"papermill":{"duration":0.243982,"end_time":"2023-10-24T07:57:50.343834","exception":false,"start_time":"2023-10-24T07:57:50.099852","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Open cube (on the fly)\ns1_cube = open_cube(s1_cube_config, **sh_credentials)\n\n# Display contents\ns1_cube","visibility":"show","key":"Y57CI4D1QH"},{"type":"output","id":"eysl0P9wtvSWzsdDlB4_u","data":[{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"fc4713abda4e9128c9f73670f881388b","path":"/notebooks_test/build/fc4713abda4e9128c9f73670f881388b.html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:    (time: 44, lat: 674, lon: 1011, bnds: 2)\nCoordinates:\n  * lat        (lat) float64 52.05 52.05 52.05 52.05 ... 51.99 51.99 51.99 51.99\n  * lon        (lon) float64 -2.24 -2.24 -2.24 -2.24 ... -2.15 -2.15 -2.15 -2.15\n  * time       (time) datetime64[ns] 2020-12-01T06:22:31 ... 2021-02-27T17:49:53\n    time_bnds  (time, bnds) datetime64[ns] dask.array<chunksize=(44, 2), meta=np.ndarray>\nDimensions without coordinates: bnds\nData variables:\n    VV         (time, lat, lon) float32 dask.array<chunksize=(1, 674, 1011), meta=np.ndarray>\nAttributes:\n    Conventions:             CF-1.7\n    title:                   S1GRD Data Cube Subset\n    history:                 [{'program': 'xcube_sh.chunkstore.SentinelHubChu...\n    date_created:            2023-10-24T07:57:50.324377\n    time_coverage_start:     2020-12-01T06:22:19+00:00\n    time_coverage_end:       2021-02-27T17:49:53+00:00\n    time_coverage_duration:  P88DT11H27M34S\n    geospatial_lon_min:      -2.24\n    geospatial_lat_min:      51.99\n    geospatial_lon_max:      -2.150021\n    geospatial_lat_max:      52.049986000000004\n    processing_level:        L1B","content_type":"text/plain"}}}],"visibility":"show","key":"i1lqiWnZdc"}],"visibility":"show","key":"rvWFfUW30n"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.082671,"end_time":"2023-10-24T07:57:50.521679","exception":false,"start_time":"2023-10-24T07:57:50.439008","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualising the flooded areas using SAR","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fnpj09v78c"}],"identifier":"visualising-the-flooded-areas-using-sar","label":"Visualising the flooded areas using SAR","html_id":"visualising-the-flooded-areas-using-sar","implicit":true,"key":"qDlSb3tWNc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We are going to use the VV band to visualise the flooding. From our earlier visualisation, we know that there was significant surface water flooding just after Christmas 2020 so will select the same date as last time, but as this is a different sensor we will expect an acquisition from a different date.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uv3QeK9fNE"}],"key":"gChYvuWV5F"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Firstly, we need to generate a new variable. In GRD data the VV polarisation is provided in Digital Number format and to perform some analysis we need to convert this to decibels. This is done by mutiplying the log10 of each DN pixel by 10. Secondly, as there will be pixels with a value of -inf after this operation, we need to account for this with the second function which will automatically assign 0 to these pixels.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BgIglyvlxM"}],"key":"Vw9OVFFkWk"}],"visibility":"show","key":"GzPU6EuKms"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:50.732530Z","iopub.status.busy":"2023-10-24T07:57:50.732077Z","iopub.status.idle":"2023-10-24T07:57:50.739445Z","shell.execute_reply":"2023-10-24T07:57:50.739047Z"},"papermill":{"duration":0.095111,"end_time":"2023-10-24T07:57:50.740391","exception":false,"start_time":"2023-10-24T07:57:50.645280","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert VV Digital numbers to Decibels\nvv_dn = s1_cube.VV\nvv_db = 10 * (np.log10(vv_dn))\n\nvv_db = vv_db.where(np.isfinite(vv_db), 0)\n\nvv_db.attrs['long_name']='VV_dB'\nvv_db.attrs['units']='decibels'\n\ns1_cube['VV_dB']= vv_db","visibility":"show","key":"QCMPOSJZB4"},{"type":"output","id":"AaMXreJ34tgL3rhIu6cdq","data":[],"visibility":"show","key":"qyAooZ8cfL"}],"visibility":"show","key":"JQ0mj09N4P"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.077657,"end_time":"2023-10-24T07:57:50.910299","exception":false,"start_time":"2023-10-24T07:57:50.832642","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Like previously, we are going to visualise the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vXxOTKxfkW"},{"type":"inlineCode","value":"VV_dB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iNvRoxOlwo"},{"type":"text","value":" variable we have just generated for our AOI.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a8OpZwfmOa"}],"key":"IMGr4d2QVh"}],"visibility":"show","key":"NeyDLfoRZC"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:51.077024Z","iopub.status.busy":"2023-10-24T07:57:51.076578Z","iopub.status.idle":"2023-10-24T07:57:53.208106Z","shell.execute_reply":"2023-10-24T07:57:53.207439Z"},"papermill":{"duration":2.213207,"end_time":"2023-10-24T07:57:53.211057","exception":false,"start_time":"2023-10-24T07:57:50.997850","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# select and define the timestamp you want to visualise \nVV_dB_timestamp = s1_cube.VV_dB.sel(time='2020-12-28 10:00:00', method='nearest')\n\n# plot the timestamp\nVV_dB_timestamp.plot.imshow(vmin=-40, vmax=0, cmap='winter', figsize=(10, 10))\n\n# save and display the plot\nplt.show()","visibility":"show","key":"GRaQCb3lo5"},{"type":"output","id":"drXCUQswKMTZ8mX9Z9mMc","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ede5f2b9f4b3854e319ee41c2b7c26b3","path":"/notebooks_test/build/ede5f2b9f4b3854e319ee41c2b7c26b3.png"},"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"JqZju8Oilr"}],"visibility":"show","key":"pkFURB8foD"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.103525,"end_time":"2023-10-24T07:57:53.424218","exception":false,"start_time":"2023-10-24T07:57:53.320693","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks very similar to the NDWI we derived earlier showing the flood extent fairly clearly (the blue areas). It looks fairly well defined so let’s visualise the same but over several timestamps to confirm that this is a good variable to use to generate a flood mask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rMwG2tY2Sg"}],"key":"LQe77ZY1Ez"}],"visibility":"show","key":"IAk7P5wuX4"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:57:53.646828Z","iopub.status.busy":"2023-10-24T07:57:53.646470Z","iopub.status.idle":"2023-10-24T07:58:02.068474Z","shell.execute_reply":"2023-10-24T07:58:02.067976Z"},"papermill":{"duration":8.532994,"end_time":"2023-10-24T07:58:02.074672","exception":false,"start_time":"2023-10-24T07:57:53.541678","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"#### Timestamp selection\nvv1 = s1_cube.VV_dB.sel(time='2020-12-05 10:00:00', method='nearest')\nvv2 = s1_cube.VV_dB.sel(time='2020-12-24 10:00:00', method='nearest')\nvv3 = s1_cube.VV_dB.sel(time='2020-12-31 10:00:00', method='nearest')\nvv4 = s1_cube.VV_dB.sel(time='2021-01-05 10:00:00', method='nearest')\nvv5 = s1_cube.VV_dB.sel(time='2021-01-24 10:00:00', method='nearest')\nvv6 = s1_cube.VV_dB.sel(time='2021-02-05 10:00:00', method='nearest')\n\n# Plot \nf = plt.figure(figsize=[16,11])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\nax4 = f.add_subplot(2,3, 4)\nax5 = f.add_subplot(2,3, 5)\nax6 = f.add_subplot(2,3, 6)\n\naxlist=[ax1,ax2,ax3,ax4,ax5,ax6]\n\nt = vv1.plot.imshow(ax=ax1, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv2.plot.imshow(ax=ax2, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv3.plot.imshow(ax=ax3, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv4.plot.imshow(ax=ax4, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv5.plot.imshow(ax=ax5, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\nvv6.plot.imshow(ax=ax6, vmin=-40, vmax=0, cmap='winter', add_colorbar=False)\n\ncbar_ax = f.add_axes([1, 0.15, 0.05, 0.7])\nf.colorbar(t, cax=cbar_ax, label=\"VV dB\")\n\nplt.show()","visibility":"show","key":"aFWldVBUAW"},{"type":"output","id":"kwfAyBuB5USUt2u8NCGq6","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c0fe8472fd6df9d9ba8a9003c9afb9a1","path":"/notebooks_test/build/c0fe8472fd6df9d9ba8a9003c9afb9a1.png"},"text/plain":{"content":"<Figure size 1600x1100 with 7 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"jfYygA3cZL"}],"visibility":"show","key":"m1O0fQZFtC"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.114554,"end_time":"2023-10-24T07:58:02.346576","exception":false,"start_time":"2023-10-24T07:58:02.232022","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This gives a much clearer picture of flooding during the time period than using NDWI, and we now know much more about the spatial and temporal extent of the flooding in the AOI in the winter of 2020/2021. Next we want to generate a flood mask using a threshold. Generally, as a good rule of thumb; in the VV band, values below -20 dB are usually surface water. We will try this value first, but we will also look to visualise how the flood mask changes if we adjust the threshold value. First, let’s generate the new variable using the .where function in xarray.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"skTkGMwlXF"}],"key":"QbJsJmdqLN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"At first glance, the below cell may not make much sense. It may read that the step 1 function as assigning a value of 1 to pixels in VV_dB that are equal or more than -20. However, what is actually happening is that the .where function preserves all the pixel values in the variable that are below -20 and assigns everything else a value of 1. More can be found in the xarray documentation ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fj3N7B3wbd"},{"type":"link","url":"http://xarray.pydata.org/en/stable/generated/xarray.DataArray.where.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"http://​xarray​.pydata​.org​/en​/stable​/generated​/xarray​.DataArray​.where​.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Y6TfuZrhyK"}],"urlSource":"http://xarray.pydata.org/en/stable/generated/xarray.DataArray.where.html","key":"i3FRpiJBZZ"}],"key":"xpfYv1aMqJ"}],"visibility":"show","key":"IKmoSK2vBk"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:58:02.591825Z","iopub.status.busy":"2023-10-24T07:58:02.591303Z","iopub.status.idle":"2023-10-24T07:58:02.600533Z","shell.execute_reply":"2023-10-24T07:58:02.600042Z"},"papermill":{"duration":0.128366,"end_time":"2023-10-24T07:58:02.601824","exception":false,"start_time":"2023-10-24T07:58:02.473458","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Assign all pixels equal or smaller than -20 a value of 1 and preserve the values of pixels \nstep1 = s1_cube.VV_dB.where(s1_cube.VV_dB >= -20, 1)\n\n# Assign all other pixels a value of 0. \nflooded = step1.where(step1 == 1, 0)\n\nflooded.attrs['long_name'] ='flooded'\nflooded.attrs['units'] ='nounits'\n\ns1_cube['flooded'] = flooded","visibility":"show","key":"Ir6uJ0pL9j"},{"type":"output","id":"LqqJBIqtXiGN5tDXvcXul","data":[],"visibility":"show","key":"htKjmF7P9i"}],"visibility":"show","key":"mXZtxeUAKT"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.117647,"end_time":"2023-10-24T07:58:02.853152","exception":false,"start_time":"2023-10-24T07:58:02.735505","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next let’s see what happens the the flood mask extent, if we change the threshold to -15 dB and -25dB:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vKUiWwtlSW"}],"key":"noMkEfG0sw"}],"visibility":"show","key":"te7ITmYvso"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:58:03.092875Z","iopub.status.busy":"2023-10-24T07:58:03.092467Z","iopub.status.idle":"2023-10-24T07:58:03.109786Z","shell.execute_reply":"2023-10-24T07:58:03.109308Z"},"papermill":{"duration":0.130971,"end_time":"2023-10-24T07:58:03.110843","exception":false,"start_time":"2023-10-24T07:58:02.979872","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"flood_threshold1_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB >= -15, 1)\nflood_threshold2_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB >= -20, 1)\nflood_threshold3_step1 = s1_cube.VV_dB.where(s1_cube.VV_dB >= -25, 1)\n\nflood_threshold1_step2 = flood_threshold1_step1.where(flood_threshold1_step1 == 1, 0)\nflood_threshold2_step2 = flood_threshold2_step1.where(flood_threshold2_step1 == 1, 0)\nflood_threshold3_step2 = flood_threshold3_step1.where(flood_threshold3_step1 == 1, 0)\n\nflood_threshold1 = flood_threshold1_step2.sel(time='2020-12-28 10:00:00', method='nearest')\nflood_threshold2 = flood_threshold2_step2.sel(time='2020-12-28 10:00:00', method='nearest')\nflood_threshold3 = flood_threshold3_step2.sel(time='2020-12-28 10:00:00', method='nearest')","visibility":"show","key":"TRCvRi3z0u"},{"type":"output","id":"FKW3jW-Fa-UnUt46fzSkd","data":[],"visibility":"show","key":"phwVnplUmq"}],"visibility":"show","key":"QGyvvzpQA6"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.111546,"end_time":"2023-10-24T07:58:03.347729","exception":false,"start_time":"2023-10-24T07:58:03.236183","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we will plot the new thresholds we want to test:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"whFlDNo8NM"}],"key":"btwtRWONPx"}],"visibility":"show","key":"N5EJQ2doEx"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:58:03.593860Z","iopub.status.busy":"2023-10-24T07:58:03.593499Z","iopub.status.idle":"2023-10-24T07:58:04.043936Z","shell.execute_reply":"2023-10-24T07:58:04.043492Z"},"papermill":{"duration":0.559783,"end_time":"2023-10-24T07:58:04.045108","exception":false,"start_time":"2023-10-24T07:58:03.485325","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot \nf = plt.figure(figsize=[20,12])\nax1 = f.add_subplot(2,3, 1)\nax2 = f.add_subplot(2,3, 2)\nax3 = f.add_subplot(2,3, 3)\n\nflood_threshold1.plot.imshow(ax=ax1, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nflood_threshold2.plot.imshow(ax=ax2, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\nflood_threshold3.plot.imshow(ax=ax3, vmin=0, vmax=1, cmap='Blues', add_colorbar=False)\n\nplt.show()","visibility":"show","key":"g6Q1wWRMAM"},{"type":"output","id":"Bc7PA0M2rpUBKXsgu0KvC","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"f3a4939a66398508a85deb5735f6868e","path":"/notebooks_test/build/f3a4939a66398508a85deb5735f6868e.png"},"text/plain":{"content":"<Figure size 2000x1200 with 3 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"polHlsjUWb"}],"visibility":"show","key":"rVSMzktOom"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.128428,"end_time":"2023-10-24T07:58:04.318849","exception":false,"start_time":"2023-10-24T07:58:04.190421","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Changing the threshold by only 5 dB makes a large difference. If we set it as a higher number we pick up a lot more false positives and with a lower threshold we start to create more false negatives and a more fragmented flood extent. For now, let’s use -20 dB as the threshold. Let’s extrapolate our threshold out to a few more dates and see how this looks:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zkqRu3ltts"}],"key":"E74ZXXi3cU"}],"visibility":"show","key":"j3MmOsnbpD"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.11477,"end_time":"2023-10-24T07:58:04.567825","exception":false,"start_time":"2023-10-24T07:58:04.453055","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Excellent, this looks like a good threshold across time and space. Let’s move on to visualising the data from the temporal point of view.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tEnl1xNWp9"}],"key":"KNJ1H2VbzB"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Plotting Time Series","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qo8UBkLpGP"}],"identifier":"plotting-time-series","label":"Plotting Time Series","html_id":"plotting-time-series","implicit":true,"key":"R2arC3fxZJ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"How to generate a time series plot for a point","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Vmc5qGZYqI"}],"key":"cBGV0XRMGl"}],"key":"xqqTh0CZJl"}],"key":"zH9u2qqPAQ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Excellent, we are getting a really good picture of how the flooding evolved over space and time. Now let’s generate a time series for a Longitude and Latitude within the AOI and observe how NDWI and then VV_dB variables in the cubes compare over time. Firstly, we define the point_lat and point_lon and then using these as inputs we select the variable accross all the timesteps and to recieve the timeseries use the .to_series() function. It’s at this point too that we use the CLM variable to mask out cloudy areas from the Sentinel 2 acquisitions in the time steps.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rJENoGmqKu"}],"key":"lI6biUkHBu"}],"visibility":"show","key":"PM69JlbUpQ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T07:58:04.809870Z","iopub.status.busy":"2023-10-24T07:58:04.809369Z","iopub.status.idle":"2023-10-24T08:00:04.365273Z","shell.execute_reply":"2023-10-24T08:00:04.364817Z"},"papermill":{"duration":119.669559,"end_time":"2023-10-24T08:00:04.366623","exception":false,"start_time":"2023-10-24T07:58:04.697064","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Set latitude and longitude of point to query\npoint_lat = 52.000089\npoint_lon = -2.167874\n\n# Get timeseries\nmasked = s2_cube.NDWI.where(s2_cube.CLM == 0)\ntimeseriesNDWI_masked = masked.sel(lat=point_lat, lon=point_lon, method='nearest').to_series()\ntimeseriesNDWI_masked = timeseriesNDWI_masked.where(timeseriesNDWI_masked !=0).dropna()\n\ntimeseriesNDWI = s2_cube.NDWI.sel(lat=point_lat, lon=point_lon, method='nearest').to_series()\ntimeseriesNDWI = timeseriesNDWI.where(timeseriesNDWI !=0).dropna()\n\ntimeseriesVV_dB = s1_cube.VV_dB.sel(lat=point_lat, lon=point_lon, method='nearest').to_series()\ntimeseriesVV_dB = timeseriesVV_dB.where(timeseriesVV_dB !=0).dropna()","visibility":"show","key":"wQ182Lusnh"},{"type":"output","id":"S0obp565up_i6kGEjSsBw","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"}],"visibility":"show","key":"rVmkqzqvVK"}],"visibility":"show","key":"Ajjfdcv6yR"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.129125,"end_time":"2023-10-24T08:00:04.652276","exception":false,"start_time":"2023-10-24T08:00:04.523151","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Using matplotlib we can now visualise how NDWI changes over time. In the plot we will plot 2 series, a cloud-masked series in blue, and an unmasked series in grey.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rli9eEGPzB"}],"key":"H0CM9VPUgP"}],"visibility":"show","key":"eu6E0jlToB"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:04.931150Z","iopub.status.busy":"2023-10-24T08:00:04.930902Z","iopub.status.idle":"2023-10-24T08:00:05.135885Z","shell.execute_reply":"2023-10-24T08:00:05.135383Z"},"papermill":{"duration":0.340253,"end_time":"2023-10-24T08:00:05.137031","exception":false,"start_time":"2023-10-24T08:00:04.796778","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot NDWI timeseries\n_, ax = plt.subplots(1, figsize=(15, 6))\nax.plot(timeseriesNDWI, color=\"Grey\", marker=\"o\", linewidth=0.5, alpha=0.4)\nax.plot(timeseriesNDWI_masked, color=\"blue\", linestyle=\"none\", marker=\"o\", linewidth=0.5)\nax.set_title(f\"NDWI timeseries. Latitude: {point_lat}, Longitude: {point_lon}.\")\nplt.show()","visibility":"show","key":"pgMqPV5Xbr"},{"type":"output","id":"8KmWD8zuV26m56F4Gb2CV","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4419b31400fa879445c92573e66c0d62","path":"/notebooks_test/build/4419b31400fa879445c92573e66c0d62.png"},"text/plain":{"content":"<Figure size 1500x600 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"kS8WKn0uX7"}],"visibility":"show","key":"d22oPeJMEj"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.148337,"end_time":"2023-10-24T08:00:05.431501","exception":false,"start_time":"2023-10-24T08:00:05.283164","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The NDWI time series for Sentinel-2 doesn’t really show us anything significant. There is no farily consistent NDWI value to go from which makes it difficult to establish a point of reference. There are peaks in NDWI at the end of December and the start of February but as was demonstrated earlier cloud cover is a big issue. There are big gaps between non-cloudy acquisitions of over a month in some cases. Let’s plot the same but for the VV polarisation from Sentinel-1.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wYjblkUs2q"}],"key":"iwRozxxP5N"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Plot VV dB timeseries for a given location","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JPmPJfWaZI"}],"key":"dm4gVWRg4c"}],"key":"g23v9Y7TJk"}],"key":"EhX4Yra3IA"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We can now visualise how VV dB changes over time.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VCe0jsV0Mh"}],"key":"LyvRYhkI5g"}],"visibility":"show","key":"m2xb7SrJdF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:05.709269Z","iopub.status.busy":"2023-10-24T08:00:05.708889Z","iopub.status.idle":"2023-10-24T08:00:05.931895Z","shell.execute_reply":"2023-10-24T08:00:05.931387Z"},"papermill":{"duration":0.34905,"end_time":"2023-10-24T08:00:05.933077","exception":false,"start_time":"2023-10-24T08:00:05.584027","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot VV_dB timeseries\nfig, ax = plt.subplots(1, figsize=(12, 6))\nax.plot(timeseriesVV_dB, color=\"blue\", marker=\"o\", linewidth=0.5)\nax.set_title(f\"VV dB timeseries. Latitude: {point_lat}, Longitude: {point_lon}.\")\nplt.show()","visibility":"show","key":"EpI2X1165m"},{"type":"output","id":"6tzWbmZ50wGWXa1U_Rqqs","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"49e8fa2684223ed17e67ca0df2bddfea","path":"/notebooks_test/build/49e8fa2684223ed17e67ca0df2bddfea.png"},"text/plain":{"content":"<Figure size 1200x600 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"rXiN7hpipj"}],"visibility":"show","key":"b1trtJryZh"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.147222,"end_time":"2023-10-24T08:00:06.224279","exception":false,"start_time":"2023-10-24T08:00:06.077057","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is much clearer than the Sentinel 2 time series as we have more observations due to no interference from cloud cover. We have a clear point of reference for what the VV polarisation response is during flood and non flooded time periods with a VV response of -8 to 0 dB when dry and < -20 dB when flooded. The time series really clearly shows the two flood events at the end of December / start of January and the end of January / start of February.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZjkrSKKzh8"}],"key":"XZSv2g8ord"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Plot VV dB timeseries for a given field or AOI","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cJxvP9uKhN"}],"key":"SUf8lzK9K0"}],"key":"LMmvFVccng"}],"key":"HzxmQhh7hn"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Let’s take this another step further, and generate the time series using a polygon instead of a point. First we have already generated a GeoJSON of a field on the banks of the River Severn near Tewkesbury. This field is part of the floodplain so we should see the flood peak again from the data. First let’s import the GeoJSON and visualise it:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MKlo7dcfop"}],"key":"Bk4M5aeDSW"}],"visibility":"show","key":"bdwHmLJN6U"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:06.488346Z","iopub.status.busy":"2023-10-24T08:00:06.487910Z","iopub.status.idle":"2023-10-24T08:00:06.493261Z","shell.execute_reply":"2023-10-24T08:00:06.492791Z"},"papermill":{"duration":0.129659,"end_time":"2023-10-24T08:00:06.494356","exception":false,"start_time":"2023-10-24T08:00:06.364697","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the bounding box on a map\n\nfield = {\n    \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -2.164928913116455,\n              52.00127710606571\n            ],\n            [\n              -2.1648645401000977,\n              52.00164699252238\n            ],\n            [\n              -2.166323661804199,\n              52.00146204967612\n            ],\n            [\n              -2.1764731407165527,\n              52.00024669196227\n            ],\n            [\n              -2.175872325897217,\n              51.9993087302974\n            ],\n            [\n              -2.175271511077881,\n              51.9974195365859\n            ],\n            [\n              -2.1735334396362305,\n              51.99625691621346\n            ],\n            [\n              -2.170572280883789,\n              51.995556687103125\n            ],\n            [\n              -2.166731357574463,\n              51.996336186743406\n            ],\n            [\n              -2.165207862854004,\n              51.998027257946404\n            ],\n            [\n              -2.164928913116455,\n              52.00127710606571\n            ]\n          ]\n        ]}\n\nIPython.display.GeoJSON(field)","visibility":"show","key":"u6oLWi3Dy3"},{"type":"output","id":"aEY_9ZFY62PE5f4bY4YkK","data":[{"output_type":"display_data","metadata":{"application/geo+json":{"expanded":false,"root":"root"}},"data":{"application/geo+json":{"content":"{\"coordinates\":[[[-2.164928913116455,52.00127710606571],[-2.1648645401000977,52.00164699252238],[-2.166323661804199,52.00146204967612],[-2.1764731407165527,52.00024669196227],[-2.175872325897217,51.9993087302974],[-2.175271511077881,51.9974195365859],[-2.1735334396362305,51.99625691621346],[-2.170572280883789,51.995556687103125],[-2.166731357574463,51.996336186743406],[-2.165207862854004,51.998027257946404],[-2.164928913116455,52.00127710606571]]],\"type\":\"Polygon\"}","content_type":"application/geo+json"},"text/plain":{"content":"<IPython.display.GeoJSON object>","content_type":"text/plain"}}}],"visibility":"show","key":"KVwaUG62S5"}],"visibility":"show","key":"NrQKJXIqQJ"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.181006,"end_time":"2023-10-24T08:00:06.820293","exception":false,"start_time":"2023-10-24T08:00:06.639287","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next, let’s mask our dataset by the field we have just defined and visualise our ‘masked’ datacube. You can see that the variables we calculated have been generated and carried across into the new datacube.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZCXT8lT35o"}],"key":"wyyWA0iVb5"}],"visibility":"show","key":"dDynAAom9S"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:07.088419Z","iopub.status.busy":"2023-10-24T08:00:07.088003Z","iopub.status.idle":"2023-10-24T08:00:07.108148Z","shell.execute_reply":"2023-10-24T08:00:07.107652Z"},"papermill":{"duration":0.15166,"end_time":"2023-10-24T08:00:07.109299","exception":false,"start_time":"2023-10-24T08:00:06.957639","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"water_meadow = mask_dataset_by_geometry(s1_cube, geometry=field)","visibility":"show","key":"fI7xGR9BEE"},{"type":"output","id":"XxhXPQbuzbKeNL5Hfdpvb","data":[],"visibility":"show","key":"GiqxAEjtAy"}],"visibility":"show","key":"geXm1f8dkT"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.137958,"end_time":"2023-10-24T08:00:07.397929","exception":false,"start_time":"2023-10-24T08:00:07.259971","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s visualise our masked data cube using the first timestep and the VV_dB variable:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ipxdRhhHtF"}],"key":"oy41JVnrBK"}],"visibility":"show","key":"BCcd0C2t9h"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:07.673662Z","iopub.status.busy":"2023-10-24T08:00:07.673316Z","iopub.status.idle":"2023-10-24T08:00:08.100773Z","shell.execute_reply":"2023-10-24T08:00:08.100303Z"},"papermill":{"duration":0.554371,"end_time":"2023-10-24T08:00:08.102201","exception":false,"start_time":"2023-10-24T08:00:07.547830","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"water_meadow.VV_dB.isel(time=0).plot.imshow(cmap='Greys', vmin=-20, vmax=0, figsize=(10, 10))\nplt.show()","visibility":"show","key":"TUifGjC22F"},{"type":"output","id":"Hfa-X8KmUpmw-SxAz6mUd","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c54372273da567b7f39256d6714b7aae","path":"/notebooks_test/build/c54372273da567b7f39256d6714b7aae.png"},"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"amf5kShrOk"}],"visibility":"show","key":"T3MPefZouK"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.128768,"end_time":"2023-10-24T08:00:08.447653","exception":false,"start_time":"2023-10-24T08:00:08.318885","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"OK, this looks good, now we are now going to calculate the mean VV dB polarisation across the field for each time step. Firstly, we want to calculate the mean VV_dB on axis 1 (lat) and 2 (lon). The second function removes any observations with values of 0 (observations that don’t cover our field of interest). Visualising this array we have 59 timesteps each assigned the mean value of the field.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AjXeMbenUp"}],"key":"wV9AVH4nnW"}],"visibility":"show","key":"oFjaMRChz9"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:08.710176Z","iopub.status.busy":"2023-10-24T08:00:08.709751Z","iopub.status.idle":"2023-10-24T08:00:09.437890Z","shell.execute_reply":"2023-10-24T08:00:09.437455Z"},"papermill":{"duration":0.851172,"end_time":"2023-10-24T08:00:09.439289","exception":false,"start_time":"2023-10-24T08:00:08.588117","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# calculate the mean VV dB for each time step\ntimeseriesVV_dB = water_meadow.VV_dB.mean(axis=(1,2), skipna=True)\n\n# remove any observations with no data\ntimeseriesVV_dB = timeseriesVV_dB.where(timeseriesVV_dB !=0).dropna(\"time\")\n\n# return the new data cube chunk\ntimeseriesVV_dB","visibility":"show","key":"DOXnkHeEOz"},{"type":"output","id":"ge7q93rs14qEqhkVC088q","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/html":{"content":"<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n<defs>\n<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n</symbol>\n<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n</symbol>\n</defs>\n</svg>\n<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\nhtml[theme=dark],\nbody[data-theme=dark],\nbody.vscode-dark {\n  --xr-font-color0: rgba(255, 255, 255, 1);\n  --xr-font-color2: rgba(255, 255, 255, 0.54);\n  --xr-font-color3: rgba(255, 255, 255, 0.38);\n  --xr-border-color: #1F1F1F;\n  --xr-disabled-color: #515151;\n  --xr-background-color: #111111;\n  --xr-background-color-row-even: #111111;\n  --xr-background-color-row-odd: #313131;\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '►';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '▼';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-index-preview {\n  grid-column: 2 / 5;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data,\n.xr-index-data-in:checked ~ .xr-index-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-index-name div,\n.xr-index-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt,\n.xr-attrs dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2,\n.xr-no-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;VV_dB&#x27; (time: 44)&gt;\ndask.array&lt;where, shape=(44,), dtype=float32, chunksize=(1,), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * time     (time) datetime64[ns] 2020-12-01T06:22:31 ... 2021-02-27T17:49:53</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'VV_dB'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 44</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-cd68a3fc-8cb5-440f-922b-a3e3c5190d12' class='xr-array-in' type='checkbox' checked><label for='section-cd68a3fc-8cb5-440f-922b-a3e3c5190d12' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>dask.array&lt;chunksize=(1,), meta=np.ndarray&gt;</span></div><div class='xr-array-data'><table>\n    <tr>\n        <td>\n            <table style=\"border-collapse: collapse;\">\n                <thead>\n                    <tr>\n                        <td> </td>\n                        <th> Array </th>\n                        <th> Chunk </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    \n                    <tr>\n                        <th> Bytes </th>\n                        <td> 176 B </td>\n                        <td> 4 B </td>\n                    </tr>\n                    \n                    <tr>\n                        <th> Shape </th>\n                        <td> (44,) </td>\n                        <td> (1,) </td>\n                    </tr>\n                    <tr>\n                        <th> Dask graph </th>\n                        <td colspan=\"2\"> 44 chunks in 14 graph layers </td>\n                    </tr>\n                    <tr>\n                        <th> Data type </th>\n                        <td colspan=\"2\"> float32 numpy.ndarray </td>\n                    </tr>\n                </tbody>\n            </table>\n        </td>\n        <td>\n        <svg width=\"170\" height=\"79\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n\n  <!-- Horizontal lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n  <line x1=\"0\" y1=\"29\" x2=\"120\" y2=\"29\" style=\"stroke-width:2\" />\n\n  <!-- Vertical lines -->\n  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"29\" style=\"stroke-width:2\" />\n  <line x1=\"5\" y1=\"0\" x2=\"5\" y2=\"29\" />\n  <line x1=\"10\" y1=\"0\" x2=\"10\" y2=\"29\" />\n  <line x1=\"16\" y1=\"0\" x2=\"16\" y2=\"29\" />\n  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"29\" />\n  <line x1=\"30\" y1=\"0\" x2=\"30\" y2=\"29\" />\n  <line x1=\"35\" y1=\"0\" x2=\"35\" y2=\"29\" />\n  <line x1=\"43\" y1=\"0\" x2=\"43\" y2=\"29\" />\n  <line x1=\"49\" y1=\"0\" x2=\"49\" y2=\"29\" />\n  <line x1=\"54\" y1=\"0\" x2=\"54\" y2=\"29\" />\n  <line x1=\"62\" y1=\"0\" x2=\"62\" y2=\"29\" />\n  <line x1=\"68\" y1=\"0\" x2=\"68\" y2=\"29\" />\n  <line x1=\"73\" y1=\"0\" x2=\"73\" y2=\"29\" />\n  <line x1=\"81\" y1=\"0\" x2=\"81\" y2=\"29\" />\n  <line x1=\"87\" y1=\"0\" x2=\"87\" y2=\"29\" />\n  <line x1=\"92\" y1=\"0\" x2=\"92\" y2=\"29\" />\n  <line x1=\"100\" y1=\"0\" x2=\"100\" y2=\"29\" />\n  <line x1=\"106\" y1=\"0\" x2=\"106\" y2=\"29\" />\n  <line x1=\"111\" y1=\"0\" x2=\"111\" y2=\"29\" />\n  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"29\" style=\"stroke-width:2\" />\n\n  <!-- Colored Rectangle -->\n  <polygon points=\"0.0,0.0 120.0,0.0 120.0,29.758442106602057 0.0,29.758442106602057\" style=\"fill:#8B4903A0;stroke-width:0\"/>\n\n  <!-- Text -->\n  <text x=\"60.000000\" y=\"49.758442\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >44</text>\n  <text x=\"140.000000\" y=\"14.879221\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,14.879221)\">1</text>\n</svg>\n        </td>\n    </tr>\n</table></div></div></li><li class='xr-section-item'><input id='section-70dd3d56-d6cf-4f22-8c9a-a3ef1600c27f' class='xr-section-summary-in' type='checkbox'  checked><label for='section-70dd3d56-d6cf-4f22-8c9a-a3ef1600c27f' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2020-12-01T06:22:31 ... 2021-02-...</div><input id='attrs-507bf392-689d-446e-b43b-eb187f493bad' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-507bf392-689d-446e-b43b-eb187f493bad' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b39b462d-9e7c-4156-ad29-1e5f627ef17f' class='xr-var-data-in' type='checkbox'><label for='data-b39b462d-9e7c-4156-ad29-1e5f627ef17f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>standard_name :</span></dt><dd>time</dd><dt><span>bounds :</span></dt><dd>time_bnds</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;2020-12-01T06:22:31.000000000&#x27;, &#x27;2020-12-04T17:57:14.000000000&#x27;,\n       &#x27;2020-12-07T06:23:08.000000000&#x27;, &#x27;2020-12-10T17:58:07.000000000&#x27;,\n       &#x27;2020-12-11T17:49:06.000000000&#x27;, &#x27;2020-12-13T06:22:30.000000000&#x27;,\n       &#x27;2020-12-16T17:57:13.000000000&#x27;, &#x27;2020-12-17T17:49:56.000000000&#x27;,\n       &#x27;2020-12-19T06:23:07.000000000&#x27;, &#x27;2020-12-22T17:58:06.000000000&#x27;,\n       &#x27;2020-12-23T17:49:06.000000000&#x27;, &#x27;2020-12-25T06:22:30.000000000&#x27;,\n       &#x27;2020-12-28T17:57:13.000000000&#x27;, &#x27;2020-12-29T17:49:55.000000000&#x27;,\n       &#x27;2020-12-31T06:23:07.000000000&#x27;, &#x27;2021-01-03T17:58:05.000000000&#x27;,\n       &#x27;2021-01-04T17:49:05.000000000&#x27;, &#x27;2021-01-06T06:22:29.000000000&#x27;,\n       &#x27;2021-01-09T17:57:12.000000000&#x27;, &#x27;2021-01-10T17:49:55.000000000&#x27;,\n       &#x27;2021-01-12T06:23:11.000000000&#x27;, &#x27;2021-01-15T17:58:05.000000000&#x27;,\n       &#x27;2021-01-16T17:49:05.000000000&#x27;, &#x27;2021-01-18T06:22:29.000000000&#x27;,\n       &#x27;2021-01-21T17:57:12.000000000&#x27;, &#x27;2021-01-22T17:49:54.000000000&#x27;,\n       &#x27;2021-01-24T06:23:10.000000000&#x27;, &#x27;2021-01-27T17:58:05.000000000&#x27;,\n       &#x27;2021-01-28T17:49:04.000000000&#x27;, &#x27;2021-01-30T06:22:28.000000000&#x27;,\n       &#x27;2021-02-02T17:57:11.000000000&#x27;, &#x27;2021-02-03T17:49:54.000000000&#x27;,\n       &#x27;2021-02-05T06:23:07.000000000&#x27;, &#x27;2021-02-08T17:58:04.000000000&#x27;,\n       &#x27;2021-02-09T17:49:04.000000000&#x27;, &#x27;2021-02-11T06:22:28.000000000&#x27;,\n       &#x27;2021-02-14T17:57:11.000000000&#x27;, &#x27;2021-02-15T17:49:53.000000000&#x27;,\n       &#x27;2021-02-17T06:23:06.000000000&#x27;, &#x27;2021-02-20T17:58:04.000000000&#x27;,\n       &#x27;2021-02-21T17:49:04.000000000&#x27;, &#x27;2021-02-23T06:22:28.000000000&#x27;,\n       &#x27;2021-02-26T17:57:11.000000000&#x27;, &#x27;2021-02-27T17:49:53.000000000&#x27;],\n      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-40dcbe96-a006-4093-b768-674b75a7773b' class='xr-section-summary-in' type='checkbox'  ><label for='section-40dcbe96-a006-4093-b768-674b75a7773b' class='xr-section-summary' >Indexes: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-ca83403a-3b14-4972-9c1a-3d6d166fc818' class='xr-index-data-in' type='checkbox'/><label for='index-ca83403a-3b14-4972-9c1a-3d6d166fc818' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2020-12-01 06:22:31&#x27;, &#x27;2020-12-04 17:57:14&#x27;,\n               &#x27;2020-12-07 06:23:08&#x27;, &#x27;2020-12-10 17:58:07&#x27;,\n               &#x27;2020-12-11 17:49:06&#x27;, &#x27;2020-12-13 06:22:30&#x27;,\n               &#x27;2020-12-16 17:57:13&#x27;, &#x27;2020-12-17 17:49:56&#x27;,\n               &#x27;2020-12-19 06:23:07&#x27;, &#x27;2020-12-22 17:58:06&#x27;,\n               &#x27;2020-12-23 17:49:06&#x27;, &#x27;2020-12-25 06:22:30&#x27;,\n               &#x27;2020-12-28 17:57:13&#x27;, &#x27;2020-12-29 17:49:55&#x27;,\n               &#x27;2020-12-31 06:23:07&#x27;, &#x27;2021-01-03 17:58:05&#x27;,\n               &#x27;2021-01-04 17:49:05&#x27;, &#x27;2021-01-06 06:22:29&#x27;,\n               &#x27;2021-01-09 17:57:12&#x27;, &#x27;2021-01-10 17:49:55&#x27;,\n               &#x27;2021-01-12 06:23:11&#x27;, &#x27;2021-01-15 17:58:05&#x27;,\n               &#x27;2021-01-16 17:49:05&#x27;, &#x27;2021-01-18 06:22:29&#x27;,\n               &#x27;2021-01-21 17:57:12&#x27;, &#x27;2021-01-22 17:49:54&#x27;,\n               &#x27;2021-01-24 06:23:10&#x27;, &#x27;2021-01-27 17:58:05&#x27;,\n               &#x27;2021-01-28 17:49:04&#x27;, &#x27;2021-01-30 06:22:28&#x27;,\n               &#x27;2021-02-02 17:57:11&#x27;, &#x27;2021-02-03 17:49:54&#x27;,\n               &#x27;2021-02-05 06:23:07&#x27;, &#x27;2021-02-08 17:58:04&#x27;,\n               &#x27;2021-02-09 17:49:04&#x27;, &#x27;2021-02-11 06:22:28&#x27;,\n               &#x27;2021-02-14 17:57:11&#x27;, &#x27;2021-02-15 17:49:53&#x27;,\n               &#x27;2021-02-17 06:23:06&#x27;, &#x27;2021-02-20 17:58:04&#x27;,\n               &#x27;2021-02-21 17:49:04&#x27;, &#x27;2021-02-23 06:22:28&#x27;,\n               &#x27;2021-02-26 17:57:11&#x27;, &#x27;2021-02-27 17:49:53&#x27;],\n              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, freq=None))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-68701eb5-567d-417b-99ef-9499e36276d6' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-68701eb5-567d-417b-99ef-9499e36276d6' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>","content_type":"text/html"},"text/plain":{"content":"<xarray.DataArray 'VV_dB' (time: 44)>\ndask.array<where, shape=(44,), dtype=float32, chunksize=(1,), chunktype=numpy.ndarray>\nCoordinates:\n  * time     (time) datetime64[ns] 2020-12-01T06:22:31 ... 2021-02-27T17:49:53","content_type":"text/plain"}}}],"visibility":"show","key":"uukpbGz6oL"}],"visibility":"show","key":"sCh8peH8b9"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.141294,"end_time":"2023-10-24T08:00:09.723229","exception":false,"start_time":"2023-10-24T08:00:09.581935","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we can plot this new array we have generated. The result is an excellent picture showing the two flood events that occured in the time period. We can see the larger picture as this is the mean value over several pixels rather than just a single point like we previously plotted.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HIHuIhuICk"}],"key":"Oy8mU1lsGR"}],"visibility":"show","key":"BBH3x4GgMb"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:09.988640Z","iopub.status.busy":"2023-10-24T08:00:09.988189Z","iopub.status.idle":"2023-10-24T08:00:10.947829Z","shell.execute_reply":"2023-10-24T08:00:10.947303Z"},"papermill":{"duration":1.079166,"end_time":"2023-10-24T08:00:10.948941","exception":false,"start_time":"2023-10-24T08:00:09.869775","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot VV_dB timeseries\nfig, ax = plt.subplots(1, figsize=(10, 6))\nax.plot(timeseriesVV_dB.time, timeseriesVV_dB, color=\"blue\", marker=\"o\", linewidth=0.5)\nax.set_title(\"Mean VV dB returned from AOI over 11-01-20 to 28-02-21\")\nax.set_xlabel('Time')\nax.set_ylabel('VV dB')\nplt.show()","visibility":"show","key":"Kp57ZFYw8R"},{"type":"output","id":"wJuAwyoLcH7Ydma5tDeRX","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8ed4c6f6ec438676bb8c2c62285982b2","path":"/notebooks_test/build/8ed4c6f6ec438676bb8c2c62285982b2.png"},"text/plain":{"content":"<Figure size 1000x600 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"tn1FOK5uIP"}],"visibility":"show","key":"l4lBRJaaCk"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.136559,"end_time":"2023-10-24T08:00:11.238265","exception":false,"start_time":"2023-10-24T08:00:11.101706","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Creating advanced variables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UnZKKjM083"}],"identifier":"creating-advanced-variables","label":"Creating advanced variables","html_id":"creating-advanced-variables","implicit":true,"key":"EHln4PCS1f"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Mapping flooding frequency across the whole AOI","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"v5pfjnXcb7"}],"key":"dkRDcKLmcS"}],"key":"OSGcKygZMS"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Lastly, we are going to return to the full data cube and study area, and we are going to calculate the number of observations that each pixel is flooded during the time period we are examining by calculating the sum of the flood mask pixels. This will create an array with the number of observations a pixel was flooded assigned to each pixel.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jwijJnUCvQ"}],"key":"hVxHYqwpA5"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Secondly, as using the absolute value makes comparisons with other time periods / areas difficult we will also calculate the proportion of observations that a pixel was flooded. To calculate this, we can then divide the sum of the flooded pixels by the number of timesteps in our data cube (the count).","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"PJUM1FthF5"}],"key":"k9qXyN1lnG"}],"visibility":"show","key":"rx75qDLUGA"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:11.502826Z","iopub.status.busy":"2023-10-24T08:00:11.502395Z","iopub.status.idle":"2023-10-24T08:00:11.514395Z","shell.execute_reply":"2023-10-24T08:00:11.513905Z"},"papermill":{"duration":0.13837,"end_time":"2023-10-24T08:00:11.515379","exception":false,"start_time":"2023-10-24T08:00:11.377009","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"flood_sum = s1_cube.flooded.sum(dim=\"time\")\nflood_count = s1_cube.flooded.count(dim=\"time\")\nflood_average = flood_sum / flood_count\n\n#flood_sum.attrs['long_name']='flood_sum'\n#flood_sum.attrs['units']='nounits'\n\n#s1_cube['flood_sum']= flood_sum\n\nflood_average.attrs['long_name']='flood_average'\nflood_average.attrs['units']='nounits'\n\ns1_cube['flood_average']= flood_average","visibility":"show","key":"PD15SgYasA"},{"type":"output","id":"AMBwtDwD6dJ4WFCtf1ZXU","data":[],"visibility":"show","key":"T3dAvlqh6H"}],"visibility":"show","key":"C9W8Ll4WTq"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.124732,"end_time":"2023-10-24T08:00:11.790869","exception":false,"start_time":"2023-10-24T08:00:11.666137","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s plot the flood_average into a plot:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zD4l5Z2TlW"}],"key":"k3Q7UER0qm"}],"visibility":"show","key":"oUiCraAHby"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:12.059563Z","iopub.status.busy":"2023-10-24T08:00:12.059295Z","iopub.status.idle":"2023-10-24T08:00:13.291465Z","shell.execute_reply":"2023-10-24T08:00:13.291041Z"},"papermill":{"duration":1.361187,"end_time":"2023-10-24T08:00:13.293277","exception":false,"start_time":"2023-10-24T08:00:11.932090","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"flood_average.plot.imshow(cmap='GnBu', vmin=0, vmax=0.5, figsize=(10, 10))\nplt.show()","visibility":"show","key":"trPWZrPdH8"},{"type":"output","id":"rIOeQmlGjvbaYCdlT8UKY","data":[{"name":"stderr","output_type":"stream","text":"/home/conda/20a41cef-8d63-4030-9e37-aa3412866cee/60a7fe77bf15cdba38ca795208c44847e274649eaaa525aeefa5bf7a3f7692e0-20231023-081922-894744-312-bm-test-edc-2023.10-01/lib/python3.11/site-packages/dask/core.py:127: RuntimeWarning: divide by zero encountered in log10\n  return func(*(_execute_task(a, cache) for a in args))\n"},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ef48bd0984c5604ea688d315ff96b50e","path":"/notebooks_test/build/ef48bd0984c5604ea688d315ff96b50e.png"},"text/plain":{"content":"<Figure size 1000x1000 with 2 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"UVV3vo5QDW"}],"visibility":"show","key":"kP5qjAxhyU"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.136566,"end_time":"2023-10-24T08:00:13.583232","exception":false,"start_time":"2023-10-24T08:00:13.446666","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This looks great, we have identified the flood plain very clearly here and can also identify some areas that are more susceptible to flooding than others.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"buA1SB3B9T"}],"key":"uoHauV45z3"}],"visibility":"show","key":"MlabodKHuG"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.131278,"end_time":"2023-10-24T08:00:13.864905","exception":false,"start_time":"2023-10-24T08:00:13.733627","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Export a variable to GeoTiff","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ze2h7Xg9vM"}],"identifier":"export-a-variable-to-geotiff","label":"Export a variable to GeoTiff","html_id":"export-a-variable-to-geotiff","implicit":true,"key":"Tlbyc7dSiY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Finally we will export some of the variables we have generated in this notebook. This is really easy to do and is shown in the next cell:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VbUjv1K4YA"}],"key":"YRAnp1U1pG"}],"visibility":"show","key":"CbCYETlKK7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:14.147056Z","iopub.status.busy":"2023-10-24T08:00:14.146583Z","iopub.status.idle":"2023-10-24T08:00:14.253339Z","shell.execute_reply":"2023-10-24T08:00:14.252906Z"},"papermill":{"duration":0.23667,"end_time":"2023-10-24T08:00:14.254678","exception":false,"start_time":"2023-10-24T08:00:14.018008","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# define the timestep you wish to export\ntimestep = flood_threshold2_step2.sel(time='2020-12-28 10:00:00', method='nearest')\n\n# define projection\ntimestep_wgs84 = timestep.rio.write_crs(\"epsg:4326\")\n\n# write to raster\ntimestep_wgs84.rio.to_raster(\"flood_extent_20201228.tif\")","visibility":"show","key":"ahsBtlCmrX"},{"type":"output","id":"mPXQaXbG-Y7gRZZLKu7mm","data":[],"visibility":"show","key":"HyB6TfzfZ4"}],"visibility":"show","key":"R4KxHghzm3"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.13455,"end_time":"2023-10-24T08:00:14.540654","exception":false,"start_time":"2023-10-24T08:00:14.406104","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s export the flood_average variable which is even easier to do as we don’t need to select a single timestamp.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ngHv7KOXHQ"}],"key":"q486xBd0tj"}],"visibility":"show","key":"F3R78P0JPB"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2023-10-24T08:00:14.851601Z","iopub.status.busy":"2023-10-24T08:00:14.851122Z","iopub.status.idle":"2023-10-24T08:00:15.765059Z","shell.execute_reply":"2023-10-24T08:00:15.764615Z"},"papermill":{"duration":1.072258,"end_time":"2023-10-24T08:00:15.766423","exception":false,"start_time":"2023-10-24T08:00:14.694165","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# define projection\nflood_average_wgs84 = flood_average.rio.write_crs(\"epsg:4326\")\n\n# write to raster\nflood_average_wgs84.rio.to_raster(\"flood_average.tif\")","visibility":"show","key":"XrRcLF3keE"},{"type":"output","id":"6q2ZnebBkkvJS8osGgYvK","data":[],"visibility":"show","key":"dVk0UFpOwd"}],"visibility":"show","key":"wgQLVIWT30"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.136488,"end_time":"2023-10-24T08:00:16.069396","exception":false,"start_time":"2023-10-24T08:00:15.932908","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jec7sVfAoD"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"lasLBVmzMK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"So what have we learned through this post and accompanying notebook? We have learnt how to…","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ycql95E2PL"}],"key":"AFewKyP9K2"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Calculate and create a new variable.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"sA9NjbOYU3"}],"key":"WJ5NNzp7ku"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Generate time series plots.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"sJ2zKcK5lL"}],"key":"shQSNH10qC"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Calculate advanced variables using time and space.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"H32guSsClp"}],"key":"dVx8E3g6Sk"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Export our variables from the data cube to GeoTiff.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"dAYBTEugW0"}],"key":"FIpt4fK0Cb"}],"key":"cS4PLOBSip"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"I hope you have found this notebook interesting and useful in helping you make your first steps into using data cubes in your own work and workflows! Hopefully, I’ve also been able to make them a little less scary and easier to approach. I look forward to seeing you apply the lessons from here to your own applications!","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Evi28LpAAE"}],"key":"tXHPSB9zaJ"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"And that concludes this notebook in how you can use EDC to display, manipulate and and analyse Sentinel 1 data. We hope this has been useful in showing you what you can achieve using the EDC.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"DW5zEvYtaI"}],"key":"dTtX0BvD1P"}],"visibility":"show","key":"cUqxe6U0q4"}],"key":"C0p5R8M4re"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Earth System Data Lab Tutorial @ Euro Data Cube","url":"/external-notebooks/eurodatacube/notebooks/notebooks/curated/esdl-edc-v0-2","group":"Curated"},"next":{"title":"How to access DEM data through Sentinel Hub API","url":"/external-notebooks/eurodatacube/notebooks/notebooks/curated/how-to-access-dem-data-through-sentinel-hub-api","group":"Curated"}}},"domain":"http://localhost:3000"}