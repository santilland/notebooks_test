{"version":1,"kind":"Notebook","sha256":"6c67087e42ba4cb7be4c15602e17cd16f355fa1d8c577d1f713498b33524fe5a","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.detect-trucks-sentinel2","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/Detect_Trucks_Sentinel2.ipynb","dependencies":[],"frontmatter":{"title":"Detect Trucks using Sentinel-2 data","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"github":"https://github.com/eoxhub-workspaces/documentation/","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/eoxhub-workspaces/documentation//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/Detect_Trucks_Sentinel2.ipynb","exports":[{"format":"ipynb","filename":"Detect_Trucks_Sentinel2.ipynb","url":"/build/Detect_Trucks_Sentin-233b4def5b8eed2f38b03ae95f1262eb.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:28.112398Z","iopub.status.busy":"2021-05-11T14:43:28.111869Z","iopub.status.idle":"2021-05-11T14:43:28.163604Z","shell.execute_reply":"2021-05-11T14:43:28.163983Z"},"papermill":{"duration":0.068733,"end_time":"2021-05-11T14:43:28.164146","exception":false,"start_time":"2021-05-11T14:43:28.095413","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import check_compatibility\ncheck_compatibility(\"user-0.24.5\", dependencies=[\"SH\"])","visibility":"show","key":"qOdB2P5QnR"},{"type":"output","id":"LhWC2bnhn5goflKYq_tpf","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script type=\"text/javascript\">\n        function toggle(id) {\n            el = document.getElementById(id);\n            el.style.display = el.style.display === \"none\" ? \"block\" : \"none\";\n        }\n    </script>","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"This notebook is compatible with this base image version (user-0.24.5).","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"\n\n---------\n\nThe following environment variables are available:\n\n* `SH_CLIENT_ID`, `SH_INSTANCE_ID`, `SH_CLIENT_NAME`, `SH_CLIENT_SECRET`\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"visibility":"show","key":"x3uYJUuCLT"}],"visibility":"show","key":"ddyUKP1zjb"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013611,"end_time":"2021-05-11T14:43:28.191572","exception":false,"start_time":"2021-05-11T14:43:28.177961","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Detect Trucks using Sentinel-2 data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gwcHLKJjwO"}],"identifier":"detect-trucks-using-sentinel-2-data","label":"Detect Trucks using Sentinel-2 data","html_id":"detect-trucks-using-sentinel-2-data","implicit":true,"key":"X2gwXiF0qN"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Parallax-based truck detection","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"iwTYTyOUyJ"}],"identifier":"parallax-based-truck-detection","label":"Parallax-based truck detection","html_id":"parallax-based-truck-detection","implicit":true,"key":"JVjY2MyVe1"},{"type":"thematicBreak","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tAXYX6j47y"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook is a comprehensive script for detecting trucks with Sentinel-2 data. In order to run the detection in your area of interest you will have to modify two cells:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"f13wHVwlFH"}],"key":"BmQbgGtmlO"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Area of Interest (specify the aoi as bounding box)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZDJBisYgEr"}],"key":"nOgrSAVV5b"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Date (specify an acquisition date)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"oxnAoekWe1"}],"key":"KhJfBeBpUB"}],"key":"l9XTqmXAMC"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Afterwards, you may simply run all cells and check the result at the end of the script where you can also write the detections as points.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"KgaPWDblOT"}],"key":"qUJYagfoEM"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Ensure that you have access to the Sentinel Hub resources for retrieving Sentinel-2 data through its API (via xcube_sh).","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"EhpHrs3LeI"}],"key":"zVRybG7sEA"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Author: Henrik Fisser, 2020","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"EqZazPhFx3"},{"type":"break","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"zs9yDy0QDb"},{"type":"text","value":"Explanations on the truck detection on GitHub: ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"v6BE7FuSo8"},{"type":"link","url":"https://github.com/hfisser/Truck_Detection_Sentinel2_COVID19","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"https://​github​.com​/hfisser​/Truck​_Detection​_Sentinel2​_COVID19","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"wM1PDvaxrp"}],"urlSource":"https://github.com/hfisser/Truck_Detection_Sentinel2_COVID19","error":true,"key":"ng6lcsYWHk"}],"key":"MmindZ3EBZ"}],"visibility":"show","key":"gFawxO0Rfq"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:28.224815Z","iopub.status.busy":"2021-05-11T14:43:28.224274Z","iopub.status.idle":"2021-05-11T14:43:37.090945Z","shell.execute_reply":"2021-05-11T14:43:37.091394Z"},"papermill":{"duration":8.886861,"end_time":"2021-05-11T14:43:37.091531","exception":false,"start_time":"2021-05-11T14:43:28.204670","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport subprocess\nimport sys\n\n# installations\ndef install_package(pkg):\n    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", pkg])\ninstall_package(\"OSMPythonTools\")\ninstall_package(\"geocube\")\n\n# OSM API\nfrom OSMPythonTools.overpass import overpassQueryBuilder, Overpass\n\nimport numpy as np\nimport xarray as xr\nimport geocube\nimport geopandas as gpd\nimport pandas as pd\nfrom xcube_sh.cube import open_cube\nfrom xcube_sh.config import CubeConfig\nfrom xcube.core.maskset import MaskSet\nfrom rasterio import features\nfrom affine import Affine\nfrom shapely import geometry, coords\nfrom shapely.geometry import Polygon, Point, box\nfrom numba import jit\n\nimport IPython.display\n%matplotlib inline","visibility":"show","key":"D0Zr1sBxwn"},{"type":"output","id":"3cBlwUq7v7-tNrcpaKrRw","data":[],"visibility":"show","key":"as58mKZILu"}],"visibility":"show","key":"ZWhOMswIW9"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013061,"end_time":"2021-05-11T14:43:37.117922","exception":false,"start_time":"2021-05-11T14:43:37.104861","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area of Interest","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gn8lLqQ67q"}],"identifier":"area-of-interest","label":"Area of Interest","html_id":"area-of-interest","implicit":true,"key":"S0CMZmlDGa"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Specify an area of interest as bounding box in format:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KCqjUBaQHZ"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"qcEM03h9O0"},{"type":"text","value":"xmin, ymin, ymax, ymax","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cGFwGMfLgM"}],"key":"PzdnB24v1F"}],"visibility":"show","key":"gW9KQDWzKd"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.148822Z","iopub.status.busy":"2021-05-11T14:43:37.147805Z","iopub.status.idle":"2021-05-11T14:43:37.152020Z","shell.execute_reply":"2021-05-11T14:43:37.151537Z"},"papermill":{"duration":0.020447,"end_time":"2021-05-11T14:43:37.152132","exception":false,"start_time":"2021-05-11T14:43:37.131685","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"bbox = -3.85, 40.3, -3.55, 40.5 # Madrid\nIPython.display.GeoJSON(box(*bbox).__geo_interface__)","visibility":"show","key":"lRQK5GGoi4"},{"type":"output","id":"ly5Igtn6rKehTwO1dBiDw","data":[{"output_type":"display_data","metadata":{"application/geo+json":{"expanded":false,"root":"root"}},"data":{"application/geo+json":{"content":"{\"coordinates\":[[[-3.55,40.3],[-3.55,40.5],[-3.85,40.5],[-3.85,40.3],[-3.55,40.3]]],\"type\":\"Polygon\"}","content_type":"application/geo+json"},"text/plain":{"content":"<IPython.display.GeoJSON object>","content_type":"text/plain"}}}],"visibility":"show","key":"AHLm4rZU0x"}],"visibility":"show","key":"xI3rSpleQk"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.01399,"end_time":"2021-05-11T14:43:37.179354","exception":false,"start_time":"2021-05-11T14:43:37.165364","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Date","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FtY6LV08Qv"}],"identifier":"date","label":"Date","html_id":"date","implicit":true,"key":"XEyV2vApZE"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Select a cloud-free acquisition and provide the date as “YYYY-MM-DD”.\nYou may select data e.g. here:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zSvzBg0mu3"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ZYIQb4HQ8E"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Copernicus Open Access Hub","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"GltbRo42Cc"}],"key":"TdOANKAExR"},{"type":"text","value":"\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"slNAdm7lWz"},{"type":"link","url":"https://scihub.copernicus.eu/dhus/#/home","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​scihub​.copernicus​.eu​/dhus​/​#​/home","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"sglxhRi87g"}],"urlSource":"https://scihub.copernicus.eu/dhus/#/home","key":"KviXcEtYRb"},{"type":"text","value":" ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"bkvR8s4VOy"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"fGnqKXdp6q"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"EO Browser","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ZkvaLNKiyL"}],"key":"PR5Lva4qp6"},{"type":"text","value":"\n","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rWqkuT7shq"},{"type":"link","url":"https://apps.sentinel-hub.com/eo-browser/?zoom=10&lat=41.9&lng=12.5&themeId=DEFAULT-THEME","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​apps​.sentinel​-hub​.com​/eo​-browser​/​?zoom​=​10​&​lat​=​41​.9​&​lng​=​12​.5​&​themeId​=​DEFAULT​-THEME","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"c4C8fTXdTB"}],"urlSource":"https://apps.sentinel-hub.com/eo-browser/?zoom=10&lat=41.9&lng=12.5&themeId=DEFAULT-THEME","key":"nUWZA7vf6B"}],"key":"LBaLzJHMHU"}],"visibility":"show","key":"EUIr4FrTL2"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.208587Z","iopub.status.busy":"2021-05-11T14:43:37.208064Z","iopub.status.idle":"2021-05-11T14:43:37.209936Z","shell.execute_reply":"2021-05-11T14:43:37.209517Z"},"papermill":{"duration":0.017346,"end_time":"2021-05-11T14:43:37.210021","exception":false,"start_time":"2021-05-11T14:43:37.192675","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"date_start = \"2020-05-18\"\ndate_end = \"2020-05-19\"","visibility":"show","key":"tMs57C9ePn"},{"type":"output","id":"qUZj4g6bq4HJZjsQc_l_q","data":[],"visibility":"show","key":"eQtMIfeij1"}],"visibility":"show","key":"rpNDpnL18G"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013246,"end_time":"2021-05-11T14:43:37.237199","exception":false,"start_time":"2021-05-11T14:43:37.223953","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open Street Maps (OSM)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qOxE6eEit3"}],"identifier":"open-street-maps-osm","label":"Open Street Maps (OSM)","html_id":"open-street-maps-osm","implicit":true,"key":"o8BG9ZhZ6J"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Trucks are only detected on roads obtained from OSM.\nYou may specify road types to include. Their descriptions can be found here:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"bc4t3DwTw6"},{"type":"break","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"TITd4EftZY"},{"type":"link","url":"https://wiki.openstreetmap.org/wiki/Key:highway","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"https://​wiki​.openstreetmap​.org​/wiki​/Key:highway","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"JUw6EekeQV"}],"urlSource":"https://wiki.openstreetmap.org/wiki/Key:highway","key":"eHzFHl6wfo"}],"key":"qsJ4LCMQq1"}],"visibility":"show","key":"VgFq43TWtG"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.277251Z","iopub.status.busy":"2021-05-11T14:43:37.276736Z","iopub.status.idle":"2021-05-11T14:43:37.278305Z","shell.execute_reply":"2021-05-11T14:43:37.278634Z"},"papermill":{"duration":0.017611,"end_time":"2021-05-11T14:43:37.278728","exception":false,"start_time":"2021-05-11T14:43:37.261117","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_values = [\"motorway\", \"trunk\", \"primary\"] # all of key \"highway\"\nroads_buffer = 0.00022 # degree, OSM road vectors are buffered, for motorway, the others lower","visibility":"show","key":"hpWuUy2sj2"},{"type":"output","id":"SGRWcI7t8-Hl-rq-ZpW8Z","data":[],"visibility":"show","key":"yLZSYy0Bzh"}],"visibility":"show","key":"QiKvruBQaf"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013922,"end_time":"2021-05-11T14:43:37.306204","exception":false,"start_time":"2021-05-11T14:43:37.292282","status":"completed"},"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"edFwFsRT71"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Processing methods","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"CwejGTFa1g"}],"identifier":"processing-methods","label":"Processing methods","html_id":"processing-methods","implicit":true,"key":"Nn8kp80H1N"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the following cells all needed methods are defined. They will be invoked further below.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ler7WvFSQA"}],"key":"Y5MR9364VG"}],"visibility":"show","key":"nE71HlpYrq"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.350139Z","iopub.status.busy":"2021-05-11T14:43:37.349505Z","iopub.status.idle":"2021-05-11T14:43:37.351742Z","shell.execute_reply":"2021-05-11T14:43:37.351159Z"},"papermill":{"duration":0.031943,"end_time":"2021-05-11T14:43:37.351835","exception":false,"start_time":"2021-05-11T14:43:37.319892","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# re-order bbox from W,S,E,N to S,W,N,E\ndef convert_bbox_osm(bbox):\n    offset = 0.05 # add a buffer to bbox in order to be sure cube is entirely covered\n    bbox_osm = [bbox[1], bbox[0], bbox[3], bbox[2]]\n    bbox_osm[0] -= offset # min lat\n    bbox_osm[1] -= offset # min lon\n    bbox_osm[2] += offset # max lat\n    bbox_osm[3] += offset # max lon\n    return bbox_osm\n\n# bbox List of four coords\n# osm_value String OSM value\n# osm_key String OSM key\n# element_type List of String\n# returns GeoDataFrame\ndef get_osm(bbox, \n            osm_value,\n            element_type = [\"way\", \"relation\"]):\n    osm_key = \"highway\"\n    bbox_osm = convert_bbox_osm(bbox)\n    quot = '\"'\n    select = quot+osm_key+quot + '=' + quot+osm_value+quot\n    select_link = select.replace(osm_value, osm_value + \"_link\") # also get road links\n    select_junction = select.replace(osm_value, osm_value + \"_junction\")\n    geoms = []\n    for selector in [select, select_link, select_junction]:  \n        try:\n            query = overpassQueryBuilder(bbox=bbox_osm, \n                                         elementType=element_type, \n                                         selector=selector, \n                                         out='body',\n                                         includeGeometry=True)\n            elements = Overpass().query(query, timeout=60).elements()\n            # create multiline of all elements\n            if len(elements) > 0:\n                for i in range(len(elements)):\n                    elem = elements[i]\n                    geoms.append(elem.geometry())\n        except:\n            Warning(\"Could not retrieve \" + select)\n    try:\n        lines = gpd.GeoDataFrame(crs = \"EPSG:4326\", geometry = geoms)\n        n = len(geoms)\n        lines[\"osm_value\"] = [osm_value]*n # add road type\n        return lines\n    except:\n        Warning(\"Could not merge \" + osm_value)\n        \n# buffer Float road buffer distance [m]\n# bbox List of four coords\n# bbox_id Integer processing id of bbox\n# osm_values List of String OSM values\n# osm_key String OSM key\n# roads_buffer Float buffer width\n# returns GeoDataFrame\ndef get_roads(bbox, osm_values, roads_buffer):\n    osm_key = \"highway\"\n    roads = []\n    has_error = []\n    offset = 0.00002\n    buffer_dist = \"buffer_distance\"\n    # buffer according to road type\n    m,t,p,s,ter = \"motorway\", \"trunk\", \"primary\", \"secondary\", \"tertiary\"\n    buffers = {m:roads_buffer, t:roads_buffer-offset, p:roads_buffer-(2*offset), s:roads_buffer-(3*offset), ter:roads_buffer-(4*offset)}\n    osm_values_int = {m:1, t:2, p:3, s:4, ter:5}\n    for osm_value in osm_values:\n        roads_osm = get_osm(bbox, osm_value)\n        try:\n            roads_osm = get_osm(bbox, osm_value)\n            roads_osm[buffer_dist] = [buffers[osm_value]] * len(roads_osm)\n            roads_osm[\"osm_value_int\"] = osm_values_int[osm_value]\n            roads.append(roads_osm)\n        except:\n            has_error.append(1)\n            print(\"'get_osm'\" + \"failed for bbox_id osm_value \" + osm_value + \"osm_key\" + osm_key)\n    if len(roads) > len(has_error):\n        roads_merge = gpd.GeoDataFrame(pd.concat(roads, ignore_index=True), crs=roads[0].crs)\n        buffered = roads_merge.buffer(distance=roads_merge[buffer_dist])\n        roads_merge.geometry = buffered\n        return roads_merge\n\n# osm geodataframe of polygons\n# reference_raster xarray with lat and lon\n# returns numpy array\ndef rasterize_osm(osm, reference_raster):\n    osm_values = list(set(osm[\"osm_value\"]))\n    nan_placeholder = 100\n    road_rasters = []\n    for osm_value in osm_values:\n        osm_subset = osm[osm[\"osm_value\"] == osm_value]\n        raster = rasterize(osm_subset, reference_raster.lat, reference_raster.lon)\n        cond = np.isfinite(raster)\n        raster_osm = np.where(cond, list(osm_subset.osm_value_int)[0], nan_placeholder) # use placeholder instead of nan first\n        raster_osm = raster_osm.astype(np.float)\n        road_rasters.append(raster_osm)        \n    # merge road types in one layer\n    road_raster_np = np.array(road_rasters).min(axis=0) # now use the lowest value (highest road level) because some intersect\n    road_raster_np[road_raster_np == nan_placeholder] = 0\n    return road_raster_np # 0=no_road 1=motorway, 2=trunk, ...\n\ndef transform_lat_lon(lat, lon):\n    lat = np.asarray(lat)\n    lon = np.asarray(lon)\n    trans = Affine.translation(lon[0], lat[0])\n    scale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0])\n    return trans * scale\n\ndef rasterize(polygons, lat, lon, fill=np.nan):\n    transform = transform_lat_lon(lat, lon)\n    out_shape = (len(lat), len(lon))\n    raster = features.rasterize(polygons.geometry, out_shape=out_shape,\n                                fill=fill, transform=transform,\n                                dtype=float)\n    return xr.DataArray(raster, coords={\"lat\":lat, \"lon\":lon}, dims=(\"lat\", \"lon\"))","visibility":"show","key":"n7xp8vkDR4"},{"type":"output","id":"e7Q3OZqkQSczY2qqPvGrY","data":[],"visibility":"show","key":"IVear5axVF"}],"visibility":"show","key":"HdSGnF90uY"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.394356Z","iopub.status.busy":"2021-05-11T14:43:37.391473Z","iopub.status.idle":"2021-05-11T14:43:37.395870Z","shell.execute_reply":"2021-05-11T14:43:37.396228Z"},"papermill":{"duration":0.030909,"end_time":"2021-05-11T14:43:37.396329","exception":false,"start_time":"2021-05-11T14:43:37.365420","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# TruckDetector detects trucks at acquisition-level\nclass TruckDetector():   \n    def __init__(self, band_stack):\n        is_none = band_stack is None\n        self.band_stack = band_stack.chunk(band_stack.dims[\"lat\"], band_stack.dims[\"lon\"]) if not is_none else None\n        self.no_truck_mask = None\n        self.trucks = None\n    \n    def detect(self):\n        B02 = self.band_stack.B02.persist().values\n        B03 = self.band_stack.B03.persist().values\n        B04 = self.band_stack.B04.persist().values\n        B08 = self.band_stack.B08.persist().values\n        B11 = self.band_stack.B11.persist().values\n        no_truck_mask = calc_no_trucks(B02, B03, B04, B08, B11)\n        trucks = detect_trucks(B02, B03, B04, no_truck_mask)\n        lon_lat = {\"lat\":self.band_stack.lat, \"lon\":self.band_stack.lon}\n        self.no_truck_mask = xr.DataArray(no_truck_mask, coords=lon_lat, dims=(\"lat\", \"lon\"))\n        self.trucks = xr.DataArray(trucks, coords=lon_lat, dims=(\"lat\", \"lon\")).astype(np.int)\n        self.filter_trucks()\n                            \n    def filter_trucks(self):\n        self.trucks = filter_spatial_3x3_extended(self.trucks)\n        \n# take xarray and ensure each value with 1 in data has no neighbor with 1 in an extended 3x3 block. Extended means: horizontally and vertically\n# it is also checked for the second-next pixel\n# Method checks only surrounding of values equal 1\n# arr xarray DataArray with values and lat lon\ndef filter_spatial_3x3_extended(arr):\n    values = arr.values\n    lon = arr.lon\n    lat = arr.lat\n    valid = np.where(arr == 1)\n    for y,x in zip(valid[0], valid[1]):\n        y_above = y - 1\n        y_above_next = y - 2\n        x_left = x - 1\n        x_right = x + 1\n        x_left_next = x - 2\n        space_left = x_left >= 0\n        space_right = x_right >= 0 and x_right < len(lon)\n        space_above = y_above >= 0\n        val_left_above = values[y_above, x_left] if space_left and space_above else 0\n        val_right_above = values[y_above, x_right] if space_right and space_above else 0\n        val_left = values[y, x_left] if space_left else 0\n        val_above = values[y_above, x] if space_above else 0\n        val_left_next = values[y, x_left_next] if x_left_next >= 0 else 0\n        val_above_next = values[y_above_next, x] if y_above_next >= 0 else 0\n        # if any of the values left, above and left above has 1 set current value 0\n        if (val_left_above + val_right_above + val_left + val_above + val_left_next + val_above_next) >= 1:\n            values[y,x] = 0\n    arr.values = values\n    return arr\n\n# extracts coordinates at value in np array and returns points as GeoDataFrame\n# data 2d np array\n# match_value Float value in data where point coordinates are extracted\n# lon_lat dict of:\n### \"lon\": np array longitude values\"\n### \"lat\": np array latitude values\"\n# crs String EPSG:XXXX\ndef points_from_np(data, match_value, lon_lat, crs):\n    indices = np.argwhere(data == match_value)\n    if len(indices) > 0:\n        lat_indices = indices[:,[0]]\n        lon_indices = indices[:,[1]]\n        lat_coords = lon_lat[\"lat\"][lat_indices]\n        lon_coords = lon_lat[\"lon\"][lon_indices]\n        points = gpd.GeoDataFrame(geometry = gpd.points_from_xy(lon_coords, lat_coords))\n        points.crs = crs\n        return points\n    \ndef raster_to_points(raster, lon_lat, field_name, crs):\n    points_list = []\n    match_values = np.unique(raster[(raster != 0) * ~np.isnan(raster)]) # by pixel value\n    for x in match_values:\n        points = points_from_np(raster, x, lon_lat, crs=crs)\n        points[field_name] = [x] * len(points)\n        points_list.append(points)\n    return gpd.GeoDataFrame(pd.concat(points_list, ignore_index=True))\n        \n# Calculate a binary mask where pixels that are definitely no trucks are represented as 0.\n# thresholds Dict with at least:\n### max_ndvi Float above this val: no trucks. For Vegetation\n### max_ndwi Float above this val: no trucks. For Water\n### max_ndsi Float above this val: no_trucks. For Snow\n### min_rgb Float above this val: no_trucks. For dark surfaces, e.g. shadows\n### max_blue Float above this val: no_trucks\n### max_green Float above this val: no trucks\n### max_red Float above this val: no trucks\n### min_b11 Float below this val: no trucks. For dark surfaces, e.g. shadows\n### max_b11 Float below this val: no trucks. For bright (sealed) surfaces, e.g. buildings\n@jit(nopython=True, parallel=True)\ndef calc_no_trucks(B02, B03, B04, B08, B11):\n    th = {\"min_blue\":0.06, \n          \"min_green\":0.04, \n          \"min_red\":0.04,\n          \"max_red\":0.15,\n          \"max_green\":0.15,\n          \"max_blue\":0.2,\n          \"max_ndvi\":0.5,\n          \"max_ndwi\":0.0001,\n          \"max_ndsi\":0.0001,\n          \"min_blue_green_ratio\":0.03,\n          \"min_blue_red_ratio\":0.05, \n          \"max_blue_green_ratio\":0.17, \n          \"max_blue_red_ratio\":0.2}\n    ndvi_mask = ratio(B08, B04) < th[\"max_ndvi\"]\n    ndwi_mask = ratio(B02, B11) < th[\"max_ndwi\"]\n    ndsi_mask = ratio(B03, B11) < th[\"max_ndsi\"]\n    low_rgb_mask = (B02 > th[\"min_blue\"]) * (B03 > th[\"min_green\"]) * (B04 > th[\"min_red\"])\n    high_rgb_mask = (B02 < th[\"max_blue\"]) * (B03 < th[\"max_green\"]) * (B04 < th[\"max_red\"])\n    no_truck_mask = ndvi_mask * ndwi_mask * ndsi_mask * low_rgb_mask * high_rgb_mask\n    return no_truck_mask\n\n# Calculate a binary mask where trucks are represented as 1 and no trucks as 0.\n# thresholds Dict with at least:\n### min_green_ratio Float, minimum value of blue-green ratio\n### min_red_ratio Float, minimum value of blue-red ratio\n@jit(nopython=True, parallel=True)\ndef detect_trucks(B02, B03, B04, no_truck_mask):\n    th = {\"min_blue\":0.06, \n          \"min_green\":0.04, \n          \"min_red\":0.04,\n          \"max_red\":0.15,\n          \"max_green\":0.15,\n          \"max_blue\":0.2,\n          \"max_ndvi\":0.5,\n          \"max_ndwi\":0.0001,\n          \"max_ndsi\":0.0001,\n          \"min_blue_green_ratio\":0.03,\n          \"min_blue_red_ratio\":0.05, \n          \"max_blue_green_ratio\":0.17, \n          \"max_blue_red_ratio\":0.2}\n    bg_ratio = ratio(B02, B03)\n    br_ratio = ratio(B02, B04)\n    bg = bg_ratio > th[\"min_blue_green_ratio\"]\n    br = br_ratio > th[\"min_blue_red_ratio\"]\n    bg_max = bg_ratio < th[\"max_blue_green_ratio\"]\n    br_max = br_ratio < th[\"max_blue_red_ratio\"]\n    trucks = (bg * br * bg_max * br_max) * no_truck_mask\n    return trucks\n\n@jit(nopython=True, parallel=True)\ndef ratio(a, b):\n    return (a-b)/(a+b)","visibility":"show","key":"NjVV3dyuHt"},{"type":"output","id":"PuhBdv3vqHGPk2GodhBtx","data":[],"visibility":"show","key":"GX3iPcfPB4"}],"visibility":"show","key":"Xf7OC7ItMH"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.429810Z","iopub.status.busy":"2021-05-11T14:43:37.429287Z","iopub.status.idle":"2021-05-11T14:43:37.431384Z","shell.execute_reply":"2021-05-11T14:43:37.430868Z"},"papermill":{"duration":0.021641,"end_time":"2021-05-11T14:43:37.431470","exception":false,"start_time":"2021-05-11T14:43:37.409829","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# AcquisitionProcessor processes all valid pixels of a single acquisition in cube\nclass AcquisitionProcessor():\n    def __init__(self, date_np64, cube):\n        self.date_np64 = date_np64\n        self.cube = cube\n        self.band_stack = cube.sel(time = date_np64)\n        self.detector = None\n        self.no_clouds = None\n        self.osm_mask = None\n           \n    def mask_clouds(self):\n        cloud_masking_thresholds = {\"rgb\":0.25,\"blue_green\":0.2,\"blue_red\":0.2}\n        scl = MaskSet(self.band_stack.SCL)\n        high_prob = scl.clouds_high_probability\n        med_prob = scl.clouds_medium_probability\n        cirrus = scl.cirrus\n        no_data = scl.no_data\n        rgb_cloud_mask = calc_rgb_cloud_mask(self.band_stack, cloud_masking_thresholds)\n        self.no_clouds = (high_prob + med_prob + cirrus + no_data + rgb_cloud_mask) == 0\n        self.band_stack = self.band_stack.where(self.no_clouds)\n    \n    def mask_with_osm(self, osm_mask):\n        self.osm_mask = osm_mask\n        self.band_stack = self.band_stack.where(self.osm_mask != 0)\n                \n    def do_detection(self):\n        self.detector = TruckDetector(self.band_stack)\n        self.detector.detect()\n        \ndef calc_rgb_cloud_mask(band_stack, cloud_masking_thresholds):\n    B02, B03, B04 = band_stack.B02, band_stack.B03, band_stack.B04\n    c = cloud_masking_thresholds[\"rgb\"]\n    clouds_rgb = ((B02 > c) + (B03 > c) + (B04 > c)) >= 1\n    # attempt to mask haze without masking out truck pixels (similar! higher blue than red and green)\n    blue_green_ratio = (B02-B03) / (B02+B03)\n    blue_red_ratio = (B02-B04) / (B02+B04)\n    clouds_blue_green = blue_green_ratio > cloud_masking_thresholds[\"blue_green\"]\n    clouds_blue_red = blue_red_ratio > cloud_masking_thresholds[\"blue_red\"]\n    clouds = (clouds_rgb + clouds_blue_green + clouds_blue_red) >= 1\n    return clouds","visibility":"show","key":"QXv8BgGfoR"},{"type":"output","id":"a9PIx7Y-mqMxXKfL-04gv","data":[],"visibility":"show","key":"kGLovV3wuQ"}],"visibility":"show","key":"u803sRyyfK"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013241,"end_time":"2021-05-11T14:43:37.457879","exception":false,"start_time":"2021-05-11T14:43:37.444638","status":"completed"},"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j2gAuTRdKp"},{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Get Sentinel-2 L2A xcube","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YuWSDtipy6"}],"identifier":"get-sentinel-2-l2a-xcube","label":"Get Sentinel-2 L2A xcube","html_id":"get-sentinel-2-l2a-xcube","implicit":true,"key":"Ctd85jrPcG"}],"visibility":"show","key":"qsOTgTXLfR"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.488728Z","iopub.status.busy":"2021-05-11T14:43:37.487880Z","iopub.status.idle":"2021-05-11T14:43:37.836341Z","shell.execute_reply":"2021-05-11T14:43:37.836893Z"},"papermill":{"duration":0.365272,"end_time":"2021-05-11T14:43:37.837068","exception":false,"start_time":"2021-05-11T14:43:37.471796","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"config = CubeConfig(dataset_name = \"S2L2A\",\n                    band_names = [\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"SCL\"],\n                    tile_size = [512, 512],\n                    geometry = bbox,\n                    spatial_res = 0.00009,\n                    time_range = [date_start, date_end])\ncube = open_cube(config)","visibility":"show","key":"xGtyXS2L6Q"},{"type":"output","id":"EWuTMK9_Uti2cKT-_xhef","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/envs/eurodatacube-0.24.5/lib/python3.8/site-packages/xcube_sh/config.py:99: UserWarning: the geometry parameter is no longer supported, use bbox instead\n  warnings.warn('the geometry parameter is no longer supported, use bbox instead')\n/opt/conda/envs/eurodatacube-0.24.5/lib/python3.8/site-packages/pandas/core/tools/timedeltas.py:132: FutureWarning: Units 'M', 'Y' and 'y' do not represent unambiguous timedelta values and will be removed in a future version\n  return _coerce_scalar_to_timedelta_type(arg, unit=unit, errors=errors)\n"}],"visibility":"show","key":"qpCY8tlckQ"}],"visibility":"show","key":"ijyP2sCX1Q"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.014459,"end_time":"2021-05-11T14:43:37.866422","exception":false,"start_time":"2021-05-11T14:43:37.851963","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Acquisition","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J0KgXaPP51"}],"identifier":"acquisition","label":"Acquisition","html_id":"acquisition","implicit":true,"key":"buLaMe96Ju"}],"visibility":"show","key":"olPUsgT3n0"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.899841Z","iopub.status.busy":"2021-05-11T14:43:37.899313Z","iopub.status.idle":"2021-05-11T14:43:37.901255Z","shell.execute_reply":"2021-05-11T14:43:37.900814Z"},"papermill":{"duration":0.021374,"end_time":"2021-05-11T14:43:37.901353","exception":false,"start_time":"2021-05-11T14:43:37.879979","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition = AcquisitionProcessor(cube.time.values[0], cube)","visibility":"show","key":"Gjr4uJAv4F"},{"type":"output","id":"DSYYLxXK_pkSlsVBvIiuy","data":[],"visibility":"show","key":"Y2RASVeC6D"}],"visibility":"show","key":"aOJA3dgyoT"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.013537,"end_time":"2021-05-11T14:43:37.928349","exception":false,"start_time":"2021-05-11T14:43:37.914812","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot RGB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nmhU3SZYnH"}],"identifier":"plot-rgb","label":"Plot RGB","html_id":"plot-rgb","implicit":true,"key":"sSlpVVOrSN"}],"visibility":"show","key":"fwPQja6KNM"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:43:37.969939Z","iopub.status.busy":"2021-05-11T14:43:37.964138Z","iopub.status.idle":"2021-05-11T14:44:20.427154Z","shell.execute_reply":"2021-05-11T14:44:20.427605Z"},"papermill":{"duration":42.485231,"end_time":"2021-05-11T14:44:20.427751","exception":false,"start_time":"2021-05-11T14:43:37.942520","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rgb_bands = [\"B04\", \"B03\", \"B02\"]\ncoords, dims = [rgb_bands, cube.lat, cube.lon], [\"bands\", \"lat\", \"lon\"]\nrgb = np.vstack([cube.B04.persist().values, cube.B03.persist().values, cube.B02.persist().values])\nrgb_xr = xr.DataArray(rgb, coords=coords, dims=dims)\nrgb_xr.plot.imshow(figsize=[12,10], rgb=\"bands\", vmin=0, vmax=0.4)\nrgb, rgb_xr = None, None","visibility":"show","key":"FbRbJBuiaC"},{"type":"output","id":"B1i8nwDyaPYd7MEGRywIp","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"450eb58f07d897c1fbcbb6df05a4d5b2","path":"/build/450eb58f07d897c1fbcbb6df05a4d5b2.png"},"text/plain":{"content":"<Figure size 864x720 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"lNSokusDTG"}],"visibility":"show","key":"ybliiLoPl4"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.039645,"end_time":"2021-05-11T14:44:20.511458","exception":false,"start_time":"2021-05-11T14:44:20.471813","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"RGB reflectance","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ve8P39RO7q"}],"key":"QZfbX888cx"}],"visibility":"show","key":"A4uQDHxnZO"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.040272,"end_time":"2021-05-11T14:44:20.591662","exception":false,"start_time":"2021-05-11T14:44:20.551390","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get OSM roads","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mVdYGW2DUg"}],"identifier":"get-osm-roads","label":"Get OSM roads","html_id":"get-osm-roads","implicit":true,"key":"Qp26anWLuC"}],"visibility":"show","key":"j0j6gswmTm"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:44:20.675399Z","iopub.status.busy":"2021-05-11T14:44:20.674794Z","iopub.status.idle":"2021-05-11T14:45:28.089654Z","shell.execute_reply":"2021-05-11T14:45:28.090058Z"},"papermill":{"duration":67.458815,"end_time":"2021-05-11T14:45:28.090195","exception":false,"start_time":"2021-05-11T14:44:20.631380","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_roads = get_roads(bbox, osm_values, roads_buffer)\nosm_roads.plot(figsize=[12,10])","visibility":"show","key":"l60ySt4Bo0"},{"type":"output","id":"6wtouQ1MREJxBa3SkUiNj","data":[{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"motorway\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway_link\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"motorway_link\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"motorway_junction\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"motorway_junction\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"trunk\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk_link\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"trunk_link\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"trunk_junction\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"trunk_junction\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"primary\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary_link\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"primary_link\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"[overpass] downloading data: [timeout:60][out:json];(way[\"highway\"=\"primary_junction\"](40.25,-3.9,40.55,-3.5);relation[\"highway\"=\"primary_junction\"](40.25,-3.9,40.55,-3.5);); out body geom;\n"},{"name":"stderr","output_type":"stream","text":"<ipython-input-6-00aa5324d1df>:78: UserWarning: Geometry is in a geographic CRS. Results from 'buffer' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  buffered = roads_merge.buffer(distance=roads_merge[buffer_dist])\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"3ba5e1b6bbe97ca9561f62fcb70b2a40","path":"/build/3ba5e1b6bbe97ca9561f62fcb70b2a40.png"},"text/plain":{"content":"<Figure size 864x720 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"ayLjV2hBVR"}],"visibility":"show","key":"rS1JmHZ4IG"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.049229,"end_time":"2021-05-11T14:45:28.186436","exception":false,"start_time":"2021-05-11T14:45:28.137207","status":"completed"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The OSM road vectors are buffered, hence we see polygons here.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jqdJx6Mg7H"}],"key":"Maqkv590XR"}],"visibility":"show","key":"fkIy6VyCUX"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.047109,"end_time":"2021-05-11T14:45:28.278506","exception":false,"start_time":"2021-05-11T14:45:28.231397","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Rasterize OSM roads to S2 cube","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fmHrs8Rp2m"}],"identifier":"rasterize-osm-roads-to-s2-cube","label":"Rasterize OSM roads to S2 cube","html_id":"rasterize-osm-roads-to-s2-cube","implicit":true,"key":"vbgFbBLejA"}],"visibility":"show","key":"RO2uExjp5Z"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:45:28.374720Z","iopub.status.busy":"2021-05-11T14:45:28.374052Z","iopub.status.idle":"2021-05-11T14:45:30.067967Z","shell.execute_reply":"2021-05-11T14:45:30.067396Z"},"papermill":{"duration":1.743594,"end_time":"2021-05-11T14:45:30.068086","exception":false,"start_time":"2021-05-11T14:45:28.324492","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"osm_roads_np = rasterize_osm(osm_roads, cube.B02)","visibility":"show","key":"hCEpIfbQDd"},{"type":"output","id":"mzgUtLSA2i-Pa2otPsR5P","data":[{"name":"stderr","output_type":"stream","text":"<ipython-input-6-00aa5324d1df>:94: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  raster_osm = raster_osm.astype(np.float)\n"}],"visibility":"show","key":"AoxeFRWy3v"}],"visibility":"show","key":"aE09T9YxDr"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.044736,"end_time":"2021-05-11T14:45:30.158551","exception":false,"start_time":"2021-05-11T14:45:30.113815","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mask","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xyedlSzYxw"}],"identifier":"mask","label":"Mask","html_id":"mask","implicit":true,"key":"AjUP1WskbN"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In case there are clouds in the imagery, they are masked out here. Furthermore, the data is constrained to the OSM roads.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YZtq5BMoDF"}],"key":"vz9tkqD0bG"}],"visibility":"show","key":"QxL8EIx4EW"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.044792,"end_time":"2021-05-11T14:45:30.248490","exception":false,"start_time":"2021-05-11T14:45:30.203698","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Clouds","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lSbkDgaGH5"}],"identifier":"clouds","label":"Clouds","html_id":"clouds","implicit":true,"key":"vYFNlGKwH0"}],"visibility":"show","key":"v1VOdiG6V6"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:45:30.349405Z","iopub.status.busy":"2021-05-11T14:45:30.348825Z","iopub.status.idle":"2021-05-11T14:45:30.497221Z","shell.execute_reply":"2021-05-11T14:45:30.496627Z"},"papermill":{"duration":0.202367,"end_time":"2021-05-11T14:45:30.497336","exception":false,"start_time":"2021-05-11T14:45:30.294969","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.mask_clouds()","visibility":"show","key":"Z5YVYCfiXC"},{"type":"output","id":"UuVa6Cqs7hRojDSn3hf5a","data":[],"visibility":"show","key":"oKWBdeDfmD"}],"visibility":"show","key":"xKu95bIXH2"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.046414,"end_time":"2021-05-11T14:45:30.589994","exception":false,"start_time":"2021-05-11T14:45:30.543580","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To OSM roads","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"izOBZjrVcx"}],"identifier":"to-osm-roads","label":"To OSM roads","html_id":"to-osm-roads","implicit":true,"key":"Esi5HYW1eC"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Only pixels within the buffered OSM roads are considered.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Q33EbesvAa"}],"key":"HL7VdqTzNI"}],"visibility":"show","key":"gmrhrgcEAF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:45:30.685556Z","iopub.status.busy":"2021-05-11T14:45:30.684998Z","iopub.status.idle":"2021-05-11T14:45:30.835114Z","shell.execute_reply":"2021-05-11T14:45:30.834582Z"},"papermill":{"duration":0.199833,"end_time":"2021-05-11T14:45:30.835299","exception":false,"start_time":"2021-05-11T14:45:30.635466","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.mask_with_osm(osm_roads_np)","visibility":"show","key":"OBM1TYK23v"},{"type":"output","id":"fYHOc5JlmhrnXh_Zpg01r","data":[],"visibility":"show","key":"My8Zr6oBJi"}],"visibility":"show","key":"ZE1rcaZgQV"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.045646,"end_time":"2021-05-11T14:45:30.928130","exception":false,"start_time":"2021-05-11T14:45:30.882484","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Detect trucks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YGJsqmmkzj"}],"identifier":"detect-trucks","label":"Detect trucks","html_id":"detect-trucks","implicit":true,"key":"rQfJ3PURU0"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This is the actual detection being invoked in the “do_detection” wrapper. The output is an xarray DataArray, which is afterwards converted to a GeoDataFrame of points.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"bUD5SAweR3"}],"key":"WcUI676z9a"}],"visibility":"show","key":"st6J7ISICf"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:45:31.048103Z","iopub.status.busy":"2021-05-11T14:45:31.042600Z","iopub.status.idle":"2021-05-11T14:46:19.674650Z","shell.execute_reply":"2021-05-11T14:46:19.675042Z"},"papermill":{"duration":48.70081,"end_time":"2021-05-11T14:46:19.675266","exception":false,"start_time":"2021-05-11T14:45:30.974456","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"acquisition.do_detection()\n# raster detections to points\ntruck_points = raster_to_points(acquisition.detector.trucks.values, {\"lon\":cube.lon.values, \"lat\":cube.lat.values}, \"trucks\", \"EPSG:4326\")\ntruck_points.plot(figsize=[12,10])","visibility":"show","key":"vFwPPuvYue"},{"type":"output","id":"VcPa6n0lBnio8uFuPjR75","data":[{"name":"stderr","output_type":"stream","text":"<ipython-input-7-916cb7c1a86e>:19: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nDeprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n  self.trucks = xr.DataArray(trucks, coords=lon_lat, dims=(\"lat\", \"lon\")).astype(np.int)\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"9fb78da59c102b50bb91c070a0c70e5c","path":"/build/9fb78da59c102b50bb91c070a0c70e5c.png"},"text/plain":{"content":"<Figure size 864x720 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"cPK4c2tGUI"}],"visibility":"show","key":"K6B9yHzU53"},{"type":"block","kind":"notebook-content","data":{"papermill":{"duration":0.053156,"end_time":"2021-05-11T14:46:19.775669","exception":false,"start_time":"2021-05-11T14:46:19.722513","status":"completed"},"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Write detections","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VOqNBvvQkm"}],"identifier":"write-detections","label":"Write detections","html_id":"write-detections","implicit":true,"key":"S3wuZg3M58"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"If you would like to write the truck points, simply modify the file path here","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cE9GLsF5xf"}],"key":"DtsgfmbSHv"}],"visibility":"show","key":"uPcH1VxgTG"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2021-05-11T14:46:19.873331Z","iopub.status.busy":"2021-05-11T14:46:19.872630Z","iopub.status.idle":"2021-05-11T14:46:19.907612Z","shell.execute_reply":"2021-05-11T14:46:19.907087Z"},"papermill":{"duration":0.086424,"end_time":"2021-05-11T14:46:19.907735","exception":false,"start_time":"2021-05-11T14:46:19.821311","status":"completed"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"truck_points.to_file(\"trucks.gpkg\", driver=\"GPKG\")","visibility":"show","key":"owYhgxMAns"},{"type":"output","id":"FORQ3Nd7RDeUPCxpV3yss","data":[],"visibility":"show","key":"rVA4xXUnPt"}],"visibility":"show","key":"O4nkPgtcUQ"}],"key":"xdpbEQ1EvF"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Cmems Data Download","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/cmems-data-download","group":"Contributions"},"next":{"title":"Drought impact monitoring platform","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/drought-monitoring","group":"Contributions"}}},"domain":"http://localhost:3000"}