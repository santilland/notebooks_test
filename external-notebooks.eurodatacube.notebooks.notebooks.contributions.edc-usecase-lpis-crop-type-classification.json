{"version":1,"kind":"Notebook","sha256":"7a5f7b46e8127befb37ff22ff5812be44199094178b8593cfb1c95bb62d9a2de","slug":"external-notebooks.eurodatacube.notebooks.notebooks.contributions.edc-usecase-lpis-crop-type-classification","location":"/external_notebooks/eurodatacube/notebooks/notebooks/contributions/EDC_Usecase-LPIS_Crop-Type-Classification.ipynb","dependencies":[],"frontmatter":{"title":"Important notes","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"github":"https://github.com/eoxhub-workspaces/documentation/","numbering":{"title":{"offset":5}},"edit_url":"https://github.com/eoxhub-workspaces/documentation//blob/main/external_notebooks/eurodatacube/notebooks/notebooks/contributions/EDC_Usecase-LPIS_Crop-Type-Classification.ipynb","exports":[{"format":"ipynb","filename":"EDC_Usecase-LPIS_Crop-Type-Classification.ipynb","url":"/notebooks_test/build/EDC_Usecase-LPIS_Cro-8a4c3dd6bdfaec3a702db67225ecf0a4.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from edc import setup_environment_variables\nsetup_environment_variables()","key":"WVkHgsGgYK"},{"type":"output","id":"OvkQdECzyBH-V5OwvopIy","data":[{"output_type":"display_data","metadata":{},"data":{"text/markdown":{"content":"API credentials have automatically been injected for your active subscriptions.  \nThe following environment variables are now available:\n* `SH_CLIENT_NAME`\n* `SH_CLIENT_SECRET`\n* `SH_INSTANCE_ID`\n* `SH_CLIENT_ID`\n\nThe following additional environment variables have been loaded from `~/custom.env`:\n* `REFERENCE_DATA`\n* `AWS_BUCKET`\n* `OGC_EDC_URL`\n* `DB_HOST`\n* `DB_NAME`\n* `DB_USER`\n* `DB_PASSWORD`\n------\n","content_type":"text/markdown"},"text/plain":{"content":"<IPython.core.display.Markdown object>","content_type":"text/plain"}}}],"key":"J70uHyWDq6"}],"key":"zIIbDyaFsg"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Important notes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OkS5xwV8l5"}],"identifier":"important-notes","label":"Important notes","html_id":"important-notes","implicit":true,"key":"cYwF10yB8O"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This notebook requires:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"F0vLhHcj2F"}],"key":"Chcc0VXNwE"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"POSTGIS database (with access information exposed as environment variables) having sample LPIS data ingested -> please find further information ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p7IcljfyKe"},{"type":"link","url":"https://github.com/eurodatacube/notebooks/tree/master/artifacts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b4USQ7s5Dy"}],"urlSource":"https://github.com/eurodatacube/notebooks/tree/master/artifacts","error":true,"key":"WXM4ZLa6Dq"}],"key":"xOHCqxdOSv"}],"key":"MumCiXajW6"}],"key":"PiNES4kDSS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"LPIS Use case: Crop-type classification (AUT)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"o4HQDP7mQP"}],"identifier":"lpis-use-case-crop-type-classification-aut","label":"LPIS Use case: Crop-type classification (AUT)","html_id":"lpis-use-case-crop-type-classification-aut","implicit":true,"key":"DVLdt01r8W"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook demonstrates how Euro Data Cube (EDC) tools can be utilized for exploratory analysis and manipulation of data in Land Parcel Identification System (LPIS). The most important part is the example of using satellite imagery and machine learning algorithms for crop type classification, which should be a valuable support for decisions related with LPIS controls.\nThe described workflow consists of several parts:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HVcUPyODxP"}],"key":"tceNahW7uc"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Prepare and explore LPIS data and satellite imagery","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"bnTbwGFBqQ"}],"key":"EWqJksp2Em"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Run Machine Learning and create a model for crop type classification","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wmIFP568vy"}],"key":"DdEQECe2an"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Visualize results and extract information to support LPIS controls","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"K8bMcKyKe8"}],"key":"pknuzs6aGT"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Classify on parcel level per LPIS ID","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"jwgjBuIB7l"}],"key":"SJgLjtMGq4"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Persist results in database","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"cl4YoCqd6f"}],"key":"ohK07kEbCw"}],"key":"Lac07DuCDO"}],"key":"HjvjcYuZBb"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# This notebook uses the EO-Learn ML library which requires configuration passed via the 'sentinel.config' tool\n!sentinelhub.config --sh_base_url 'https://services.sentinel-hub.com'\n!sentinelhub.config --sh_client_id $SH_CLIENT_ID\n!sentinelhub.config --sh_client_secret $SH_CLIENT_SECRET\n!sentinelhub.config --instance_id $SH_INSTANCE_ID","key":"QE6ui1CeoV"},{"type":"output","id":"gvZVpLmo0XNsC7H-7vy95","data":[],"key":"QLNWBjSXq9"}],"key":"gkOeQewNQ9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# see section Important Notes above\nimport os\ndb_conn_params = {\n    'host': os.getenv('DB_HOST'),\n    'database': os.getenv('DB_NAME'),\n    'user': os.getenv('DB_USER'),\n    'password': os.getenv('DB_PASSWORD')\n}","key":"o5Wv4KBf9U"},{"type":"output","id":"BzDKpYU9CaBu9zaXmORgZ","data":[],"key":"x71o4mtEOr"}],"key":"I1vsr86VSZ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import packages","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"id2kzXG0zj"}],"identifier":"import-packages","label":"Import packages","html_id":"import-packages","implicit":true,"key":"zewSXFb2OG"}],"key":"p1vARdXRkw"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Jupyter notebook related\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n# Built-in modules\nimport pickle\nimport sys\nimport datetime\nimport time\nimport itertools\nimport math\nimport subprocess\nimport fiona\nimport fiona.crs\nfrom enum import Enum\n\n# Basics of Python data handling and visualization\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nfrom shapely.geometry import Polygon\nfrom tqdm import tqdm_notebook as tqdm\n\n# Machine learning \nimport lightgbm as lgb\nfrom sklearn.externals import joblib\nfrom sklearn import metrics\nfrom sklearn import preprocessing\n\n# Imports from eo-learn and sentinelhub-py\nfrom eolearn.core import EOTask, EOPatch, LinearWorkflow, FeatureType, OverwritePermission, \\\n    LoadTask, SaveTask, EOExecutor\nfrom eolearn.core.core_tasks import AddFeature\nfrom eolearn.io import S2L1CWCSInput, ExportToTiff\nfrom eolearn.mask import AddCloudMaskTask, get_s2_pixel_cloud_detector, AddValidDataMaskTask\nfrom eolearn.geometry import VectorToRaster, PointSamplingTask, ErosionTask\nfrom eolearn.features import LinearInterpolation, SimpleFilterTask\nfrom sentinelhub import BBoxSplitter, BBox, CRS, CustomUrlParam, UtmGridSplitter\n\n# OAuth2\nfrom oauthlib.oauth2 import BackendApplicationClient\nfrom requests_oauthlib import OAuth2Session\n\n# DB and raw geometry\nimport psycopg2\nfrom psycopg2._psycopg import AsIs\nfrom psycopg2.extensions import register_adapter\nimport shapely.wkt\nfrom shapely.geometry import Polygon, MultiPolygon\nfrom geopandas import GeoDataFrame\n\n\n# imports for xcube\nimport xarray as xr\nfrom shapely.ops import cascaded_union\n\nfrom xcube_sh.cube import open_cube\nfrom xcube_sh.observers import Observers\nfrom xcube_sh.config import CubeConfig\n\nfrom xcube.core.geom import mask_dataset_by_geometry\n\n# Amazon S3\nimport boto3","key":"Fa2qpKCq7j"},{"type":"output","id":"TSQZ4AHjp0V_XswMy9M_5","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/xcube_sh/cube.py:22: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\n  from collections import Callable\n/opt/conda/lib/python3.7/site-packages/xcube_sh/store.py:26: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working\n  from collections import MutableMapping\n"}],"key":"R8z1OHElzo"}],"key":"KgAIu7q2NR"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Database loading and mapping functionality","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WG6klu6f7K"}],"identifier":"database-loading-and-mapping-functionality","label":"Database loading and mapping functionality","html_id":"database-loading-and-mapping-functionality","implicit":true,"key":"xt8mzQbwb8"}],"key":"N0XfM5vzt7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"## mapping of crop type groups into 24 classes that are to be predicted\n\n# AT: vector to raster needs uint8 values \nctToctnuml4aMapping = {\n    1: [1010], #SOMMERGETREIDE\n    2: [1020], #WINTERGETREIDE\n    3: [1030], #MENGGETREIDE_AEHNLICHES\n    4: [1040], #MAIS_AEHNLICHES\n    5: [1050], #SOMMERRAPS_AEHNLICHES\n    6: [1060], #WINTERRAPS_AEHNLICHES\n    7: [1070], #SONNENBLUME\n    8: [1080], #HANF\n    9: [1090], #LEGUMINOSEN_AEHNLICHES\n    10: [1100], #WINTERLEGUMINOSE\n    11: [1110], #KARTOFFELN_AEHNLICHES\n    12: [1120], #RUEBEN\n    13: [1130], #GEMUESE_AEHNLICHES\n    14: [1140], #GEWUERZE_AEHNLICHES\n    15: [1150], #WINTERGEWUERZE_AEHNLICHES   \n    16: [1160], #KUERBIS\n    17: [1170], #BRACHE\n    18: [1180], #DAUERKULTUR\n    19: [1190], #GEWAECHSHAUS\n    20: [1200], #WEIN\n    21: [1210], #GRUENLAND\n    22: [1220], #PRO_RATA\n    23: [1230], #LAGERFLAECHEN\n    24: [1240] #SONSTIGES\n}\nctnuml4aToctMapping = {ctnuml4a: ctid for ctid, ctnuml4aList in ctToctnuml4aMapping.items() for ctnuml4a in ctnuml4aList}\n\n# needed for DB mapping\nregister_adapter(np.int64, AsIs)\nregister_adapter(Polygon, AsIs)\nregister_adapter(MultiPolygon, AsIs)\n\ndef loadFromDatabase(db_conn, taskName, tableName, bbox, dateFilterMin, dateFilterMax, mappedColumnName = None, mappingLambdaFunc = None):\n    columns = [\"ogd_id\", \"ctnuml4a\", \"geometry\"]\n    geometries = []\n\n    if (mappedColumnName and mappingLambdaFunc):\n        columns.append(mappedColumnName)\n    \n    with db_conn.cursor() as cur:\n        sql = '''\n            SELECT ogd_id, ctnuml4a, ST_AsText(ST_Transform(geometry, {targetCrs})) \n            FROM {tableName}\n            WHERE ST_Intersects(geometry, ST_Transform(ST_GeomFromText('{bbox}', {targetCrs}), 31287))\n                AND ref_date >= '{dateFilterMin}' AND ref_date <= '{dateFilterMax}'\n            '''\n        \n        sql = sql.format(tableName = tableName, targetCrs = bbox.crs.value, \n            dateFilterMin = dateFilterMin, dateFilterMax = dateFilterMax,\n            bbox = bbox.geometry.wkt)\n        #print(sql)\n\n        cur.execute(sql)\n        for row in cur:\n            properties = {\"ogd_id\": row[0], \"ctnuml4a_id\": row[1]}\n            if (mappedColumnName and mappingLambdaFunc):\n                properties[mappedColumnName] = mappingLambdaFunc(row[1])\n\n            geometry = shapely.wkt.loads(row[2]);\n            geometries.append({\"geometry\": geometry, \"properties\": properties})\n        print(taskName + \": \" + str(len(geometries)) + ' DB records for bbox = ' + str(bbox) + ' ' + str(bbox.crs.value))        \n        crs = {\"init\": \"epsg:{}\".format(bbox.crs.value)}\n        gdf = GeoDataFrame.from_features(geometries, crs = crs, columns = columns)\n        return gdf","key":"nW6Kbmptl8"},{"type":"output","id":"vErSgDaTLo01tZ-kq-bVN","data":[],"key":"aayq6map2g"}],"key":"LFk0TuJdN5"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 1: Exploratory Analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cfTanfdNHc"}],"identifier":"part-1-exploratory-analysis","label":"Part 1: Exploratory Analysis","html_id":"part-1-exploratory-analysis","implicit":true,"key":"aMnBo8tiIY"},{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Define the Area-of-Interest (AOI):","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kznAHIdPNV"}],"identifier":"define-the-area-of-interest-aoi","label":"Define the Area-of-Interest (AOI):","html_id":"define-the-area-of-interest-aoi","implicit":true,"key":"IZOSQCKYfA"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The whole territory of a country is splited into patches which makes the processing more efficient. The process is run on are of 3x3 patches for demonstration purposes.  AOI can be selected as the id of the patch in the middle.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"x2DBcf2DJa"}],"key":"TfpyKZcvl4"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Main steps in this part of the notebook:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nIBSBRR92i"}],"key":"vjyiLb5R1i"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Load a geographical shape of Austria","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"jl9dtHNFOJ"}],"key":"QIcQiW59NR"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Convert it to selected CRS: taken to be the CRS of central UTM tile (UTM_33N)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"JF3PDGIOCa"}],"key":"vqv6Dft1bJ"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Split it into smaller, manageable, non-overlapping rectangular tiles (patches)","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"T9qwygt632"}],"key":"HQcbjFUqTx"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Select a small 3x3 area for classification","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"iUR6qDUUqU"}],"key":"k1Q6QUXv1I"}],"key":"bLn4SlrGF0"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Be sure that your choice of CRS is the same as the CRS of your reference data.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"w3qKh74s8O"}],"key":"FN4eOqhQqn"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"In the case that you are having problems with empty data being downloaded, try changing the CRS to something that suits the location of the AOI better.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"NLXOOjaus6"}],"key":"onsEh0y12A"}],"key":"njjZOdS0n8"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Folder where data for running the notebook is stored\nDATA_FOLDER = os.path.join('example_data')\n\n# Load geojson file containing the outline of the country\ncountry = gpd.read_file(os.path.join(DATA_FOLDER, 'at_not_buffered.geojson'))\n\n# Convert CRS to UTM_33N\ncountry_crs = CRS.UTM_33N\ncountry = country.to_crs(crs={'init': CRS.ogc_string(country_crs)})\n\n# Get the country's shape in polygon format\ncountry_shape = country.geometry.values[-1]\n\n# Define bounds and select middle patch ID\nuse_smaller_patches = True\n\nID = 13311 if use_smaller_patches else 1606\n\nbounds = [15.5242, 48.7574, 15.5391, 48.7698]  if use_smaller_patches else [15.4191, 48.653, 15.7335, 48.8102]\n\nbbox_splitter_large = BBoxSplitter([country_shape], country_crs, (25 * 3, 17 * 3))\nbbox_splitter_small = BBoxSplitter([country_shape], country_crs, (25 * 9, 17 * 9))\n\nbbox_splitter = bbox_splitter_small if use_smaller_patches else bbox_splitter_large\nbbox_list_aligned = [BBox((10 * math.floor(bbox.min_x / 10), 10 * math.floor(bbox.min_y / 10), \n                           10 * math.floor(bbox.max_x / 10), 10 * math.floor(bbox.max_y / 10)), country_crs) \n                     for bbox in bbox_splitter.get_bbox_list()]\n\nbbox_list = np.array(bbox_list_aligned)\ninfo_list = np.array(bbox_splitter.get_info_list())\n\nall_patches_gdf = gpd.GeoDataFrame(\n    {\n        \"index_x\": [info['index_x'] for info in info_list],\n        \"index_y\": [info['index_y'] for info in info_list],\n    },\n    crs={'init': CRS.ogc_string(country_crs)},\n    geometry=[Polygon(bbox.get_polygon()) for bbox in bbox_list]\n)","key":"gqOzRVapVV"},{"type":"output","id":"vTeF8GaX8PlBDsGtlOJGy","data":[],"key":"a5n7ugo4Kr"}],"key":"ksIa5yMbk4"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Obtain surrounding patches\npatchIDs = []\nfor idx, [bbox, info] in enumerate(zip(bbox_list, info_list)):\n    if (abs(info['index_x'] - info_list[ID]['index_x']) <= 1 and\n        abs(info['index_y'] - info_list[ID]['index_y']) <= 1):\n        patchIDs.append(idx)\n\n# Check if final size is 3x3\nif len(patchIDs) != 9:\n    print('Warning! Use a different central patch ID, this one is on the border.')\n    \n# Change the order of the patches (used for plotting later)\npatchIDs = np.transpose(np.fliplr(np.array(patchIDs).reshape(3, 3))).ravel()\n    \n# Prepare info of selected EOPatches\ngeometry = [Polygon(bbox.get_polygon()) for bbox in bbox_list[patchIDs]]\nidxs_x = [info['index_x'] for info in info_list[patchIDs]]\nidxs_y = [info['index_y'] for info in info_list[patchIDs]]\n\ngdf = gpd.GeoDataFrame({'index_x': idxs_x, 'index_y': idxs_y}, \n                       crs={'init': CRS.ogc_string(country_crs)}, \n                       geometry=geometry)\n\n# save to shapefile\nshapefile_name = './selected_3x3_bboxes_at_small.shp' if use_smaller_patches \\\n    else './selected_3x3_bboxes_at_large.shp'\ngdf.to_file(shapefile_name)\n\n# Visualize the selection\npoly = gdf['geometry'][0]\nx1, y1, x2, y2 = poly.bounds\naspect_ratio = (y1 - y2) / (x1 - x2)\n\nfontdict = {'family': 'monospace', 'weight': 'normal', 'size': 11}\n\n# if bboxes have all same size, estimate offset\nxl, yl, xu, yu = gdf.geometry[0].bounds\nxoff, yoff = (xu - xl) / 3, (yu - yl) / 5\n\n# figure\nfig, ax = plt.subplots(figsize=(20, 20));\ngdf.plot(ax=ax,facecolor='w',edgecolor='r',alpha=0.5);\ncountry.plot(ax=ax, facecolor='w',edgecolor='b',alpha=0.5);\nax.set_title('Selected 3x3 patches within the border of Austria');\nplt.axis('off');","key":"heKJswLqn8"},{"type":"output","id":"n2_W4zRmAkefc4MhLyENJ","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"69ed8651d431e96cb283a99227826b73","path":"/notebooks_test/build/69ed8651d431e96cb283a99227826b73.png"},"text/plain":{"content":"<Figure size 1440x1440 with 1 Axes>","content_type":"text/plain"}}}],"key":"y2yb4fQ3Hj"}],"key":"yevRa2Fvev"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Rearange selected EOPatches into bbox, which can be used for xcube definition\npatches_geometries = [Polygon(bbox.transform(CRS.WGS84).get_polygon()) for bbox in bbox_list[patchIDs]]\nbbox_of_patches = gpd.GeoSeries(cascaded_union(patches_geometries))\n\nx1 = bbox_of_patches.bounds['minx'][0].item()\ny1 = bbox_of_patches.bounds['miny'][0].item()\nx2 = bbox_of_patches.bounds['maxx'][0].item()\ny2 = bbox_of_patches.bounds['maxy'][0].item()\nbbox_wgs84 = x1, y1, x2, y2","key":"FanUhu4XUy"},{"type":"output","id":"pAps_V8wjaeO7KqiYcmzR","data":[],"key":"BLEKDKvArk"}],"key":"PYZECAlyeU"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"## Plot time series of satellite images for bbox\nx1, y1, x2, y2 = bbox\nspatial_res_meters = 10\npixx = (x2-x1)/spatial_res_meters; pixy = (y2-y1)/spatial_res_meters;\nx1, y1, x2, y2 = bbox_wgs84\nspatial_res = float(np.mean([(x2-x1)/pixx, (y2-y1)/pixy]))\n\ncube_config = CubeConfig(dataset_name='S2L1C',\n                         band_names=[\"B02\", \"B03\", \"B04\", \"B08\", \"B11\", \"B12\"],\n                         chunk_size=[512, 512],\n                         geometry=bbox_wgs84,\n                         spatial_res=spatial_res,\n                         time_range=['2018-01-01', '2018-09-30'],\n                         time_period='4D')  \n\n# So we can print some SentinelHub usage stats\nrequest_collector = Observers.request_collector()\ncube = open_cube(cube_config, request_collector)\n\n# Add Indecies\n## NDVI\nb_red = cube.B04\nb_nir = cube.B08\nndvi = (b_nir - b_red) / (b_nir + b_red)\nndvi.attrs['long_name'] = 'Normalized Difference Vegetation Index'\nndvi.attrs['units'] = 'unitless'\ncube[\"ndvi\"] = ndvi\n\n## NDWI\nb_green = cube.B03\nb_nir = cube.B08\nndwi = (b_green - b_nir) / (b_green + b_nir)\nndwi.attrs['long_name'] = 'Normalized Difference Water Index'\nndwi.attrs['units'] = 'unitless'\ncube[\"ndwi\"] = ndwi\n\ncube.time","key":"f2nYO0L9Tz"},{"type":"output","id":"bky3RA5PWlGr5GrV72ony","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/xcube_sh/store.py:73: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n  t_array = np.array([s + 0.5 * (e - s) for s, e in self._time_ranges]).astype('datetime64[s]').astype(np.int64)\n/opt/conda/lib/python3.7/site-packages/xcube_sh/store.py:74: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n  t_bnds_array = np.array(self._time_ranges).astype('datetime64[s]').astype(np.int64)\n"},{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/html":{"content":"<pre>&lt;xarray.DataArray &#x27;time&#x27; (time: 69)&gt;\narray([&#x27;2018-01-03T00:00:00.000000000&#x27;, &#x27;2018-01-07T00:00:00.000000000&#x27;,\n       &#x27;2018-01-11T00:00:00.000000000&#x27;, &#x27;2018-01-15T00:00:00.000000000&#x27;,\n       &#x27;2018-01-19T00:00:00.000000000&#x27;, &#x27;2018-01-23T00:00:00.000000000&#x27;,\n       &#x27;2018-01-27T00:00:00.000000000&#x27;, &#x27;2018-01-31T00:00:00.000000000&#x27;,\n       &#x27;2018-02-04T00:00:00.000000000&#x27;, &#x27;2018-02-08T00:00:00.000000000&#x27;,\n       &#x27;2018-02-12T00:00:00.000000000&#x27;, &#x27;2018-02-16T00:00:00.000000000&#x27;,\n       &#x27;2018-02-20T00:00:00.000000000&#x27;, &#x27;2018-02-24T00:00:00.000000000&#x27;,\n       &#x27;2018-02-28T00:00:00.000000000&#x27;, &#x27;2018-03-04T00:00:00.000000000&#x27;,\n       &#x27;2018-03-08T00:00:00.000000000&#x27;, &#x27;2018-03-12T00:00:00.000000000&#x27;,\n       &#x27;2018-03-16T00:00:00.000000000&#x27;, &#x27;2018-03-20T00:00:00.000000000&#x27;,\n       &#x27;2018-03-24T00:00:00.000000000&#x27;, &#x27;2018-03-28T00:00:00.000000000&#x27;,\n       &#x27;2018-04-01T00:00:00.000000000&#x27;, &#x27;2018-04-05T00:00:00.000000000&#x27;,\n       &#x27;2018-04-09T00:00:00.000000000&#x27;, &#x27;2018-04-13T00:00:00.000000000&#x27;,\n       &#x27;2018-04-17T00:00:00.000000000&#x27;, &#x27;2018-04-21T00:00:00.000000000&#x27;,\n       &#x27;2018-04-25T00:00:00.000000000&#x27;, &#x27;2018-04-29T00:00:00.000000000&#x27;,\n       &#x27;2018-05-03T00:00:00.000000000&#x27;, &#x27;2018-05-07T00:00:00.000000000&#x27;,\n       &#x27;2018-05-11T00:00:00.000000000&#x27;, &#x27;2018-05-15T00:00:00.000000000&#x27;,\n       &#x27;2018-05-19T00:00:00.000000000&#x27;, &#x27;2018-05-23T00:00:00.000000000&#x27;,\n       &#x27;2018-05-27T00:00:00.000000000&#x27;, &#x27;2018-05-31T00:00:00.000000000&#x27;,\n       &#x27;2018-06-04T00:00:00.000000000&#x27;, &#x27;2018-06-08T00:00:00.000000000&#x27;,\n       &#x27;2018-06-12T00:00:00.000000000&#x27;, &#x27;2018-06-16T00:00:00.000000000&#x27;,\n       &#x27;2018-06-20T00:00:00.000000000&#x27;, &#x27;2018-06-24T00:00:00.000000000&#x27;,\n       &#x27;2018-06-28T00:00:00.000000000&#x27;, &#x27;2018-07-02T00:00:00.000000000&#x27;,\n       &#x27;2018-07-06T00:00:00.000000000&#x27;, &#x27;2018-07-10T00:00:00.000000000&#x27;,\n       &#x27;2018-07-14T00:00:00.000000000&#x27;, &#x27;2018-07-18T00:00:00.000000000&#x27;,\n       &#x27;2018-07-22T00:00:00.000000000&#x27;, &#x27;2018-07-26T00:00:00.000000000&#x27;,\n       &#x27;2018-07-30T00:00:00.000000000&#x27;, &#x27;2018-08-03T00:00:00.000000000&#x27;,\n       &#x27;2018-08-07T00:00:00.000000000&#x27;, &#x27;2018-08-11T00:00:00.000000000&#x27;,\n       &#x27;2018-08-15T00:00:00.000000000&#x27;, &#x27;2018-08-19T00:00:00.000000000&#x27;,\n       &#x27;2018-08-23T00:00:00.000000000&#x27;, &#x27;2018-08-27T00:00:00.000000000&#x27;,\n       &#x27;2018-08-31T00:00:00.000000000&#x27;, &#x27;2018-09-04T00:00:00.000000000&#x27;,\n       &#x27;2018-09-08T00:00:00.000000000&#x27;, &#x27;2018-09-12T00:00:00.000000000&#x27;,\n       &#x27;2018-09-16T00:00:00.000000000&#x27;, &#x27;2018-09-20T00:00:00.000000000&#x27;,\n       &#x27;2018-09-24T00:00:00.000000000&#x27;, &#x27;2018-09-28T00:00:00.000000000&#x27;,\n       &#x27;2018-10-02T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)\nCoordinates:\n  * time     (time) datetime64[ns] 2018-01-03 2018-01-07 ... 2018-10-02\nAttributes:\n    standard_name:  time\n    bounds:         time_bnds</pre>","content_type":"text/html"},"text/plain":{"content":"<xarray.DataArray 'time' (time: 69)>\narray(['2018-01-03T00:00:00.000000000', '2018-01-07T00:00:00.000000000',\n       '2018-01-11T00:00:00.000000000', '2018-01-15T00:00:00.000000000',\n       '2018-01-19T00:00:00.000000000', '2018-01-23T00:00:00.000000000',\n       '2018-01-27T00:00:00.000000000', '2018-01-31T00:00:00.000000000',\n       '2018-02-04T00:00:00.000000000', '2018-02-08T00:00:00.000000000',\n       '2018-02-12T00:00:00.000000000', '2018-02-16T00:00:00.000000000',\n       '2018-02-20T00:00:00.000000000', '2018-02-24T00:00:00.000000000',\n       '2018-02-28T00:00:00.000000000', '2018-03-04T00:00:00.000000000',\n       '2018-03-08T00:00:00.000000000', '2018-03-12T00:00:00.000000000',\n       '2018-03-16T00:00:00.000000000', '2018-03-20T00:00:00.000000000',\n       '2018-03-24T00:00:00.000000000', '2018-03-28T00:00:00.000000000',\n       '2018-04-01T00:00:00.000000000', '2018-04-05T00:00:00.000000000',\n       '2018-04-09T00:00:00.000000000', '2018-04-13T00:00:00.000000000',\n       '2018-04-17T00:00:00.000000000', '2018-04-21T00:00:00.000000000',\n       '2018-04-25T00:00:00.000000000', '2018-04-29T00:00:00.000000000',\n       '2018-05-03T00:00:00.000000000', '2018-05-07T00:00:00.000000000',\n       '2018-05-11T00:00:00.000000000', '2018-05-15T00:00:00.000000000',\n       '2018-05-19T00:00:00.000000000', '2018-05-23T00:00:00.000000000',\n       '2018-05-27T00:00:00.000000000', '2018-05-31T00:00:00.000000000',\n       '2018-06-04T00:00:00.000000000', '2018-06-08T00:00:00.000000000',\n       '2018-06-12T00:00:00.000000000', '2018-06-16T00:00:00.000000000',\n       '2018-06-20T00:00:00.000000000', '2018-06-24T00:00:00.000000000',\n       '2018-06-28T00:00:00.000000000', '2018-07-02T00:00:00.000000000',\n       '2018-07-06T00:00:00.000000000', '2018-07-10T00:00:00.000000000',\n       '2018-07-14T00:00:00.000000000', '2018-07-18T00:00:00.000000000',\n       '2018-07-22T00:00:00.000000000', '2018-07-26T00:00:00.000000000',\n       '2018-07-30T00:00:00.000000000', '2018-08-03T00:00:00.000000000',\n       '2018-08-07T00:00:00.000000000', '2018-08-11T00:00:00.000000000',\n       '2018-08-15T00:00:00.000000000', '2018-08-19T00:00:00.000000000',\n       '2018-08-23T00:00:00.000000000', '2018-08-27T00:00:00.000000000',\n       '2018-08-31T00:00:00.000000000', '2018-09-04T00:00:00.000000000',\n       '2018-09-08T00:00:00.000000000', '2018-09-12T00:00:00.000000000',\n       '2018-09-16T00:00:00.000000000', '2018-09-20T00:00:00.000000000',\n       '2018-09-24T00:00:00.000000000', '2018-09-28T00:00:00.000000000',\n       '2018-10-02T00:00:00.000000000'], dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 2018-01-03 2018-01-07 ... 2018-10-02\nAttributes:\n    standard_name:  time\n    bounds:         time_bnds","content_type":"text/plain"}}}],"key":"rwsSI3RcJr"}],"key":"jsbgjs01u7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"selected_time = '2018-08-03' #User's input. Must be a value in cube.time\n\n# True color image\n\nfactor = 2.5\nR = cube.B04.sel(time=selected_time)*factor\nG = cube.B03.sel(time=selected_time)*factor\nB = cube.B02.sel(time=selected_time)*factor\nRGB = np.dstack([R, G, B])\nrgb_array = xr.DataArray(RGB, dims=('lat', 'lon', 'b'), coords=dict(lat=cube.B04.lat, lon=cube.B04.lon))\nrgb_array.plot.imshow(rgb='b', figsize=(16, 16))","key":"YjeTEcNZq0"},{"type":"output","id":"lesRVettoj4Fag60j6nK-","data":[{"name":"stderr","output_type":"stream","text":"Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"2f36ca2e36531dc736bea3d7cfd06609","path":"/notebooks_test/build/2f36ca2e36531dc736bea3d7cfd06609.png"},"text/plain":{"content":"<Figure size 1152x1152 with 1 Axes>","content_type":"text/plain"}}}],"key":"bi5aV5BV0S"}],"key":"BwxwCqWCPH"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 2: Crop Type prediction with Machine Learning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rLsrwcDIHQ"}],"identifier":"part-2-crop-type-prediction-with-machine-learning","label":"Part 2: Crop Type prediction with Machine Learning","html_id":"part-2-crop-type-prediction-with-machine-learning","implicit":true,"key":"dTVvw0FTLp"}],"key":"IlVAi8uZVq"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Set some of the inputs for prediction with ML","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GbNQ74L9or"}],"identifier":"set-some-of-the-inputs-for-prediction-with-ml","label":"Set some of the inputs for prediction with ML","html_id":"set-some-of-the-inputs-for-prediction-with-ml","implicit":true,"key":"NO311xA3Mw"}],"key":"rnvVQvPqla"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"selected_date_for_reference_data = '2018-06-30'\nselected_date_interval_for_satellite_imagery = ['2018-01-01', '2018-09-30']\nselected_max_cc = 0.8","key":"vxQYqPpBYo"},{"type":"output","id":"c9F_xSfy0iFU6HQxC-buF","data":[],"key":"jd31RfuaQi"}],"key":"DGDcpeXZUZ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Fill EOPatches with data:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VY2AYxz7KF"}],"identifier":"fill-eopatches-with-data","label":"Fill EOPatches with data:","html_id":"fill-eopatches-with-data","implicit":true,"key":"VFAUtBApfY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now it’s time to create EOPatches and fill them with Sentinel-2 data using Sentinel Hub services. We will add the following data to each EOPatch:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Lba0E3Qyr5"}],"key":"XCmGIOUeN3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"L1C custom list of bands [B02, B03, B04, B08, B11, B12], which corresponds to [B, G, R, NIR, SWIR1, SWIR2] wavelengths.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YijCUxTx42"}],"key":"W8WSn8GSOh"}],"key":"FS9R8tWtki"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"SentinelHub’s cloud probability map and cloud mask","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"SoazeFt7lp"}],"key":"o6e8WXbKzJ"}],"key":"o569AJuKlj"}],"key":"UPHw7buudR"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Additionally, we will add:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"tZwNQlchJu"}],"key":"uH2McS5mO5"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Calculated NDVI, NDWI, euclidean NORM information","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"fEywEcqqw7"}],"key":"O9J1lLP2GO"}],"key":"s0q3zCVhuu"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"A mask of validity, based on acquired data from Sentinel and cloud coverage. Valid pixel is if:","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"TtUcr6SGXX"}],"key":"LJpImigLHI"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"IS_DATA == True","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"bgrwrExA40"}],"key":"HYYpfsod54"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"CLOUD_MASK == 0 (1 indicates that pixel was identified to be covered with cloud)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ix3EddX8ex"}],"key":"D7bQKvF69U"}],"key":"sxr5JfeRk3"}],"key":"IZSTo4qFmi"}],"key":"sGnpwrSfYo"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"An EOPatch is created and manipulated using EOTasks, which are chained in an EOWorkflow. In this example the final workflow is executed on all patches, which are saved to the specified directory.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"XWEHm1dEXn"}],"key":"Zv7Usl2edN"}],"key":"vCvpBWF5zH"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define some needed custom EOTasks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sMbGt5N8O3"}],"identifier":"define-some-needed-custom-eotasks","label":"Define some needed custom EOTasks","html_id":"define-some-needed-custom-eotasks","implicit":true,"key":"xwYOGj3afd"}],"key":"YSGbyr4pGQ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class SentinelHubValidData:\n    \"\"\"\n    Combine Sen2Cor's classification map with `IS_DATA` to define a `VALID_DATA_SH` mask\n    The SentinelHub's cloud mask is asumed to be found in eopatch.mask['CLM']\n    \"\"\"\n    def __call__(self, eopatch):        \n        return np.logical_and(eopatch.mask['IS_DATA'].astype(np.bool), \n                              np.logical_not(eopatch.mask['CLM'].astype(np.bool)))\n    \nclass CountValid(EOTask):   \n    \"\"\"\n    The task counts number of valid observations in time-series and stores the results in the timeless mask.\n    \"\"\"\n    def __init__(self, count_what, feature_name):\n        self.what = count_what\n        self.name = feature_name\n        \n    def execute(self, eopatch):\n        eopatch.add_feature(FeatureType.MASK_TIMELESS, self.name, np.count_nonzero(eopatch.mask[self.what],axis=0))\n        \n        return eopatch\n\n\nclass NormalizedDifferenceIndex(EOTask):   \n    \"\"\"\n    The tasks calculates user defined Normalised Difference Index (NDI) between two bands A and B as:\n    NDI = (A-B)/(A+B).\n    \"\"\"\n    def __init__(self, feature_name, band_a, band_b):\n        self.feature_name = feature_name\n        self.band_a_fetaure_name = band_a.split('/')[0]\n        self.band_b_fetaure_name = band_b.split('/')[0]\n        self.band_a_fetaure_idx = int(band_a.split('/')[-1])\n        self.band_b_fetaure_idx = int(band_b.split('/')[-1])\n        \n    def execute(self, eopatch):\n        band_a = eopatch.data[self.band_a_fetaure_name][..., self.band_a_fetaure_idx]\n        band_b = eopatch.data[self.band_b_fetaure_name][..., self.band_b_fetaure_idx]\n        \n        ndi = (band_a - band_b) / (band_a  + band_b)\n        \n        eopatch.add_feature(FeatureType.DATA, self.feature_name, ndi[..., np.newaxis])\n        \n        return eopatch\n\n    \nclass EuclideanNorm(EOTask):   \n    \"\"\"\n    The tasks calculates Euclidian Norm of all bands within an array:\n    norm = sqrt(sum_i Bi**2),\n    where Bi are the individual bands within user-specified feature array.\n    \"\"\"\n    def __init__(self, feature_name, in_feature_name):\n        self.feature_name = feature_name\n        self.in_feature_name = in_feature_name\n    \n    def execute(self, eopatch):\n        arr = eopatch.data[self.in_feature_name]\n        norm = np.sqrt(np.sum(arr**2, axis=-1))\n        \n        eopatch.add_feature(FeatureType.DATA, self.feature_name, norm[..., np.newaxis])\n        return eopatch","key":"DLJrOamojI"},{"type":"output","id":"S6s3iQkGsfGBm-UNkV8MC","data":[],"key":"FDnB6GmmLb"}],"key":"x10YvCQsSR"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the workflow tasks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FqTnn8MUve"}],"identifier":"define-the-workflow-tasks","label":"Define the workflow tasks","html_id":"define-the-workflow-tasks","implicit":true,"key":"vna92TRYf9"}],"key":"j02fbqo9W9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# TASK FOR BAND DATA\n# add a request for B(B02), G(B03), R(B04), NIR (B08), SWIR1(B11), SWIR2(B12) \n# from default layer 'ALL_BANDS' at 10m resolution\n# Here we also do a simple filter of cloudy scenes. A detailed cloud cover \n# detection is performed in the next step\ncustom_script = 'return [B02, B03, B04, B08, B11, B12];'\nadd_data = S2L1CWCSInput(\n    layer='BANDS-S2-L1C', \n    feature=(FeatureType.DATA, 'BANDS'), # save under name 'BANDS'\n    custom_url_params={CustomUrlParam.EVALSCRIPT: custom_script}, # custom url for 6 specific bands\n    resx='10m', # resolution x\n    resy='10m', # resolution y\n    maxcc=selected_max_cc # maximum allowed cloud cover of original ESA tiles\n)\n\n# TASK FOR CLOUD INFO\n# cloud detection is performed at 80m resolution \n# and the resulting cloud probability map and mask \n# are scaled to EOPatch's resolution\ncloud_classifier = get_s2_pixel_cloud_detector(average_over=2, dilation_size=1, all_bands=False)\nadd_clm = AddCloudMaskTask(cloud_classifier, 'BANDS-S2CLOUDLESS', cm_size_y='80m', cm_size_x='80m', \n                           cmask_feature='CLM', # cloud mask name\n                           cprobs_feature='CLP' # cloud prob. map name\n                          )\n\n# TASKS FOR CALCULATING NEW FEATURES\n# NDVI: (B08 - B04)/(B08 + B04)\n# NDWI: (B03 - B08)/(B03 + B08)\n# NORM: sqrt(B02^2 + B03^2 + B04^2 + B08^2 + B11^2 + B12^2)\nndvi = NormalizedDifferenceIndex('NDVI', 'BANDS/3', 'BANDS/2')\nndwi = NormalizedDifferenceIndex('NDWI', 'BANDS/1', 'BANDS/3')\nnorm = EuclideanNorm('NORM','BANDS')\n\n# TASK FOR VALID MASK\n# validate pixels using SentinelHub's cloud detection mask and region of acquisition \nadd_sh_valmask = AddValidDataMaskTask(SentinelHubValidData(), \n                                      'IS_VALID' # name of output mask\n                                     )\n\n# TASK FOR COUNTING VALID PIXELS\n# count number of valid observations per pixel using valid data mask \ncount_val_sh = CountValid('IS_VALID', # name of existing mask\n                          'VALID_COUNT' # name of output scalar\n                         )\n\n# TASK FOR SAVING TO OUTPUT (if needed)\npath_out = './eopatches_small' if use_smaller_patches else './eopatches_large'\nif not os.path.isdir(path_out):\n    os.makedirs(path_out)\nsave = SaveTask(path_out, overwrite_permission=OverwritePermission.OVERWRITE_PATCH)","key":"fdM0P08UUo"},{"type":"output","id":"qKLQhchib7Vm2iNwzJ-cW","data":[],"key":"x6eSNYgDF8"}],"key":"Ed2vMzjjqO"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Reference map task","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XoRuVhgHiZ"}],"identifier":"reference-map-task","label":"Reference map task","html_id":"reference-map-task","implicit":true,"key":"aSHVlTHXPL"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"For this example the LPIS Data from the austrian Open Government Data portal ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ONBQ1KttNq"},{"type":"link","url":"http://data.gv.at","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data.gv.at","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"u97IA7Yza6"}],"urlSource":"http://data.gv.at","key":"m48WMaQEqt"},{"type":"text","value":" is used: ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IsYj1UoOhG"},{"type":"link","url":"https://www.data.gv.at/katalog/dataset/e21a731f-9e08-4dd3-b9e5-cd460438a5d9","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"INVEKOS Schläge Österreich","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p8nCYd2cpj"}],"urlSource":"https://www.data.gv.at/katalog/dataset/e21a731f-9e08-4dd3-b9e5-cd460438a5d9","key":"PcvAMd4Nwd"},{"type":"text","value":"\nThe crop types are grouped into 23 groups for classification:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AVeEAqHCYI"}],"key":"H7VHzjPgmi"}],"key":"KXb5dDT0FP"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class CTGROUPS(Enum):\n    NO_DATA                   = (0, \"NO_DATA\", \"#ffffff\")\n    SOMMERGETREIDE            = (1, \"SOMMERGETREIDE\", \"#7bf500\")\n    WINTERGETREIDE            = (2, \"WINTERGETREIDE\", \"#a8ff2b\")\n    MENGGETREIDE_AEHNLICHES   = (3, \"MENGGETREIDE_AEHNLICHES\", \"#daff1f\")\n    MAIS_AEHNLICHES           = (4, \"MAIS_AEHNLICHES\", \"#fff200\")\n    SOMMERRAPS_AEHNLICHES     = (5, \"SOMMERRAPS_AEHNLICHES\", \"#ffd701\")\n    WINTERRAPS_AEHNLICHES     = (6, \"WINTERRAPS_AEHNLICHES\", \"#ffbc0c\")\n    SONNENBLUME               = (7, \"SONNENBLUME\", \"#ff7005\")\n    HANF                      = (8, \"HANF\", \"#ff2a00\")\n    LEGUMINOSEN_AEHNLICHES    = (9, \"LEGUMINOSEN_AEHNLICHES\", \"#ff0046\")\n    WINTERLEGUMINOSE          = (10, \"WINTERLEGUMINOSE\", \"#ff00f8\")\n    KARTOFFELN_AEHNLICHES     = (11, \"KARTOFFELN_AEHNLICHES\", \"#b325ff\")\n    RUEBEN                    = (12, \"RUEBEN\", \"#cd61f4\")\n    GEMUESE_AEHNLICHES        = (13, \"GEMUESE_AEHNLICHES\", \"#ef96f1\")\n    GEWUERZE_AEHNLICHES       = (14, \"GEWUERZE_AEHNLICHES\", \"#f6c9f7\")\n    WINTERGEWUERZE_AEHNLICHES = (15, \"WINTERGEWUERZE_AEHNLICHES\", \"#000080\")\n    KUERBIS                   = (16, \"KUERBIS\", \"#004821\")\n    BRACHE                    = (17, \"BRACHE\", \"#00288a\")\n    DAUERKULTUR               = (18, \"DAUERKULTUR\", \"#0046ff\")\n    GEWAECHSHAUS              = (19, \"GEWAECHSHAUS\", \"#00c5ff\")\n    WEIN                      = (20, \"WEIN\", \"#00f6f8\")\n    GRUENLAND                 = (21, \"GRUENLAND\", \"#26ef00\")\n    PRO_RATA                  = (22, \"PRO_RATA\", \"#67d400\")\n    LAGERFLAECHEN             = (23, \"LAGERFLAECHEN\", \"#aaaaaa\")\n    SONSTIGES                 = (24, \"SONSTIGES\", \"#555555\")\n\n    \n    def __init__(self, val1, val2, val3):\n        self.id = val1\n        self.class_name = val2\n        self.color = val3\n\n\n#Reference colormap things\nct_cmap = mpl.colors.ListedColormap([entry.color for entry in CTGROUPS])\nct_norm = mpl.colors.BoundaryNorm(np.arange(-0.5, 24, 1), ct_cmap.N)","key":"IMAVKbPOPn"},{"type":"output","id":"1VEASDE6dLBWC4anJsSEZ","data":[],"key":"yqFdYB8dwt"}],"key":"TSFigAEwNW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The main point of this task is to create a raster mask from the vector polygons and add it to the eopatch. With this procedure, any kind of a labeled shapefile can be transformed into a raster reference map. This result is achieved with the existing task ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gduuzfkzrg"},{"type":"inlineCode","value":"VectorToRaster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XQqcRcYqOp"},{"type":"text","value":" from the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Wvz7dmOG3j"},{"type":"inlineCode","value":"eolearn.geometry","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hb2dxoYUcu"},{"type":"text","value":" package. All polygons belonging to the each of the classes are separately burned to the raster mask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZuWD0KgFgF"}],"key":"k4Npk9uKP4"}],"key":"WVUkn7qi14"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# user param\nLPISRecordsDateMin = selected_date_for_reference_data \nLPISRecordsDateMax = selected_date_for_reference_data\n\nclass LoadFromDatabaseTask(EOTask):\n    def __init__(self, feature, taskName, crs, tableName, dateFilterMin, dateFilterMax, mappedColumnName = None, mappingLambdaFunc = None):\n        self.feature_type, self.feature_name = next(self._parse_features(feature)())\n        self.taskName = taskName\n        self.crs = crs\n        self.tableName = tableName\n        self.dateFilterMin = dateFilterMin\n        self.dateFilterMax = dateFilterMax\n        self.mappedColumnName = mappedColumnName\n        self.mappingLambdaFunc = mappingLambdaFunc\n\n    def execute(self, eopatch, db_conn):\n        eopatch[self.feature_type][self.feature_name] = loadFromDatabase(db_conn, \n            self.taskName, self.tableName, eopatch.bbox, \n            self.dateFilterMin, self.dateFilterMax, \n            self.mappedColumnName, self.mappingLambdaFunc)\n        return eopatch\n    \n\n# LPIS\nct_use_db_task = LoadFromDatabaseTask((FeatureType.VECTOR_TIMELESS, 'CROP_TYPE_GDF'), \n    \"crop type\", CRS.UTM_33N, \"lpis_at\", LPISRecordsDateMin, LPISRecordsDateMax, \n    \"ct\", lambda ct_id: ctnuml4aToctMapping[ct_id] if ct_id in ctnuml4aToctMapping else 0)\n\n\nct_rasterization_task = VectorToRaster((FeatureType.VECTOR_TIMELESS, 'CROP_TYPE_GDF'), (FeatureType.MASK_TIMELESS, 'CROP_TYPE'),\n    values_column='ct', raster_shape=(FeatureType.MASK, 'IS_VALID'),\n    raster_dtype=np.uint8)\n\nct_export_tiff = ExportToTiff((FeatureType.MASK_TIMELESS, 'CROP_TYPE'))","key":"w7PMTeyues"},{"type":"output","id":"E53jGsmbRMh8PeB9nGQOy","data":[],"key":"mBtcoIZpor"}],"key":"u4ljt1Woy1"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aMA9qtA62S"}],"identifier":"define-the-workflow","label":"Define the workflow","html_id":"define-the-workflow","implicit":true,"key":"ne4CHKufij"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"All the tasks that were defined so far create and fill the EOPatches. The tasks need to be put in some order and executed one by one. This can be achieved by manually executing the tasks, or more conveniently, defining an ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IQVHMgpS3e"},{"type":"inlineCode","value":"EOWorkflow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FKpCpMcHcA"},{"type":"text","value":" which does this for you.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZCBiqnmCJK"}],"key":"XKz71Xq96e"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The following workflow is created and executed:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jNscf5svaW"}],"key":"g1NANEDKWD"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Create EOPatches with band data","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jvJnf4dKva"}],"key":"sRYO7PupiQ"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Add cloud info","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IhD5CzWi9u"}],"key":"TDPsl2JWzo"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Calculate and add NDVI, NDWI, NORM","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Ade5uBc6wZ"}],"key":"f9TZOq6QMo"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Add mask of valid pixels","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"oeWFaP2d3i"}],"key":"eGmD71LOat"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Add scalar feature representing the cound of valid pixels","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"T6rmFVz9gb"}],"key":"EUFdsoGgUM"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Save eopatches","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Bf302nN2fA"}],"key":"SkngwRjcen"}],"key":"Mp0geTEQvy"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"An EOWorkflow can be linear or more complex, but it should be acyclic. Here we will use the linear case of the EOWorkflow, available as ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ex8LR3fVai"},{"type":"inlineCode","value":"LinearWorkflow","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Y0ayk1t15T"}],"key":"LtZzGXE4hw"}],"key":"rnAx8Y7uJu"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sDCpZ6VmwW"}],"key":"MPPTb0mh9B"}],"key":"sW5xUvrmwP"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the workflow\nworkflow = LinearWorkflow(\n    add_data,\n    add_clm,\n    ndvi,\n    ndwi,\n    norm,\n    add_sh_valmask,\n    count_val_sh,\n    ct_use_db_task,\n    ct_rasterization_task,\n    ct_export_tiff,\n    save\n)\n\n# Let's visualize it\nworkflow.dependency_graph()","key":"FdCJhGyleu"},{"type":"output","id":"zri-QQ4E5F11uk0iLNJx6","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"image/svg+xml":{"content":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.42.3 (20191010.1750)\n -->\n<!-- Title: %3 Pages: 1 -->\n<svg width=\"2183pt\" height=\"44pt\"\n viewBox=\"0.00 0.00 2182.64 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<title>%3</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-40 2178.64,-40 2178.64,4 -4,4\"/>\n<!-- S2L1CWCSInput -->\n<g id=\"node1\" class=\"node\">\n<title>S2L1CWCSInput</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"78.64\" cy=\"-18\" rx=\"78.79\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"78.64\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">S2L1CWCSInput</text>\n</g>\n<!-- AddCloudMaskTask -->\n<g id=\"node2\" class=\"node\">\n<title>AddCloudMaskTask</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"282.33\" cy=\"-18\" rx=\"89.08\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"282.33\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">AddCloudMaskTask</text>\n</g>\n<!-- S2L1CWCSInput&#45;&gt;AddCloudMaskTask -->\n<g id=\"edge1\" class=\"edge\">\n<title>S2L1CWCSInput&#45;&gt;AddCloudMaskTask</title>\n<path fill=\"none\" stroke=\"black\" d=\"M157.33,-18C165.79,-18 174.47,-18 183.13,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"183.26,-21.5 193.26,-18 183.26,-14.5 183.26,-21.5\"/>\n</g>\n<!-- NormalizedDifferenceIndex -->\n<g id=\"node3\" class=\"node\">\n<title>NormalizedDifferenceIndex</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"521.76\" cy=\"-18\" rx=\"114.28\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"521.76\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">NormalizedDifferenceIndex</text>\n</g>\n<!-- AddCloudMaskTask&#45;&gt;NormalizedDifferenceIndex -->\n<g id=\"edge2\" class=\"edge\">\n<title>AddCloudMaskTask&#45;&gt;NormalizedDifferenceIndex</title>\n<path fill=\"none\" stroke=\"black\" d=\"M371.4,-18C379.75,-18 388.31,-18 396.91,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"397.02,-21.5 407.02,-18 397.02,-14.5 397.02,-21.5\"/>\n</g>\n<!-- NormalizedDifferenceIndex_1 -->\n<g id=\"node4\" class=\"node\">\n<title>NormalizedDifferenceIndex_1</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"796.29\" cy=\"-18\" rx=\"124.28\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"796.29\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">NormalizedDifferenceIndex_1</text>\n</g>\n<!-- NormalizedDifferenceIndex&#45;&gt;NormalizedDifferenceIndex_1 -->\n<g id=\"edge3\" class=\"edge\">\n<title>NormalizedDifferenceIndex&#45;&gt;NormalizedDifferenceIndex_1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M636.36,-18C644.67,-18 653.09,-18 661.5,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"661.75,-21.5 671.75,-18 661.75,-14.5 661.75,-21.5\"/>\n</g>\n<!-- EuclideanNorm -->\n<g id=\"node5\" class=\"node\">\n<title>EuclideanNorm</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1025.97\" cy=\"-18\" rx=\"69.59\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1025.97\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">EuclideanNorm</text>\n</g>\n<!-- NormalizedDifferenceIndex_1&#45;&gt;EuclideanNorm -->\n<g id=\"edge4\" class=\"edge\">\n<title>NormalizedDifferenceIndex_1&#45;&gt;EuclideanNorm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M920.46,-18C929.18,-18 937.82,-18 946.18,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"946.23,-21.5 956.23,-18 946.23,-14.5 946.23,-21.5\"/>\n</g>\n<!-- AddValidDataMaskTask -->\n<g id=\"node6\" class=\"node\">\n<title>AddValidDataMaskTask</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1233.56\" cy=\"-18\" rx=\"102.08\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1233.56\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">AddValidDataMaskTask</text>\n</g>\n<!-- EuclideanNorm&#45;&gt;AddValidDataMaskTask -->\n<g id=\"edge5\" class=\"edge\">\n<title>EuclideanNorm&#45;&gt;AddValidDataMaskTask</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1095.71,-18C1103.94,-18 1112.49,-18 1121.12,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1121.27,-21.5 1131.27,-18 1121.27,-14.5 1121.27,-21.5\"/>\n</g>\n<!-- CountValid -->\n<g id=\"node7\" class=\"node\">\n<title>CountValid</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1425.54\" cy=\"-18\" rx=\"53.89\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1425.54\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">CountValid</text>\n</g>\n<!-- AddValidDataMaskTask&#45;&gt;CountValid -->\n<g id=\"edge6\" class=\"edge\">\n<title>AddValidDataMaskTask&#45;&gt;CountValid</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1335.67,-18C1344.27,-18 1352.8,-18 1360.98,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1361.13,-21.5 1371.13,-18 1361.13,-14.5 1361.13,-21.5\"/>\n</g>\n<!-- LoadFromDatabaseTask -->\n<g id=\"node8\" class=\"node\">\n<title>LoadFromDatabaseTask</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1616.88\" cy=\"-18\" rx=\"101.28\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1616.88\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">LoadFromDatabaseTask</text>\n</g>\n<!-- CountValid&#45;&gt;LoadFromDatabaseTask -->\n<g id=\"edge7\" class=\"edge\">\n<title>CountValid&#45;&gt;LoadFromDatabaseTask</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1479.54,-18C1487.72,-18 1496.43,-18 1505.33,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1505.44,-21.5 1515.44,-18 1505.44,-14.5 1505.44,-21.5\"/>\n</g>\n<!-- VectorToRaster -->\n<g id=\"node9\" class=\"node\">\n<title>VectorToRaster</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1821.86\" cy=\"-18\" rx=\"67.69\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1821.86\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">VectorToRaster</text>\n</g>\n<!-- LoadFromDatabaseTask&#45;&gt;VectorToRaster -->\n<g id=\"edge8\" class=\"edge\">\n<title>LoadFromDatabaseTask&#45;&gt;VectorToRaster</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1718.48,-18C1727.06,-18 1735.64,-18 1743.99,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1744.04,-21.5 1754.04,-18 1744.04,-14.5 1744.04,-21.5\"/>\n</g>\n<!-- ExportToTiff -->\n<g id=\"node10\" class=\"node\">\n<title>ExportToTiff</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"1985.9\" cy=\"-18\" rx=\"60.39\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"1985.9\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">ExportToTiff</text>\n</g>\n<!-- VectorToRaster&#45;&gt;ExportToTiff -->\n<g id=\"edge9\" class=\"edge\">\n<title>VectorToRaster&#45;&gt;ExportToTiff</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1889.71,-18C1898.07,-18 1906.65,-18 1915.06,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1915.21,-21.5 1925.21,-18 1915.21,-14.5 1915.21,-21.5\"/>\n</g>\n<!-- SaveTask -->\n<g id=\"node11\" class=\"node\">\n<title>SaveTask</title>\n<ellipse fill=\"none\" stroke=\"black\" cx=\"2128.49\" cy=\"-18\" rx=\"46.29\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"2128.49\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\">SaveTask</text>\n</g>\n<!-- ExportToTiff&#45;&gt;SaveTask -->\n<g id=\"edge10\" class=\"edge\">\n<title>ExportToTiff&#45;&gt;SaveTask</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2046.53,-18C2055.04,-18 2063.77,-18 2072.19,-18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2072.28,-21.5 2082.28,-18 2072.28,-14.5 2072.28,-21.5\"/>\n</g>\n</g>\n</svg>\n","content_type":"image/svg+xml"},"text/plain":{"content":"<graphviz.dot.Digraph at 0x7f066027e290>","content_type":"text/plain"}}}],"key":"TDQWD4xdqV"}],"key":"o0g1pXFPSn"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This may take some time, so go grab a cup of coffee ...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E6XwqywpsF"}],"key":"HMpwplytG6"}],"key":"ID9Gny03JO"}],"key":"eBoo7W148Z"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n\n# Execute the workflow\n\nsource_tiff_location = './source_tiff'\nif not os.path.isdir(source_tiff_location):\n    os.makedirs(source_tiff_location)\n\n# define additional parameters of the workflow\nwith psycopg2.connect(**db_conn_params) as db_conn: # must use single DB connection for all the tasks\n    execution_args = []\n    for idx, bbox in enumerate(bbox_list[patchIDs]):       \n        execution_args.append({\n            add_data: {'bbox': bbox, 'time_interval': selected_date_interval_for_satellite_imagery},\n            ct_use_db_task: {'db_conn': db_conn},\n            ct_export_tiff: {'filename': '{}/crop_type_eopatch_{}_original.tiff'.format(source_tiff_location, idx)},\n            save: {'eopatch_folder': 'eopatch_{}'.format(idx)}\n        })\n\nexecutor = EOExecutor(workflow, execution_args, save_logs=True)\nexecutor.run(workers=9, multiprocess=False)\n\nexecutor.make_report()","key":"pICCGjYTAM"},{"type":"output","id":"2s4Vav6atrJV8biZ6TPh0","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"5936511d02c44528a8b3e6de6b120ab0\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"crop type: 224 DB records for bbox = 538530.0,5400680.0,541080.0,5402600.0 32633\ncrop type: 301 DB records for bbox = 538530.0,5398760.0,541080.0,5400680.0 32633\ncrop type: 384 DB records for bbox = 533420.0,5400680.0,535980.0,5402600.0 32633\ncrop type: 259 DB records for bbox = 535980.0,5400680.0,538530.0,5402600.0 32633\ncrop type: 82 DB records for bbox = 533420.0,5396840.0,535980.0,5398760.0 32633\ncrop type: 500 DB records for bbox = 535980.0,5396840.0,538530.0,5398760.0 32633\ncrop type: 436 DB records for bbox = 535980.0,5398760.0,538530.0,5400680.0 32633\ncrop type: 456 DB records for bbox = 533420.0,5398760.0,535980.0,5400680.0 32633\ncrop type: 137 DB records for bbox = 538530.0,5396840.0,541080.0,5398760.0 32633\n\nCPU times: user 41 s, sys: 9.51 s, total: 50.5 s\nWall time: 46.9 s\n"}],"key":"DWnFz2Dt1K"}],"key":"snR9F0VDfm"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this case, all patches come from a small region, so all of them have the same dates of acquisition for at least a few dates, so we can inspect the area without interpolation at this point.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qiCgev9PSn"}],"key":"vpUeFuwDYg"}],"key":"ScxPBCA3nF"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the true color image","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dHZXSWfGPW"}],"identifier":"visualize-the-true-color-image","label":"Visualize the true color image","html_id":"visualize-the-true-color-image","implicit":true,"key":"Ln3QN8ont4"}],"key":"HHtlMHEUXL"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Draw the RGB image\npath_out = './eopatches_small' if use_smaller_patches else './eopatches_large/'\nfig = plt.figure(figsize=(20, 20 * aspect_ratio))\n\npbar = tqdm(total=9)\nfor i in range(9):\n    eopatch = EOPatch.load('{}/eopatch_{}'.format(path_out, i), lazy_loading=True)\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(np.clip(eopatch.data['BANDS'][0][..., [2, 1, 0]] * 3.5, 0, 1))\n    plt.xticks([])\n    plt.yticks([])\n    ax.set_aspect(\"auto\")\n    pbar.update(1)\n    del eopatch\n\nfig.subplots_adjust(wspace=0, hspace=0)","key":"YjJcwZcesr"},{"type":"output","id":"2BLXDjHrAaIzvz5vzWaCa","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:5: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\nPlease use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n  \"\"\"\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"8ffafeaef5894e769dc8fbe2520caf31\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a3fb404b0e5ea7b09d7d94008dc3aa76","path":"/notebooks_test/build/a3fb404b0e5ea7b09d7d94008dc3aa76.png"},"text/plain":{"content":"<Figure size 1440x1080 with 9 Axes>","content_type":"text/plain"}}}],"key":"PuzJIEx6CB"}],"key":"JgrTiOdOPG"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize the reference map","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yg1SgBmevn"}],"identifier":"visualize-the-reference-map","label":"Visualize the reference map","html_id":"visualize-the-reference-map","implicit":true,"key":"jdyfVsZLY3"}],"key":"rJaXwndzei"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"path_out = './eopatches_small/' if use_smaller_patches else './eopatches_large/'\n\nfig, axes = plt.subplots(figsize=(20, 20 * aspect_ratio), nrows=3, ncols=3)\n\npbar = tqdm(total=9)\nfor i, ax in enumerate(axes.flat):\n    eopatch = EOPatch.load('{}/eopatch_{}'.format(path_out, i), lazy_loading=True)\n    im = ax.imshow(eopatch.mask_timeless['CROP_TYPE'].squeeze(), cmap=ct_cmap, norm=ct_norm)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_aspect(\"auto\")\n    pbar.update(1)\n    del eopatch\n\nfig.subplots_adjust(wspace=0, hspace=0)\n\ncb = fig.colorbar(im, ax=axes.ravel().tolist(), orientation='horizontal', pad=0.01, aspect=100)\ncb.ax.tick_params(labelsize=20) \ncb.set_ticks([entry.id for entry in CTGROUPS])\ncb.ax.set_xticklabels([entry.class_name for entry in CTGROUPS], rotation=90, fontsize=15)\nplt.show()","key":"fPvT91JYEb"},{"type":"output","id":"ThswtHHnapx9LYlii3Lx-","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:5: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\nPlease use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n  \"\"\"\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"76ac0ef0a5ec4bb28a1bdb6e2e4e75a0\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"97e41be4c58473da8345ac351956f209","path":"/notebooks_test/build/97e41be4c58473da8345ac351956f209.png"},"text/plain":{"content":"<Figure size 1440x1080 with 10 Axes>","content_type":"text/plain"}}}],"key":"SbLwCEnK4c"}],"key":"cynyPLnzIi"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare the training data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cVKOmTU7ue"}],"identifier":"prepare-the-training-data","label":"Prepare the training data","html_id":"prepare-the-training-data","implicit":true,"key":"sgyoOCKehh"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We will create a new workflow that processes the data:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tsOBbmlaI6"}],"key":"pYOkIMPRTF"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Remove too cloudy scenes","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QizW3zo2gM"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Check the ratio of the valid data for each patch and for each time frame","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VGDWl9Sefj"}],"key":"B8Uvqhq3Hc"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Keep only time frames with > 80 % valid coverage (no clouds)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"xgoyqSzW26"}],"key":"wgyt7Iw1Hv"}],"key":"FL9oGlVUyB"}],"key":"RTK8yXi6as"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Concatenate BAND, NDVI, NDWI, NORM info into a single feature called FEATURES","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JUJvQRzsGf"}],"key":"XGtLwKrVnS"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Perform temporal interpolation (filling gaps and resampling to the same dates)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"tAHsFnOGkI"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Create a task for linear interpolation in the temporal dimension","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"njd5PRWPNs"}],"key":"QpImVc4bWi"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Provide the cloud mask to tell the interpolating function which values to update","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Ny1Uv3wqQb"}],"key":"P1ScWhKOtS"}],"key":"OkA9ufdWAd"}],"key":"mhyYzV7HCs"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Perform erosion","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Xvsj47catz"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"This removes artefacts with a width of 1 px, and also removes the edges between polygons of different classes","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"NPK6WRqEjy"}],"key":"D46V2FqcVI"}],"key":"xcHz5K0Ut2"}],"key":"NTWjEh0ajp"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Random spatial sampling of the EOPatches","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ul7AIiiNjR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Randomly take a subset of pixels from a patch to use in the machine learning training","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"ni6zNifLwF"}],"key":"hDWQWtqcMK"}],"key":"I9t5r2Mwqb"}],"key":"hR5g389s2N"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Split patches for training/validation","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"adJFTveA8e"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Split the patches into a training and validation set","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"meJ8hrpvTu"}],"key":"ZB1tYiaOEU"}],"key":"b5hvSQkute"}],"key":"t2TJcXG9LJ"}],"key":"U8WHzK5Zfw"}],"key":"t7bMjMkdl9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define EOTasks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vNsK33fzej"}],"identifier":"define-eotasks","label":"Define EOTasks","html_id":"define-eotasks","implicit":true,"key":"zbGfYPYJ0G"}],"key":"JqtR3PrimN"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class ConcatenateData(EOTask):\n    \"\"\" Task to concatenate data arrays along the last dimension\n    \"\"\"\n    def __init__(self, feature_name, feature_names_to_concatenate):\n        self.feature_name = feature_name\n        self.feature_names_to_concatenate = feature_names_to_concatenate\n\n    def execute(self, eopatch):\n        arrays = [eopatch.data[name] for name in self.feature_names_to_concatenate]\n\n        eopatch.add_feature(FeatureType.DATA, self.feature_name, np.concatenate(arrays, axis=-1))\n\n        return eopatch\n    \n    \nclass ValidDataFractionPredicate:\n    \"\"\" Predicate that defines if a frame from EOPatch's time-series is valid or not. Frame is valid, if the \n    valid data fraction is above the specified threshold.\n    \"\"\"\n    def __init__(self, threshold):\n        self.threshold = threshold\n        \n    def __call__(self, array):\n        coverage = np.sum(array.astype(np.uint8)) / np.prod(array.shape)\n        return coverage > self.threshold\n    \n# TASK TO LOAD EXISTING EOPATCHES\nload = LoadTask(path_out)\n\n# TASK FOR CONCATENATION\nconcatenate = ConcatenateData('FEATURES', ['BANDS', 'NDVI', 'NDWI', 'NORM'])\n\n# TASK FOR FILTERING OUT TOO CLOUDY SCENES\n# keep frames with > 80 % valid coverage\nvalid_data_predicate = ValidDataFractionPredicate(0.8)\nfilter_task = SimpleFilterTask((FeatureType.MASK, 'IS_VALID'), valid_data_predicate)\n\n# TASK FOR LINEAR INTERPOLATION\n# linear interpolation of full time-series and date resampling\nselected_date_interval_for_interpolation = selected_date_interval_for_satellite_imagery + [16] \n# TODO: replace fixed number of times with fixed time difference\n#resampled_range = tuple(selected_date_interval_for_satellite_imagery)\nresampled_range = (\n    selected_date_interval_for_interpolation[0].replace(\"-\", \"\"),\n    selected_date_interval_for_interpolation[1].replace(\"-\", \"\"),\n    selected_date_interval_for_interpolation[2]\n)\nlinear_interp = LinearInterpolation(\n    'FEATURES', # name of field to interpolate\n    mask_feature=(FeatureType.MASK, 'IS_VALID'), # mask to be used in interpolation\n    copy_features=[(FeatureType.MASK_TIMELESS, 'CROP_TYPE')], # features to keep\n    resample_range=resampled_range, # set the resampling range\n    bounds_error=False # extrapolate with NaN's\n)\n\n# TASK FOR EROSION\n# erode each class of the reference map\nerosion = ErosionTask(mask_feature=(FeatureType.MASK_TIMELESS,'CROP_TYPE','CROP_TYPE_ERODED'), disk_radius=1)\n\n# TASK FOR SPATIAL SAMPLING\n# Uniformly sample about pixels from patches\nn_samples = int(4e4) if use_smaller_patches else int(1e5) # no. of pixels to sample\nref_labels = list(range(11)) # reference labels to take into account when sampling\nspatial_sampling = PointSamplingTask(\n    n_samples=n_samples, \n    ref_mask_feature='CROP_TYPE_ERODED', \n    ref_labels=ref_labels, \n    sample_features=[  # tag fields to sample\n        (FeatureType.DATA, 'FEATURES'),\n        (FeatureType.MASK_TIMELESS, 'CROP_TYPE_ERODED')\n    ])\n\npath_out_sampled = './eopatches_sampled_small/' if use_smaller_patches else './eopatches_sampled_large/'\nif not os.path.isdir(path_out_sampled):\n    os.makedirs(path_out_sampled)\nsave = SaveTask(path_out_sampled, overwrite_permission=OverwritePermission.OVERWRITE_PATCH)\n\n# Define the workflow\nworkflow = LinearWorkflow(\n    load,\n    concatenate,\n    filter_task,\n    linear_interp,\n    erosion,\n    spatial_sampling,\n    save\n)","key":"WkEnfMwGDl"},{"type":"output","id":"e2ouwtIrqZNWz-N6PvxVa","data":[],"key":"TnE009S8n7"}],"key":"pEWX6HhMPV"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Run the EOWorkflow over all EOPatches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QX1WsdGJTI"}],"identifier":"run-the-eoworkflow-over-all-eopatches","label":"Run the EOWorkflow over all EOPatches","html_id":"run-the-eoworkflow-over-all-eopatches","implicit":true,"key":"rMV353WUUV"}],"key":"L7aSK78gSw"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n   \nexecution_args = []\nfor idx in range(len(patchIDs)):\n    execution_args.append({\n        load: {'eopatch_folder': 'eopatch_{}'.format(idx)},\n        save: {'eopatch_folder': 'eopatch_{}'.format(idx)}\n    })\n    \nexecutor = EOExecutor(workflow, execution_args, save_logs=True)\nexecutor.run(workers=1, multiprocess=True)\n\nexecutor.make_report()","key":"enH1Aw6YZB"},{"type":"output","id":"8hCjZQPDJeP08-6XFlt80","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"74388d82f3a6406cb942473abaab77b1\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"\n\nCPU times: user 16.9 s, sys: 3.38 s, total: 20.3 s\nWall time: 56.7 s\n"}],"key":"jgc1kjCVkU"}],"key":"QQ7U8SYGZJ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Model construction and training","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dc20nE76ys"}],"identifier":"model-construction-and-training","label":"Model construction and training","html_id":"model-construction-and-training","implicit":true,"key":"vPlsjyoEQy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The patches are split into a train and test subset, where we take the patch with ID = 1 for testing, since it seems a good representative of the area.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vCDVftALU6"}],"key":"TaHdm4rlQs"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The test sample is hand picked because of the small set of patches, otherwise with a larged overall set, the training and testing patches should be randomly chosen.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eSVaX1PmgE"}],"key":"vHAgvSC8Dg"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The sampled features and labels are loaded and reshaped into ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"tNo5P6jrOU"},{"type":"inlineMath","value":"n \\times m","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>","key":"IcjStLNnzS"},{"type":"text","value":", where ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"JqUBkr5LVm"},{"type":"inlineMath","value":"n","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"yU2N4kjGv6"},{"type":"text","value":" represents the number of training pixels, and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ppPIpgrZt5"},{"type":"inlineMath","value":"m = f \\times t","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mi>f</mi><mo>×</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">m = f \\times t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>","key":"psQF6VsgMq"},{"type":"text","value":" the number of all features, with ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"S4I6mPbJmK"},{"type":"inlineMath","value":"f","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>","key":"xtb8HVFnGZ"},{"type":"text","value":" the size of bands and band combinations (in this example 9) and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"FYfCBx1OlR"},{"type":"inlineMath","value":"t","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>","key":"ueyYvQeWMw"},{"type":"text","value":" the length of the resampled time-series","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VKb9GGNSPQ"}],"key":"fhRx0m295w"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://github.com/Microsoft/LightGBM","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"LightGBM","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"KMqSdGL7cC"}],"urlSource":"https://github.com/Microsoft/LightGBM","error":true,"key":"bkU92kFhnJ"},{"type":"text","value":" is used as a ML model. It is a fast, distributed, high performance gradient boosting framework based on decision tree algorithms, used for many machine learning tasks.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"K0soEQjZ7e"}],"key":"pG43yegouv"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"The default hyper-parameters are used in this example. For more info on parameter tuning, check the ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"achF8qrz9J"},{"type":"link","url":"https://lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"ReadTheDocs","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"mPXmzVp23M"}],"urlSource":"https://lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html","key":"hqU0psgQ94"},{"type":"text","value":" of the package.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"O9lPXmpJ0y"}],"key":"t43GsoOpqV"}],"key":"BWaaFnCnur"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# load sampled eopatches\neopatches = []\npath_out_sampled = './eopatches_sampled_small/' if use_smaller_patches else './eopatches_sampled_large/'\n\nfor i in range(9):\n    eopatches.append(EOPatch.load('{}/eopatch_{}'.format(path_out_sampled, i), lazy_loading=True))    \n\neopatches = np.array(eopatches)","key":"vAydyRa7vA"},{"type":"output","id":"NjDc7LpC3zAZJiIeFaGkq","data":[],"key":"GugMpLZkBH"}],"key":"dcdKaqLzCz"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Definition of the train and test patch IDs\ntrain_ID = [0,2,3,4,5,6,7,8] if use_smaller_patches else [0,1,3,4,5,6,7,8]\ntest_ID = [1] if use_smaller_patches else [2]\n\n# Set the features and the labels for train and test sets\nfeatures_train = np.array([eopatch.data['FEATURES_SAMPLED'] for eopatch in eopatches[train_ID]])\nlabels_train = np.array([eopatch.mask_timeless['CROP_TYPE_ERODED_SAMPLED'] for eopatch in eopatches[train_ID]])\nfeatures_test = np.array([eopatch.data['FEATURES_SAMPLED'] for eopatch in eopatches[test_ID]])\nlabels_test = np.array([eopatch.mask_timeless['CROP_TYPE_ERODED_SAMPLED'] for eopatch in eopatches[test_ID]])\n\n# get shape\np1, t, w, h, f = features_train.shape\np2, t, w, h, f = features_test.shape\np = p1 + p2\n\n# reshape to n x m\nfeatures_train = np.moveaxis(features_train, 1, 3).reshape(p1 * w * h, t * f)\nlabels_train = np.moveaxis(labels_train, 1, 2).reshape(p1 * w * h, 1).squeeze()\nfeatures_test = np.moveaxis(features_test, 1, 3).reshape(p2 * w * h, t * f)\nlabels_test = np.moveaxis(labels_test, 1, 2).reshape(p2 * w * h, 1).squeeze()\n\n# remove points with no reference from training (so we dont train to recognize \"no data\")\nmask_train = labels_train == 0\nfeatures_train = features_train[~mask_train]\nlabels_train = labels_train[~mask_train]\n\n# remove points with no reference from test (so we dont validate on \"no data\", which doesn't make sense)\nmask_test = labels_test == 0\nfeatures_test = features_test[~mask_test]\nlabels_test = labels_test[~mask_test]","key":"KEAX48pvw3"},{"type":"output","id":"Ix-cuIAHLEGcCmocNhkVF","data":[],"key":"fcLD7ICG3B"}],"key":"ZHYvX9AQG7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Set up training classes\nlabels_unique = np.unique(labels_train)","key":"mXk8qdSIkk"},{"type":"output","id":"kU-NpKlYweqUs2qhId_4G","data":[],"key":"Wf1v5KepD5"}],"key":"lmUvnRRjVq"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n\n# Set up training classes\nlabels_unique = np.unique(labels_train)\n\n# Set up the model\nmodel = lgb.LGBMClassifier(\n    objective='multiclass', \n    num_class=len(labels_unique), \n    metric='multi_logloss'\n)\n\n# train the model\nmodel.fit(features_train, labels_train)\n\n# uncomment to save the model\nmodel_base_name = 'model_AT_CT_smaller' if use_smaller_patches else 'model_AT_CT_larger'\njoblib.dump(model, './{}.pkl'.format(model_base_name))","key":"o6m0hLsfT2"},{"type":"output","id":"Ne2zXEsilz9wMK9k5V6DI","data":[{"name":"stdout","output_type":"stream","text":"CPU times: user 2min 44s, sys: 0 ns, total: 2min 44s\nWall time: 1min 6s\n"},{"output_type":"execute_result","execution_count":26,"metadata":{},"data":{"text/plain":{"content":"['./model_AT_CT_smaller.pkl']","content_type":"text/plain"}}}],"key":"Qj7rKnEbl0"}],"key":"QFVyAiIsjj"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Validation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pHrpitifyq"}],"identifier":"validation","label":"Validation","html_id":"validation","implicit":true,"key":"uP6XLchZZ0"}],"key":"AIAd04SdaO"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Validation of the model is a crucial step in data science. All models are wrong, but some are less wrong than others, so model evaluation is important.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DoUIpxZUhF"}],"key":"Mhxd10vpyb"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In order to validate the model, we use the training set to predict the classes, and then compare the predicted set of labels to the “ground truth”.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AWLLNxYuWk"}],"key":"R3oEWJcOYW"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Unfortunately, ground truth in the scope of EO is a term that should be taken lightly. Usually, it is not 100 % reliable due to several reasons:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dNBfTliTXj"}],"key":"Gjx4ZTLLZ1"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Labels are determined at specific time, but crop types change.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"A3CFL11a5K"}],"key":"V3ApDeBAns"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Some classes can have an overlap or similar definitions (","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Lq7eTYlIi4"},{"type":"emphasis","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"part of a continuum, and not discrete distributions","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"b8ssen9b3Z"}],"key":"A5XpYKK5PP"},{"type":"text","value":")","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"nghuEaPO3f"}],"key":"ptYO4FWSa7"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Human error (_mistakes made within the decleration)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"w0OtDO29LP"}],"key":"iIZGBgxAqF"}],"key":"HWi8sEU1NC"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"The validation is performed by evaluating various metrics, such as accuracy, precision, recall, ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"idPNygeveT"},{"type":"inlineMath","value":"F_1","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">F_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"R7gn2VJ9ju"},{"type":"text","value":" score, some of which are nicely described ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"W1Hca3llEW"},{"type":"link","url":"https://medium.com/greyatom/performance-metrics-for-classification-problems-in-machine-learning-part-i-b085d432082b","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"in this blog post","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"fICTXdLp0H"}],"urlSource":"https://medium.com/greyatom/performance-metrics-for-classification-problems-in-machine-learning-part-i-b085d432082b","key":"JNe13mlcbN"}],"key":"GKZRwBJAy6"}],"key":"sdK9RKMuq3"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# uncomment to load the model and replace with your file, usually just correct the date\nmodel_path = './model_AT_CT_smaller.pkl' if use_smaller_patches else './model_AT_CT_larger.pkl'\nmodel = joblib.load(model_path)","key":"ZaBNwnuG6s"},{"type":"output","id":"HVr44RVNbnCR7k6g-SWfX","data":[],"key":"hI2sQZAJpE"}],"key":"vy4GblFK1o"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# predict the test labels\nplabels_test = model.predict(features_test)","key":"WXbqjDbfpf"},{"type":"output","id":"KmXEidE4KMXffzuYZGk3V","data":[],"key":"TUCe0RdBHb"}],"key":"KGqEhWT9wk"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get the overall accuracy (OA) and the weighted ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"duyhjTYZBv"},{"type":"inlineMath","value":"F_1","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">F_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"Hgx9MEyzgJ"},{"type":"text","value":" score","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"abuSSa6z2Z"}],"key":"lVp18vAREJ"}],"key":"Zzi1eYay7N"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"print('Classification accuracy {:.1f}%'.format(100 * metrics.accuracy_score(labels_test, plabels_test)))\nprint('Classification F1-score {:.1f}%'.format(100 * metrics.f1_score(labels_test, plabels_test, average='weighted')))","key":"IUvOUQHiV9"},{"type":"output","id":"mnyHbdMIfnKH-klsKeMtG","data":[{"name":"stdout","output_type":"stream","text":"Classification accuracy 87.8%\nClassification F1-score 89.0%\n"}],"key":"Lc1L5JMGPN"}],"key":"gMifOItafB"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineMath","value":"F_1","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">F_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"CK0IGxJfBN"},{"type":"text","value":" score, precision, and recall for each class separately","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sAbIaBiQ1s"}],"key":"oYJy7Mb52d"}],"key":"m4ruGsTYyx"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"class_labels_test = set(np.unique(labels_test))\nclass_labels_train = set(np.unique(labels_train))\nclass_labels = list(class_labels_test.union(class_labels_train))\nclass_names = [entry.class_name for entry in CTGROUPS]\n\nf1_scores = metrics.f1_score(labels_test, plabels_test, labels=class_labels, average=None)\nrecall = metrics.recall_score(labels_test, plabels_test, labels=class_labels, average=None)\nprecision = metrics.precision_score(labels_test, plabels_test, labels=class_labels, average=None) \n\nprint('             Class              =  F1  | Recall | Precision')\nprint('         --------------------------------------------------')\nfor idx, ct in enumerate([class_names[idx] for idx in class_labels]):\n    print('         * {0:30s} = {1:2.1f} |  {2:2.1f}  | {3:2.1f}'.format(ct, \n                                                                         f1_scores[idx] * 100, \n                                                                         recall[idx] * 100, \n                                                                         precision[idx] * 100))","key":"FrTFjpBanY"},{"type":"output","id":"i_CQWVpU2AvorxEi89rNB","data":[{"name":"stdout","output_type":"stream","text":"             Class              =  F1  | Recall | Precision\n         --------------------------------------------------\n         * SOMMERGETREIDE                 = 68.1 |  56.1  | 86.6\n         * WINTERGETREIDE                 = 95.2 |  93.8  | 96.6\n         * MENGGETREIDE_AEHNLICHES        = 11.8 |  18.7  | 8.7\n         * MAIS_AEHNLICHES                = 93.2 |  96.7  | 90.0\n         * SOMMERRAPS_AEHNLICHES          = 0.0 |  0.0  | 0.0\n         * WINTERRAPS_AEHNLICHES          = 90.1 |  92.6  | 87.7\n         * SONNENBLUME                    = 0.0 |  0.0  | 0.0\n         * LEGUMINOSEN_AEHNLICHES         = 21.1 |  51.2  | 13.3\n         * WINTERLEGUMINOSE               = 0.0 |  0.0  | 0.0\n"}],"key":"AgcfMfq8sY"}],"key":"uHoVFKbrs2"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the standard and transposed Confusion Matrix","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hJSiRlbQOq"}],"identifier":"plot-the-standard-and-transposed-confusion-matrix","label":"Plot the standard and transposed Confusion Matrix","html_id":"plot-the-standard-and-transposed-confusion-matrix","implicit":true,"key":"qNpQ0vW5in"}],"key":"IKlV6L4Rl1"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the plotting function\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues, ylabel='True label', xlabel='Predicted label', filename=None):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    np.set_printoptions(precision=2, suppress=True)\n    \n    if normalize:\n        cm = cm.astype('float') / (cm.sum(axis=1)[:, np.newaxis] + np.finfo(np.float).eps)\n\n        plt.imshow(cm, interpolation='nearest', cmap=cmap, vmin=0, vmax=1)\n    plt.title(title, fontsize=20)\n    # plt.colorbar()\n    tick_marks = np.arange(len(classes)+1)-0.5\n    plt.xticks(tick_marks, classes, rotation=90, fontsize=15)\n    plt.yticks(tick_marks, classes, fontsize=15)\n    \n    \n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\",\n                 fontsize=12)\n\n    plt.tight_layout()\n    plt.ylabel(ylabel, fontsize=15)\n    plt.xlabel(xlabel, fontsize=15)","key":"uhYSmtOVvS"},{"type":"output","id":"Jd5yTGoOdTPDPlBM_m_QT","data":[],"key":"XTfP40wlDZ"}],"key":"xXPE25JUmG"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(20, 20))\n\nplt.subplot(1, 2, 1)\nconf_matrix_gbm = metrics.confusion_matrix(labels_test, plabels_test)\nplot_confusion_matrix(conf_matrix_gbm, \n                      classes=[name for idx, name in enumerate(class_names) if idx in class_labels], \n                      normalize=True, \n                      ylabel='Truth (crop type group)', \n                      xlabel='Predicted (GBM)',\n                      title='Confusion matrix');\n\nplt.subplot(1, 2, 2)\nconf_matrix_gbm = metrics.confusion_matrix(plabels_test, labels_test)\nplot_confusion_matrix(conf_matrix_gbm, \n                      classes=[name for idx, name in enumerate(class_names) if idx in class_labels], \n                      normalize=True, \n                      xlabel='Truth (crop type group)', \n                      ylabel='Predicted (GBM)',\n                      title='Transposed Confusion matrix');\n\nplt.tight_layout()","key":"DETi5bksGE"},{"type":"output","id":"Ml7oRRvlXGmDSERrtVr_e","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"b2bad3a800543658005df7424666819a","path":"/notebooks_test/build/b2bad3a800543658005df7424666819a.png"},"text/plain":{"content":"<Figure size 1440x1440 with 2 Axes>","content_type":"text/plain"}}}],"key":"kjyeQyhSyD"}],"key":"sN3Sj9KFrm"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(20, 5))\nlabel_ids, label_counts = np.unique(labels_train, return_counts=True)\n\nplt.bar(range(len(label_ids)), label_counts/100)\nplt.xticks(range(len(label_ids)), [class_names[i] for i in label_ids], rotation=90, fontsize=20);\nplt.yticks(fontsize=20);\nplt.ylabel(\"Area [ha] \", size=18)","key":"Vu7k0s2IDV"},{"type":"output","id":"6x8Rq2pp-f61XbjmaHG8h","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"c44eb822c2efa650f78f247809eec57d","path":"/notebooks_test/build/c44eb822c2efa650f78f247809eec57d.png"},"text/plain":{"content":"<Figure size 1440x360 with 1 Axes>","content_type":"text/plain"}}}],"key":"S0KPGiFpP7"}],"key":"OZgjlhHBcb"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Predict Crop Type","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CeP0ihNKLb"}],"identifier":"predict-crop-type","label":"Predict Crop Type","html_id":"predict-crop-type","implicit":true,"key":"WVjhqfPg7a"}],"key":"hXfoLMmQDS"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define Tasks\n\nclass PredictPatch(EOTask):\n    \"\"\"\n    Task to make model predictions on a patch. Provide the model and the feature, \n    and the output names of labels and scores (optional)\n    \"\"\"\n    def __init__(self, model, features_feature, predicted_labels_name, predicted_scores_name=None):\n        self.model = model\n        self.features_feature = features_feature\n        self.predicted_labels_name = predicted_labels_name\n        self.predicted_scores_name = predicted_scores_name\n        \n    def execute(self, eopatch):\n        ftrs = eopatch[self.features_feature[0]][self.features_feature[1]]\n        \n        t, w, h, f = ftrs.shape\n        ftrs = np.moveaxis(ftrs, 0, 2).reshape(w * h, t * f)\n        \n        plabels = self.model.predict(ftrs)\n        plabels = plabels.reshape(w, h)\n        plabels = plabels[..., np.newaxis]\n\n        eopatch.add_feature(FeatureType.MASK_TIMELESS, self.predicted_labels_name, plabels)\n        \n        if self.predicted_scores_name:\n            pscores = self.model.predict_proba(ftrs)\n            _, d = pscores.shape\n            pscores = pscores.reshape(w, h, d)\n            eopatch.add_feature(FeatureType.DATA_TIMELESS, self.predicted_scores_name, pscores)\n        \n        return eopatch\n\nclass MaskNoDataInPrediction(EOTask):\n    \"\"\"\n    Mask No Data in prediction\n    \"\"\"\n    \n    def __init__(self, src_layer, no_data_value, predicted_labels_name):\n        self.src_layer = src_layer\n        self.no_data_value = no_data_value\n        self.predicted_labels_name = predicted_labels_name\n    \n    def execute(self, eopatch):\n        NO_DATA = eopatch.mask_timeless[self.src_layer] == self.no_data_value\n        eopatch.mask_timeless[self.predicted_labels_name][NO_DATA] = self.no_data_value\n        \n        return eopatch","key":"ykQObpJkvz"},{"type":"output","id":"Tj1-NpbLo4mKNX7XlnOVj","data":[],"key":"JTgtvTX8Ek"}],"key":"JKSc7OZ4Bt"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# TASK TO LOAD EXISTING EOPATCHES\nload = LoadTask(path_out_sampled)\n\n# TASK FOR PREDICTION\npredict = PredictPatch(model, (FeatureType.DATA, 'FEATURES'), 'LBL_GBM', 'SCR_GBM')\n\n# Mask No Data in Prediction\nmask_no_data = MaskNoDataInPrediction(\"CROP_TYPE\", 0, \"LBL_GBM\")\n\n# TASK FOR SAVING\nsave = SaveTask(str(path_out_sampled), overwrite_permission=OverwritePermission.OVERWRITE_PATCH)\n\n# TASK TO EXPORT TIFF\nexport_tiff = ExportToTiff((FeatureType.MASK_TIMELESS, 'LBL_GBM'))\ntiff_location = './predicted_tiff'\nif not os.path.isdir(tiff_location):\n    os.makedirs(tiff_location)\n\nworkflow = LinearWorkflow(\n    load,\n    predict,\n    mask_no_data,\n    export_tiff,\n    save\n)","key":"PYmzmR9M9J"},{"type":"output","id":"gu6D2YgwqmmV0Jq9xXB6C","data":[],"key":"OVelZni5dM"}],"key":"xo6lC03RWe"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# create a list of execution arguments for each patch\nexecution_args = []\nfor i in range(len(patchIDs)):\n    execution_args.append(\n        {\n            load: {'eopatch_folder': 'eopatch_{}'.format(i)},\n            export_tiff: {'filename': '{}/prediction_eopatch_{}_original.tiff'.format(tiff_location, i)},\n            save: {'eopatch_folder': 'eopatch_{}'.format(i)}\n        }\n    )\n\n# run the executor on 2 cores\nexecutor = EOExecutor(workflow, execution_args)\n\n# uncomment below save the logs in the current directory and produce a report!\n#executor = EOExecutor(workflow, execution_args, save_logs=True)\n\nexecutor.run(workers=1, multiprocess=False)\nexecutor.make_report()","key":"PRT13SYOhc"},{"type":"output","id":"WMQwHZ4f258I8pAqlUdVD","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"79419ae820f3457c91a34d5b4c322465\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"\n"}],"key":"g6HYktc6d1"}],"key":"oZtQoDw9Xz"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 3: Visualize the prediction","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XX6GLur54I"}],"identifier":"part-3-visualize-the-prediction","label":"Part 3: Visualize the prediction","html_id":"part-3-visualize-the-prediction","implicit":true,"key":"GHD3rioT7V"}],"key":"XFmjdaY6gC"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"path_out_sampled = './eopatches_sampled_small/' if use_smaller_patches else './eopatches_sampled_large/'\n\nfig, axes = plt.subplots(figsize=(20, 20 * aspect_ratio), nrows=3, ncols=3)\n\npbar = tqdm(total=9)\nfor i, ax in enumerate(axes.flat):\n    eopatch = EOPatch.load('{}/eopatch_{}'.format(path_out_sampled, i), lazy_loading=True)\n    im = ax.imshow(eopatch.mask_timeless['LBL_GBM'].squeeze(), cmap=ct_cmap, norm=ct_norm)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_aspect(\"auto\")\n    pbar.update(1)\n\nfig.subplots_adjust(wspace=0, hspace=0)\n\ncb = fig.colorbar(im, ax=axes.ravel().tolist(), orientation='horizontal', pad=0.01, aspect=100)\ncb.ax.tick_params(labelsize=20) \ncb.set_ticks([entry.id for entry in CTGROUPS])\ncb.ax.set_xticklabels([entry.class_name for entry in CTGROUPS], rotation=90, fontsize=15)\nplt.show()","key":"tVvnhaaBC6"},{"type":"output","id":"pfb5F2o7IlbKGyYmsxO0N","data":[{"name":"stderr","output_type":"stream","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:5: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\nPlease use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n  \"\"\"\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"7960d3f09bbd4b2f934a85bed44377dc\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=9.0), HTML(value='')))","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"db341a631ca4e65c17da917aee78454c","path":"/notebooks_test/build/db341a631ca4e65c17da917aee78454c.png"},"text/plain":{"content":"<Figure size 1440x1080 with 10 Axes>","content_type":"text/plain"}}}],"key":"na2eWv84cg"}],"key":"EwTEyNfHsS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visual inspection of patches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tTyFtLtHNR"}],"identifier":"visual-inspection-of-patches","label":"Visual inspection of patches","html_id":"visual-inspection-of-patches","implicit":true,"key":"Usgs6suTCj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here is just a simple piece of code that allows a closer inspection of the predicted labels.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HeJ87xt1ok"}],"key":"sITjVOz6QD"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Random subsets of patches are chosen, where prediction and ground truth are compared. For visual aid the mask of differences and the true color image are also provided.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wuY4gqfVMU"}],"key":"y82Kl44EIB"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In majority of the cases, differences seem to lie on the border of different structures.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qrbKO2V2zF"}],"key":"tsu5pWPqwM"}],"key":"oxWMzFnxl0"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Draw the Reference map\n\nfig = plt.figure(figsize=(20, 20))\nidx = np.random.choice(range(9))\ninspect_size = 100\n\neopatch = EOPatch.load('{}/eopatch_{}'.format(path_out_sampled, idx), lazy_loading=True)\n\nw, h = eopatch.mask_timeless['CROP_TYPE'].squeeze().shape\n\nw_min = np.random.choice(range(w - inspect_size))\nh_min = np.random.choice(range(h - inspect_size))\n\nax = plt.subplot(2, 2, 1)\nplt.imshow(eopatch.mask_timeless['CROP_TYPE'].squeeze()[w_min: w_min + inspect_size, h_min : h_min + inspect_size],\n           cmap=ct_cmap, norm=ct_norm)\nplt.xticks([])\nplt.yticks([])\nax.set_aspect(\"auto\")\nplt.title('Ground Truth', fontsize=20)\n\nax = plt.subplot(2, 2, 2)\nplt.imshow(eopatch.mask_timeless['LBL_GBM'].squeeze()[w_min: w_min + inspect_size, h_min: h_min + inspect_size],\n           cmap=ct_cmap, norm=ct_norm)\nplt.xticks([])\nplt.yticks([])\nax.set_aspect(\"auto\")\nplt.title('Prediction', fontsize=20)\n\nax = plt.subplot(2, 2, 3)\nmask = eopatch.mask_timeless['LBL_GBM'].squeeze() != eopatch.mask_timeless['CROP_TYPE'].squeeze()\nplt.imshow(mask[w_min: w_min + inspect_size, h_min: h_min + inspect_size], cmap='gray')\nplt.xticks([])\nplt.yticks([]);\nax.set_aspect(\"auto\")\nplt.title('Difference', fontsize=20)\n\nax = plt.subplot(2, 2, 4)\nimage = np.clip(eopatch.data['FEATURES'][8][..., [2, 1, 0]] * 3.5, 0, 1)\nplt.imshow(image[w_min: w_min + inspect_size, h_min: h_min + inspect_size])\nplt.xticks([])\nplt.yticks([]);\nax.set_aspect(\"auto\")\nplt.title('True Color', fontsize=20)\n\nfig.subplots_adjust(wspace=0.1, hspace=0.1)","key":"PRQPXEqelQ"},{"type":"output","id":"8Dv-EuX8AdKwWPknfYKB3","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"199b99469b001b21225f039359d06aa5","path":"/notebooks_test/build/199b99469b001b21225f039359d06aa5.png"},"text/plain":{"content":"<Figure size 1440x1440 with 4 Axes>","content_type":"text/plain"}}}],"key":"tOou1tZpHO"}],"key":"ZZonNHAwU1"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 4: Classification per LPIS ID","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zdUjCwhG3T"}],"identifier":"part-4-classification-per-lpis-id","label":"Part 4: Classification per LPIS ID","html_id":"part-4-classification-per-lpis-id","implicit":true,"key":"uSXv9Oatso"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here classification for a specific parcel identified with the unique ID from the OGD Dataset can be carried out.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DycfwVYFRI"}],"key":"TahU50nAip"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"LPIS reference dates and time intervall for satellite imagery have to correspond to the timestamps used for classification.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eDGx6fZEiR"}],"key":"JN7KNbafrg"}],"key":"QjxIAXzgg9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Specify OGD ID\n\nlpis_id = 126939\n\nmodel_path = './model_AT_CT_smaller.pkl'\nmodel = joblib.load(model_path)\n\n\n# LPIS reference date\ndateFilterMin = '2018-06-30'\ndateFilterMax = '2018-06-30'\n\n# Satellite imagery time series\nselected_date_interval_for_satellite_imagery = ['2018-01-01', '2018-09-30']\n\ntarget_crs = CRS.UTM_33N.epsg\ntableName = \"lpis_at\"","key":"wLBKnNz4gj"},{"type":"output","id":"jWyGcHcSAIVG7PTJBziYg","data":[],"key":"MVFjr98bGf"}],"key":"Ku7YCwpsh5"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Parcel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BvLmlkv1ab"}],"identifier":"load-parcel","label":"Load Parcel","html_id":"load-parcel","implicit":true,"key":"YKpaMwgQFo"}],"key":"Rasj7NFESP"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"def lpis_geom_by_id(tableName, lpis_id, target_crs, dateFilterMin, dateFilterMax):\n\n    with psycopg2.connect(**db_conn_params) as db_conn:\n        sql = '''\n            SELECT \n                ctnuml4a, \n                ST_Transform(geometry, {targetCrs}) as geometry\n            FROM {tableName}\n            WHERE \n                ogd_id = {lpis_id}\n            AND \n                ref_date >= '{dateFilterMin}' \n            AND ref_date <= '{dateFilterMax}'\n            '''\n\n        sql = sql.format(tableName = tableName, \n                         targetCrs = target_crs,\n                         lpis_id = lpis_id,\n                         dateFilterMin = dateFilterMin, \n                         dateFilterMax = dateFilterMax)\n        return gpd.GeoDataFrame.from_postgis(sql, db_conn, geom_col='geometry')","key":"ZXCzynT6M4"},{"type":"output","id":"i3uT32Ya4_i-NKHPR1yDV","data":[],"key":"BxW8OS0qZI"}],"key":"Vy4B8Epefi"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# load parcel\nlpis_df = lpis_geom_by_id(tableName, lpis_id, target_crs, dateFilterMin, dateFilterMax)\n\n# remap ids\nlpis_df[\"ct\"] = lpis_df[\"ctnuml4a\"].apply(lambda x: ctnuml4aToctMapping[x])\n\n# Visualize the parcel shape\nlpis_df.plot()","key":"pjcguoMAxI"},{"type":"output","id":"Qz2Fv8kwXZ-TJfl6LNGbP","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"a5b703584129929d1927e539bf0e0240","path":"/notebooks_test/build/a5b703584129929d1927e539bf0e0240.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"Mqmes7bMAe"}],"key":"qDZ4pEJSux"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W51oIQUGN9"}],"identifier":"define-workflow","label":"Define workflow","html_id":"define-workflow","implicit":true,"key":"yppgcsUzuc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Workflow for classifiaction of the single parcel:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ToKcKJTyMI"}],"key":"FXNUU1CBtb"}],"key":"Th7MHskyqR"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"path_out = './eopatches_lpis'\n\nif not os.path.isdir(path_out):\n    os.makedirs(path_out)\n\nbbox = BBox(lpis_df.iloc[0].geometry.bounds, crs=target_crs)    \nadd_parcel = AddFeature((FeatureType.VECTOR_TIMELESS, \"CROP_TYPE_GDF\"))\nmask_no_data = MaskNoDataInPrediction(\"CROP_TYPE_ERODED\", 0, \"LBL_GBM\")\nerosion = ErosionTask(mask_feature=(FeatureType.MASK_TIMELESS,'CROP_TYPE','CROP_TYPE_ERODED'), disk_radius=1)\npredict = PredictPatch(model, (FeatureType.DATA, 'FEATURES'), 'LBL_GBM', 'SCR_GBM')\nsave = SaveTask(path_out, overwrite_permission=OverwritePermission.OVERWRITE_PATCH)\n\nworkflow = LinearWorkflow(\n    add_data,\n    add_clm,\n    ndvi,\n    ndwi,\n    norm,\n    add_sh_valmask,\n    add_parcel,\n    ct_rasterization_task,\n    concatenate,\n    filter_task,\n    linear_interp,\n    erosion,\n    predict,\n    mask_no_data,\n    save\n)","key":"PPhOCsqm01"},{"type":"output","id":"VMCk88_666csfNnXkqntq","data":[],"key":"hZX8PzVMsR"}],"key":"mswE6ZJHmo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Execute workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MNcVSm2JA7"}],"identifier":"execute-workflow","label":"Execute workflow","html_id":"execute-workflow","implicit":true,"key":"XGzXzXML7I"}],"key":"hJ8j9N3tXT"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n\nexecution_args = []\n\nexecution_args.append({\n    add_data: {'bbox': bbox, 'time_interval': selected_date_interval_for_satellite_imagery},\n    add_parcel: {'data': lpis_df},\n    save: {'eopatch_folder': 'eopatch_{}'.format(lpis_id)}\n})\n    \nexecutor = EOExecutor(workflow, execution_args, save_logs=True)\nexecutor.run(workers=1, multiprocess=True)\n\nexecutor.make_report()","key":"GWlDePqUGs"},{"type":"output","id":"ARwE0T_R-7e3vT1yhmOSy","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"d1412f3f24c549a095b8c559f2954d0c\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=1.0), HTML(value='')))","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"\nCPU times: user 1.58 s, sys: 160 ms, total: 1.74 s\nWall time: 5.15 s\n"}],"key":"OrVgVQIozG"}],"key":"QFP31aCU9w"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Classification Result","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FGuwhtT9XF"}],"identifier":"classification-result","label":"Classification Result","html_id":"classification-result","implicit":true,"key":"lC8x5S976k"}],"key":"Oxg0QrVBRt"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"eopatch = EOPatch.load('./eopatches_lpis/eopatch_{}'.format(lpis_id))","key":"IxYTPChr9t"},{"type":"output","id":"TuJTnYqzJyNNF5qDGgsTS","data":[],"key":"rgPEtlplSN"}],"key":"mMpLJVI551"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 10))\nimage = np.clip(eopatch.data['FEATURES'][8][..., [2, 1, 0]] * 3.5, 0, 1)\nplt.imshow(image)\n","key":"TFRokCqkrS"},{"type":"output","id":"yPiUUn91CuuDvrFSm6nEQ","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"e75f8ea4744cb7ce67fca036335cca1e","path":"/notebooks_test/build/e75f8ea4744cb7ce67fca036335cca1e.png"},"text/plain":{"content":"<Figure size 720x720 with 1 Axes>","content_type":"text/plain"}}}],"key":"TR3RlPIz6c"}],"key":"PDJp3XdvFe"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Declaration","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e5quTMeTWw"}],"identifier":"declaration","label":"Declaration","html_id":"declaration","implicit":true,"key":"ruZCgJsb62"}],"key":"gf0bNkwj3Y"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 10))\nplt.imshow(eopatch.mask_timeless['CROP_TYPE_ERODED'].squeeze(), cmap=ct_cmap, norm=ct_norm)","key":"kdEyXY8LyZ"},{"type":"output","id":"DrL7GCu0QaRKRnh284tu_","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"7747949466dfd7ae7c6e5b87e5911ca7","path":"/notebooks_test/build/7747949466dfd7ae7c6e5b87e5911ca7.png"},"text/plain":{"content":"<Figure size 720x720 with 1 Axes>","content_type":"text/plain"}}}],"key":"RunFOKO4M6"}],"key":"guEo9ZcfZ6"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prediction","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nHW9pYuSvG"}],"identifier":"prediction","label":"Prediction","html_id":"prediction","implicit":true,"key":"lr9iVa7S4j"}],"key":"HHtKSqb8IV"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 10))\naxes = plt.gca()\n\n\nim = plt.imshow(eopatch.mask_timeless['LBL_GBM'].squeeze(), cmap=ct_cmap, norm=ct_norm)\nplt.xticks([])\nplt.yticks([])\n\n\ncb = fig.colorbar(im, ax=axes, orientation='horizontal', pad=0.01, aspect=100)\ncb.ax.tick_params(labelsize=20) \ncb.set_ticks([entry.id for entry in CTGROUPS])\ncb.ax.set_xticklabels([entry.class_name for entry in CTGROUPS], rotation=90, fontsize=15)\nplt.show()","key":"SmngMZ8r2J"},{"type":"output","id":"V7vLSMEcRQYfhec-U54KC","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"d573ae757dc93f685751c859a0ba633f","path":"/notebooks_test/build/d573ae757dc93f685751c859a0ba633f.png"},"text/plain":{"content":"<Figure size 720x720 with 2 Axes>","content_type":"text/plain"}}}],"key":"QQLIVQ2I8K"}],"key":"aEp7BPyh7S"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Accuracy of classification","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wBbhQW8lPv"}],"identifier":"accuracy-of-classification","label":"Accuracy of classification","html_id":"accuracy-of-classification","implicit":true,"key":"LvnNuiajS8"}],"key":"fvbT73Pj04"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"mask = (eopatch.mask_timeless['CROP_TYPE_ERODED'] != 0).squeeze()\n\nREF = eopatch.mask_timeless['CROP_TYPE'].squeeze()[mask]\nLBL_GBM = eopatch.mask_timeless['LBL_GBM'].squeeze()[mask]\n\n# classification is class with most pixels\nunique = np.unique(LBL_GBM, return_counts=True)\nclassification_id = unique[0][unique[1].argmax()]\n\n# remap to original id\nclassification_id_mapped = ctToctnuml4aMapping[classification_id][0]\n\n# precentage of pixels in prediction classified same as lpis\naccuracy = sum(REF == LBL_GBM) / len(LBL_GBM)\n\nprint(\"Parcel with ID {} classified as class {} with an accuracy of {:.2%}\".format(lpis_id, classification_id_mapped, accuracy))\n","key":"tjlB4bayYt"},{"type":"output","id":"nhcvoSXkPCeHGNbXPcEo7","data":[{"name":"stdout","output_type":"stream","text":"Parcel with ID 126939 classified as class 1020 with an accuracy of 90.91%\n"}],"key":"j19BVSohNt"}],"key":"orydPDVMqU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 5: Persist classification results in database","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iFLtg97I0f"}],"identifier":"part-5-persist-classification-results-in-database","label":"Part 5: Persist classification results in database","html_id":"part-5-persist-classification-results-in-database","implicit":true,"key":"kOaBBnXRZY"}],"key":"L53hGzBGWy"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Add the model configuration to the db","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QswMtPwkQD"}],"identifier":"add-the-model-configuration-to-the-db","label":"Add the model configuration to the db","html_id":"add-the-model-configuration-to-the-db","implicit":true,"key":"yWEki6QyPY"}],"key":"uvflFawqzI"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"model_name = \"default_3x3_noe\"\n\nmodel_config = {\n\n  \"reference\": {\n      \"table\": \"lpis_at\",\n      \"column\": \"ctnuml4a\",\n      \n  },\n    \n  \"classifiier\": \"lgbm\",\n    \n  \"model_parameters\":\n    {\n      \"boosting_type\": \"gbdt\",\n      \"num_leaves\": 31, \n      \"max_depth\": -1, \n      \"learning_rate\": 0.1\n    },\n    \n  \"valid_data_threshold\": 0.8,\n    \n  \"interpolation_range\": {\n    \"start\": \"2018-01-01\",\n    \"end\": \"2018-09-30\",\n    \"interval\": 16\n  },\n    \n  \"erosion_radius\": 1,\n    \n  \"features\": \n  [\n    \"B02\",\n    \"B03\",\n    \"B04\",\n    \"B08\",\n    \"B11\",\n    \"B12\",\n    \"NDVI\",\n    \"NDWI\",\n    \"NORM\"\n  ],\n    \n  \"training_bounds\": bounds\n}","key":"F2F7jGyZ6p"},{"type":"output","id":"3vw2Mks-Gy4TmCDMep4Nu","data":[],"key":"pIG3q5soUA"}],"key":"t7EvC97AFa"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"insert_model = \"\"\"\nINSERT INTO model_at (name, ref_date, training_time, configuration)\nVALUES (\n    '{model_name}', \n    '2018-06-30', \n        (\n            SELECT CURRENT_TIMESTAMP\n        ),\n    '{config}'\n        \n    ); \n\"\"\".format(\n    config = str(model_config).replace(\"'\", \"\\\"\"),\n    model_name = model_name\n)\n\nwith psycopg2.connect(**db_conn_params) as db_conn:\n    with db_conn.cursor() as cur:\n        cur.execute(insert_model)\n        db_conn.commit()","key":"heQEk7rAH3"},{"type":"output","id":"9kvQxsRXwEscpPXlBMQ2q","data":[],"key":"KRhQkKVe8u"}],"key":"BJyyIXSSHG"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Add all classification results for parcels within definded bounds","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J905M8Yp00"}],"identifier":"add-all-classification-results-for-parcels-within-definded-bounds","label":"Add all classification results for parcels within definded bounds","html_id":"add-all-classification-results-for-parcels-within-definded-bounds","implicit":true,"key":"FNyitcoQF8"}],"key":"OCIu8pg6Kc"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# change this bounding box depending on where the classification should be carried out\nbounds_for_classification = bounds\nmodel_name = \"default_3x3_noe\"","key":"cRg2CnOF0u"},{"type":"output","id":"3-BwgPsDXYHBW8tfKxJcq","data":[],"key":"SRZIqphaxg"}],"key":"evB1IqtR4l"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"EOTasks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GQV0Q58qkF"}],"identifier":"eotasks","label":"EOTasks","html_id":"eotasks","implicit":true,"key":"U7RsWxaPon"}],"key":"CFRkkDUdO7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"class AddPredictionToDatabase(EOTask):\n    def __init__(self, ref_date, model_id, target_table, db_conn_params):\n        self.ref_date = ref_date\n        self.model_id = model_id\n        self.target_table = target_table\n        self.db_conn_params = db_conn_params\n\n        \n    def execute(self, eopatch, parcel_id):\n        \n        mask = (eopatch.mask_timeless['CROP_TYPE_ERODED'] != 0).squeeze()\n\n        # scores per pixel\n        scores_pixel = eopatch.data_timeless[\"SCR_GBM\"][mask]\n\n        # averaged scores for each class form pixels to parcel\n        scores_parcel = np.nanmean(scores_pixel, axis=0)\n\n        # ranking\n        ranking = np.argsort(scores_parcel)\n\n        # probabilities ordered descending by ranking\n        scores_parcel = scores_parcel[ranking][::-1]\n\n        # ranked classes ordered descending by ranking\n        classes_parcel = model.classes_[ranking[::-1]]\n\n        # mapped back to original\n        classes_parcel_original = np.vectorize(lambda x: ctToctnuml4aMapping[x][0])(classes_parcel)\n        \n        prediction = [\n            dict(\n                crop_id=crop_id, \n                probability=round(probability, 2) if not np.isnan(probability) else 0\n            )\n\n            for crop_id, probability in zip(classes_parcel_original, scores_parcel)\n        ]\n        \n        \n        sql = \"\"\"\n        INSERT INTO {target_table} (parcel_id, ref_date, model_id, prediction)\n        VALUES (\n             {parcel_id}, \n            '{ref_date}', \n             {model_id},\n            '{prediction}'\n            )\n            \n        -- skip existing entries\n        ON CONFLICT DO NOTHING \n        ; \n        \"\"\"\n\n        sql = sql.format(\n            target_table = self.target_table,\n            parcel_id = parcel_id,\n            ref_date = self.ref_date,\n            model_id = self.model_id,\n            prediction = str(prediction).replace(\"'\", \"\\\"\")\n        )\n        with psycopg2.connect(**self.db_conn_params) as db_conn:\n            with db_conn.cursor() as cur:\n                cur.execute(sql)\n                db_conn.commit()\n                \n        return eopatch","key":"aSNImVFiCA"},{"type":"output","id":"9Pfy3dgmJec-a01_q-y1l","data":[],"key":"wjjOjx5c7r"}],"key":"SwsKBcWljB"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get Model ID","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UEnfJK078w"}],"identifier":"get-model-id","label":"Get Model ID","html_id":"get-model-id","implicit":true,"key":"KfEwJTYlXd"}],"key":"GNiWKoJyn7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"sql = \"SELECT id from model_at where name = '{}';\".format(model_name)\n\nwith psycopg2.connect(**db_conn_params) as db_conn:\n    with db_conn.cursor() as cur:\n        cur.execute(sql)\n        model_id = cur.fetchall()[0][0]\n        \nprint(\"model_id: \", model_id)","key":"iMsSwEaYQg"},{"type":"output","id":"TsqB5IwWkEgpgQ7HdBoz6","data":[{"name":"stdout","output_type":"stream","text":"model_id:  12\n"}],"key":"QeWJCc5eZT"}],"key":"NcEtypgi3Z"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xeZ1NEOb67"}],"identifier":"define-workflow","label":"Define workflow","html_id":"define-workflow-1","implicit":true,"key":"z6Qth0iw2o"}],"key":"zJC5qNjT5R"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"classification_to_db = AddPredictionToDatabase('2018-06-30', model_id, 'classification_at', db_conn_params)\nadd_parcel = AddFeature((FeatureType.VECTOR_TIMELESS, \"CROP_TYPE_GDF\"))\nmask_no_data = MaskNoDataInPrediction(\"CROP_TYPE_ERODED\", 0, \"LBL_GBM\")\npredict = PredictPatch(model, (FeatureType.DATA, 'FEATURES'), 'LBL_GBM', 'SCR_GBM')","key":"CMpYLgcOFC"},{"type":"output","id":"rgN5Yby_xmOZ13TcNOxcE","data":[],"key":"LTxM7b6VIt"}],"key":"ozeea1pOJe"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"workflow = LinearWorkflow(\n    add_data,\n    add_clm,\n    ndvi,\n    ndwi,\n    norm,\n    add_sh_valmask,\n    add_parcel,\n    ct_rasterization_task,\n    concatenate,\n    filter_task,\n    linear_interp,\n    erosion,\n    predict,\n    mask_no_data,\n    classification_to_db\n)","key":"FNLIkCfWBz"},{"type":"output","id":"eczqIquLWLQC0aogLtQTR","data":[],"key":"edtJjBzdPM"}],"key":"RK6W5lnSux"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"List of parcels to process","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RX6tgkltJl"}],"identifier":"list-of-parcels-to-process","label":"List of parcels to process","html_id":"list-of-parcels-to-process","implicit":true,"key":"HG9Q8RTqCe"}],"key":"pXAvNRXvKf"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"with psycopg2.connect(**db_conn_params) as db_conn:\n\n    sql = '''\n    SELECT\n        ogd_id,\n        {column},\n        ST_Transform(geometry, {targetCrs}) as geometry\n\n    FROM\n        {tableName}\n    WHERE\n        ref_date >= '{dateFilterMin}'\n    AND \n        ref_date <= '{dateFilterMax}'\n    AND\n        ST_INTERSECTS(\n            ST_Transform(geometry, 4326),\n            ST_SetSRID(\n                ST_MakeBox2D(\n                        ST_Point({min_x}, {min_y}),\n                        ST_Point({max_x}, {max_y})\n                ),\n                4326\n            )\n        );\n    '''\n\n    sql = sql.format(tableName = model_config[\"reference\"][\"table\"],\n                     column = model_config[\"reference\"][\"column\"],\n                     targetCrs = target_crs,\n                     dateFilterMin = dateFilterMin, \n                     dateFilterMax = dateFilterMax,\n                     min_x = bounds_for_classification[0],\n                     min_y = bounds_for_classification[1],\n                     max_x = bounds_for_classification[2],\n                     max_y = bounds_for_classification[3],\n                    )\n    \n    parcels_to_process = gpd.GeoDataFrame.from_postgis(sql, db_conn, geom_col='geometry', )\n\n\n# remap id\nparcels_to_process[\"ct\"] = parcels_to_process[\"ctnuml4a\"].apply(lambda x: ctnuml4aToctMapping[x])","key":"P4MVpMo7VL"},{"type":"output","id":"0Gdn4UyYgeAWefj3BmllW","data":[],"key":"HRtBmd0Hlo"}],"key":"My5Ozj2lHE"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"parcels_to_process","key":"miBCDMt72y"},{"type":"output","id":"qEpQsYs4BcnBSxdeLUqqw","data":[{"output_type":"execute_result","execution_count":57,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ogd_id</th>\n      <th>ctnuml4a</th>\n      <th>geometry</th>\n      <th>ct</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>333386.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538844.452 5401988.173, 538791.190 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>333388.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538940.617 5401357.192, 538900.718 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>334104.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538657.001 5401587.709, 538599.773 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>334105.0</td>\n      <td>1210</td>\n      <td>POLYGON ((539119.085 5401857.078, 539173.783 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>334106.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538963.364 5401353.648, 538952.689 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>513054.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538776.253 5402396.809, 538811.508 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>511905.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538766.889 5401359.859, 539114.235 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>512660.0</td>\n      <td>1010</td>\n      <td>POLYGON ((539122.924 5402090.288, 539134.580 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1030069.0</td>\n      <td>1050</td>\n      <td>POLYGON ((538375.922 5401676.473, 538365.054 5...</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1031087.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538814.320 5401357.902, 539142.634 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1093378.0</td>\n      <td>1090</td>\n      <td>POLYGON ((538491.661 5400177.570, 538511.199 5...</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1093379.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538746.810 5400483.771, 538734.941 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1093380.0</td>\n      <td>1050</td>\n      <td>POLYGON ((538490.284 5400662.682, 538496.677 5...</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1093381.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538768.957 5400884.197, 538735.711 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1114582.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538888.397 5400872.477, 538898.062 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1115008.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538769.006 5400609.582, 538723.259 5...</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1115106.0</td>\n      <td>1020</td>\n      <td>POLYGON ((539021.618 5400672.690, 539030.647 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1115108.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538610.623 5400673.428, 538590.545 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1115109.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538768.236 5400882.835, 538820.171 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1116843.0</td>\n      <td>1240</td>\n      <td>POLYGON ((538446.658 5400959.995, 538445.552 5...</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>1116846.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538774.157 5400605.353, 538722.915 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>1119100.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538523.806 5400877.293, 538485.333 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1119101.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538885.102 5400871.225, 538821.949 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>1119102.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538921.392 5400884.111, 538903.323 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>1492894.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538356.118 5400089.171, 538412.305 5...</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>1498138.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538606.436 5400593.986, 538606.446 5...</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>1498139.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538877.284 5400856.416, 538855.877 5...</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>1562116.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538422.344 5401641.427, 538378.657 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>2201537.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538663.014 5400913.721, 538673.844 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>2201968.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538586.934 5400757.539, 538591.586 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>2201979.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538706.683 5400891.357, 538769.879 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>2202753.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538610.953 5400829.021, 538622.156 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>2213647.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538604.009 5400812.883, 538610.953 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>2220478.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538538.068 5400600.747, 538544.498 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>2220819.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538559.113 5400654.667, 538522.089 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>2220821.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538943.844 5400826.118, 538856.445 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>2220824.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538719.997 5400888.823, 538782.538 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>2230029.0</td>\n      <td>1010</td>\n      <td>POLYGON ((538729.568 5401366.168, 538724.188 5...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>2235477.0</td>\n      <td>1020</td>\n      <td>POLYGON ((539313.375 5402185.990, 539209.344 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>2235485.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538748.435 5401361.481, 539103.145 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>2700060.0</td>\n      <td>1210</td>\n      <td>POLYGON ((539297.463 5401989.705, 539288.521 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>2710354.0</td>\n      <td>1020</td>\n      <td>POLYGON ((539209.344 5401934.545, 539313.375 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>3282870.0</td>\n      <td>1170</td>\n      <td>POLYGON ((538470.878 5400665.536, 538462.178 5...</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>3292453.0</td>\n      <td>1210</td>\n      <td>POLYGON ((539073.696 5400954.560, 539038.852 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>3292460.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538622.156 5400850.341, 538633.416 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>3625398.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538948.750 5400715.235, 538972.781 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>3625399.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538769.879 5401010.879, 538706.185 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>3798537.0</td>\n      <td>1210</td>\n      <td>POLYGON ((539247.012 5402248.699, 539270.409 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>3798539.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538458.427 5401632.103, 538811.508 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>3834900.0</td>\n      <td>1170</td>\n      <td>POLYGON ((538964.008 5400816.413, 538956.734 5...</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>3834910.0</td>\n      <td>1170</td>\n      <td>POLYGON ((538856.943 5400632.525, 538944.615 5...</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>4375165.0</td>\n      <td>1210</td>\n      <td>POLYGON ((539013.274 5400867.592, 539045.687 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>4397511.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538536.065 5400962.920, 538517.783 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>4397516.0</td>\n      <td>1060</td>\n      <td>POLYGON ((538440.897 5401107.970, 538552.751 5...</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>4397519.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538657.001 5401587.709, 538943.764 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>4399112.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538204.012 5401652.954, 538230.812 5...</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>4399114.0</td>\n      <td>1240</td>\n      <td>POLYGON ((538446.377 5400962.515, 538494.538 5...</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>4399115.0</td>\n      <td>1210</td>\n      <td>POLYGON ((538567.482 5401078.946, 538615.272 5...</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>4620993.0</td>\n      <td>1020</td>\n      <td>POLYGON ((538648.293 5400691.236, 538584.338 5...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>4664131.0</td>\n      <td>1040</td>\n      <td>POLYGON ((538557.138 5401610.031, 538909.679 5...</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       ogd_id  ctnuml4a                                           geometry  ct\n0    333386.0      1020  POLYGON ((538844.452 5401988.173, 538791.190 5...   2\n1    333388.0      1210  POLYGON ((538940.617 5401357.192, 538900.718 5...  21\n2    334104.0      1010  POLYGON ((538657.001 5401587.709, 538599.773 5...   1\n3    334105.0      1210  POLYGON ((539119.085 5401857.078, 539173.783 5...  21\n4    334106.0      1210  POLYGON ((538963.364 5401353.648, 538952.689 5...  21\n5    513054.0      1020  POLYGON ((538776.253 5402396.809, 538811.508 5...   2\n6    511905.0      1010  POLYGON ((538766.889 5401359.859, 539114.235 5...   1\n7    512660.0      1010  POLYGON ((539122.924 5402090.288, 539134.580 5...   1\n8   1030069.0      1050  POLYGON ((538375.922 5401676.473, 538365.054 5...   5\n9   1031087.0      1210  POLYGON ((538814.320 5401357.902, 539142.634 5...  21\n10  1093378.0      1090  POLYGON ((538491.661 5400177.570, 538511.199 5...   9\n11  1093379.0      1010  POLYGON ((538746.810 5400483.771, 538734.941 5...   1\n12  1093380.0      1050  POLYGON ((538490.284 5400662.682, 538496.677 5...   5\n13  1093381.0      1020  POLYGON ((538768.957 5400884.197, 538735.711 5...   2\n14  1114582.0      1060  POLYGON ((538888.397 5400872.477, 538898.062 5...   6\n15  1115008.0      1040  POLYGON ((538769.006 5400609.582, 538723.259 5...   4\n16  1115106.0      1020  POLYGON ((539021.618 5400672.690, 539030.647 5...   2\n17  1115108.0      1020  POLYGON ((538610.623 5400673.428, 538590.545 5...   2\n18  1115109.0      1020  POLYGON ((538768.236 5400882.835, 538820.171 5...   2\n19  1116843.0      1240  POLYGON ((538446.658 5400959.995, 538445.552 5...  24\n20  1116846.0      1010  POLYGON ((538774.157 5400605.353, 538722.915 5...   1\n21  1119100.0      1020  POLYGON ((538523.806 5400877.293, 538485.333 5...   2\n22  1119101.0      1060  POLYGON ((538885.102 5400871.225, 538821.949 5...   6\n23  1119102.0      1060  POLYGON ((538921.392 5400884.111, 538903.323 5...   6\n24  1492894.0      1040  POLYGON ((538356.118 5400089.171, 538412.305 5...   4\n25  1498138.0      1040  POLYGON ((538606.436 5400593.986, 538606.446 5...   4\n26  1498139.0      1040  POLYGON ((538877.284 5400856.416, 538855.877 5...   4\n27  1562116.0      1020  POLYGON ((538422.344 5401641.427, 538378.657 5...   2\n28  2201537.0      1210  POLYGON ((538663.014 5400913.721, 538673.844 5...  21\n29  2201968.0      1020  POLYGON ((538586.934 5400757.539, 538591.586 5...   2\n30  2201979.0      1020  POLYGON ((538706.683 5400891.357, 538769.879 5...   2\n31  2202753.0      1010  POLYGON ((538610.953 5400829.021, 538622.156 5...   1\n32  2213647.0      1020  POLYGON ((538604.009 5400812.883, 538610.953 5...   2\n33  2220478.0      1010  POLYGON ((538538.068 5400600.747, 538544.498 5...   1\n34  2220819.0      1060  POLYGON ((538559.113 5400654.667, 538522.089 5...   6\n35  2220821.0      1060  POLYGON ((538943.844 5400826.118, 538856.445 5...   6\n36  2220824.0      1060  POLYGON ((538719.997 5400888.823, 538782.538 5...   6\n37  2230029.0      1010  POLYGON ((538729.568 5401366.168, 538724.188 5...   1\n38  2235477.0      1020  POLYGON ((539313.375 5402185.990, 539209.344 5...   2\n39  2235485.0      1020  POLYGON ((538748.435 5401361.481, 539103.145 5...   2\n40  2700060.0      1210  POLYGON ((539297.463 5401989.705, 539288.521 5...  21\n41  2710354.0      1020  POLYGON ((539209.344 5401934.545, 539313.375 5...   2\n42  3282870.0      1170  POLYGON ((538470.878 5400665.536, 538462.178 5...  17\n43  3292453.0      1210  POLYGON ((539073.696 5400954.560, 539038.852 5...  21\n44  3292460.0      1020  POLYGON ((538622.156 5400850.341, 538633.416 5...   2\n45  3625398.0      1020  POLYGON ((538948.750 5400715.235, 538972.781 5...   2\n46  3625399.0      1020  POLYGON ((538769.879 5401010.879, 538706.185 5...   2\n47  3798537.0      1210  POLYGON ((539247.012 5402248.699, 539270.409 5...  21\n48  3798539.0      1020  POLYGON ((538458.427 5401632.103, 538811.508 5...   2\n49  3834900.0      1170  POLYGON ((538964.008 5400816.413, 538956.734 5...  17\n50  3834910.0      1170  POLYGON ((538856.943 5400632.525, 538944.615 5...  17\n51  4375165.0      1210  POLYGON ((539013.274 5400867.592, 539045.687 5...  21\n52  4397511.0      1210  POLYGON ((538536.065 5400962.920, 538517.783 5...  21\n53  4397516.0      1060  POLYGON ((538440.897 5401107.970, 538552.751 5...   6\n54  4397519.0      1020  POLYGON ((538657.001 5401587.709, 538943.764 5...   2\n55  4399112.0      1040  POLYGON ((538204.012 5401652.954, 538230.812 5...   4\n56  4399114.0      1240  POLYGON ((538446.377 5400962.515, 538494.538 5...  24\n57  4399115.0      1210  POLYGON ((538567.482 5401078.946, 538615.272 5...  21\n58  4620993.0      1020  POLYGON ((538648.293 5400691.236, 538584.338 5...   2\n59  4664131.0      1040  POLYGON ((538557.138 5401610.031, 538909.679 5...   4","content_type":"text/plain"}}}],"key":"aE3mIpCUT3"}],"key":"gnykDSEqxz"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Execute workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pXmdcO1oxt"}],"identifier":"execute-workflow","label":"Execute workflow","html_id":"execute-workflow-1","implicit":true,"key":"AFaFyC1RvI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"classification data is added to the database","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zyazOFN3zA"}],"key":"sAhJiMGvjR"}],"key":"NIiT4zmJdN"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"execution_args = []\n\nfor i in range(len(parcels_to_process)):\n    \n    # Data Frame for current parcel\n    parcel_df = parcels_to_process[parcels_to_process.index == i]\n    parcel = parcel_df.iloc[0]\n    \n    bbox = BBox(parcel.geometry.bounds, crs=target_crs)    \n\n    execution_args.append({\n        add_data: {'bbox': bbox, 'time_interval': selected_date_interval_for_satellite_imagery},\n        add_parcel: {'data': parcel_df},\n        classification_to_db: {'parcel_id': int(parcel.ogd_id)}\n    })\n\n\nexecutor = EOExecutor(workflow, execution_args, save_logs=True)\nexecutor.run(workers=1, multiprocess=False)\n\nexecutor.make_report()","key":"Z3u2JYPuma"},{"type":"output","id":"tZGKY_pog-t92Q3eoeW7f","data":[{"output_type":"display_data","metadata":{},"data":{"application/vnd.jupyter.widget-view+json":{"content":"{\"model_id\":\"5643ccfeb4554cc1a06739dba2276f91\",\"version_major\":2,\"version_minor\":0}","content_type":"application/vnd.jupyter.widget-view+json"},"text/plain":{"content":"HBox(children=(FloatProgress(value=0.0, max=60.0), HTML(value='')))","content_type":"text/plain"}}},{"name":"stdout","output_type":"stream","text":"\n"}],"key":"c3lsUXyMtZ"}],"key":"YV8eWHnf4s"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Show classification results","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d2GTHKaGLa"}],"identifier":"show-classification-results","label":"Show classification results","html_id":"show-classification-results","implicit":true,"key":"m8Aljc5O0g"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First 20 classified parcels within the defined bounding box","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ni3ImakXbQ"}],"key":"hEbtEbHEF1"}],"key":"xYql0cjUV7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"\nwith psycopg2.connect(**db_conn_params) as db_conn:\n    with db_conn.cursor() as cur:\n\n        sql = '''\n            SELECT \n                parcel_id,\n                ref_date,\n                model_id,\n                prediction -> 0,\n                prediction -> 1,\n                prediction -> 2\n            FROM classification_at\n            WHERE\n                model_id = {model_id} AND\n                ref_date = '2018-06-30'\n            LIMIT 20\n        '''.format(model_id=model_id)\n\n        cur.execute(sql)\n        result = cur.fetchall()","key":"jRTfNsVpOA"},{"type":"output","id":"iQOYTwwJ1Dxbkb1Dn0AbM","data":[],"key":"sDHtLY4wV5"}],"key":"STqwNz4yJ7"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"pd.DataFrame(result, columns=[\"ogd_id\", \"ref_date\", \"model_id\", \"1st_classification\", \"2nd_classification\", \"3rd_classification\"])","key":"mnjqpq5TjL"},{"type":"output","id":"41hxq6-0sIYOQC_0qHK0A","data":[{"output_type":"execute_result","execution_count":60,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ogd_id</th>\n      <th>ref_date</th>\n      <th>model_id</th>\n      <th>1st_classification</th>\n      <th>2nd_classification</th>\n      <th>3rd_classification</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>333386</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.75}</td>\n      <td>{'crop_id': 1090, 'probability': 0.13}</td>\n      <td>{'crop_id': 1010, 'probability': 0.09}</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>333388</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.69}</td>\n      <td>{'crop_id': 1060, 'probability': 0.15}</td>\n      <td>{'crop_id': 1090, 'probability': 0.06}</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>334104</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1090, 'probability': 0.87}</td>\n      <td>{'crop_id': 1010, 'probability': 0.11}</td>\n      <td>{'crop_id': 1040, 'probability': 0.02}</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>334105</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1040, 'probability': 0.41}</td>\n      <td>{'crop_id': 1020, 'probability': 0.25}</td>\n      <td>{'crop_id': 1090, 'probability': 0.2}</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>334106</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1060, 'probability': 0.5}</td>\n      <td>{'crop_id': 1020, 'probability': 0.39}</td>\n      <td>{'crop_id': 1090, 'probability': 0.08}</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>513054</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.98}</td>\n      <td>{'crop_id': 1060, 'probability': 0.01}</td>\n      <td>{'crop_id': 1040, 'probability': 0.01}</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>511905</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1100, 'probability': 0}</td>\n      <td>{'crop_id': 1090, 'probability': 0}</td>\n      <td>{'crop_id': 1070, 'probability': 0}</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>512660</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1090, 'probability': 0.52}</td>\n      <td>{'crop_id': 1010, 'probability': 0.43}</td>\n      <td>{'crop_id': 1020, 'probability': 0.04}</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1030069</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1100, 'probability': 0}</td>\n      <td>{'crop_id': 1090, 'probability': 0}</td>\n      <td>{'crop_id': 1070, 'probability': 0}</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1031087</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1090, 'probability': 0.44}</td>\n      <td>{'crop_id': 1010, 'probability': 0.36}</td>\n      <td>{'crop_id': 1040, 'probability': 0.1}</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1093378</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1090, 'probability': 0.61}</td>\n      <td>{'crop_id': 1010, 'probability': 0.32}</td>\n      <td>{'crop_id': 1040, 'probability': 0.07}</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1093379</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1010, 'probability': 0.92}</td>\n      <td>{'crop_id': 1020, 'probability': 0.06}</td>\n      <td>{'crop_id': 1090, 'probability': 0.02}</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1093380</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1060, 'probability': 0.61}</td>\n      <td>{'crop_id': 1010, 'probability': 0.2}</td>\n      <td>{'crop_id': 1020, 'probability': 0.19}</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1093381</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.91}</td>\n      <td>{'crop_id': 1010, 'probability': 0.09}</td>\n      <td>{'crop_id': 1060, 'probability': 0.0}</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1114582</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1060, 'probability': 0.96}</td>\n      <td>{'crop_id': 1020, 'probability': 0.01}</td>\n      <td>{'crop_id': 1090, 'probability': 0.01}</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1115008</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1040, 'probability': 0.99}</td>\n      <td>{'crop_id': 1010, 'probability': 0.0}</td>\n      <td>{'crop_id': 1090, 'probability': 0.0}</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>1115106</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.95}</td>\n      <td>{'crop_id': 1010, 'probability': 0.04}</td>\n      <td>{'crop_id': 1040, 'probability': 0.02}</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1115108</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 0.75}</td>\n      <td>{'crop_id': 1060, 'probability': 0.25}</td>\n      <td>{'crop_id': 1010, 'probability': 0.0}</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>1115109</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1020, 'probability': 1.0}</td>\n      <td>{'crop_id': 1100, 'probability': 0.0}</td>\n      <td>{'crop_id': 1090, 'probability': 0.0}</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>1116846</td>\n      <td>2018-06-30</td>\n      <td>12</td>\n      <td>{'crop_id': 1100, 'probability': 0}</td>\n      <td>{'crop_id': 1090, 'probability': 0}</td>\n      <td>{'crop_id': 1070, 'probability': 0}</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"     ogd_id    ref_date  model_id                      1st_classification  \\\n0    333386  2018-06-30        12  {'crop_id': 1020, 'probability': 0.75}   \n1    333388  2018-06-30        12  {'crop_id': 1020, 'probability': 0.69}   \n2    334104  2018-06-30        12  {'crop_id': 1090, 'probability': 0.87}   \n3    334105  2018-06-30        12  {'crop_id': 1040, 'probability': 0.41}   \n4    334106  2018-06-30        12   {'crop_id': 1060, 'probability': 0.5}   \n5    513054  2018-06-30        12  {'crop_id': 1020, 'probability': 0.98}   \n6    511905  2018-06-30        12     {'crop_id': 1100, 'probability': 0}   \n7    512660  2018-06-30        12  {'crop_id': 1090, 'probability': 0.52}   \n8   1030069  2018-06-30        12     {'crop_id': 1100, 'probability': 0}   \n9   1031087  2018-06-30        12  {'crop_id': 1090, 'probability': 0.44}   \n10  1093378  2018-06-30        12  {'crop_id': 1090, 'probability': 0.61}   \n11  1093379  2018-06-30        12  {'crop_id': 1010, 'probability': 0.92}   \n12  1093380  2018-06-30        12  {'crop_id': 1060, 'probability': 0.61}   \n13  1093381  2018-06-30        12  {'crop_id': 1020, 'probability': 0.91}   \n14  1114582  2018-06-30        12  {'crop_id': 1060, 'probability': 0.96}   \n15  1115008  2018-06-30        12  {'crop_id': 1040, 'probability': 0.99}   \n16  1115106  2018-06-30        12  {'crop_id': 1020, 'probability': 0.95}   \n17  1115108  2018-06-30        12  {'crop_id': 1020, 'probability': 0.75}   \n18  1115109  2018-06-30        12   {'crop_id': 1020, 'probability': 1.0}   \n19  1116846  2018-06-30        12     {'crop_id': 1100, 'probability': 0}   \n\n                        2nd_classification  \\\n0   {'crop_id': 1090, 'probability': 0.13}   \n1   {'crop_id': 1060, 'probability': 0.15}   \n2   {'crop_id': 1010, 'probability': 0.11}   \n3   {'crop_id': 1020, 'probability': 0.25}   \n4   {'crop_id': 1020, 'probability': 0.39}   \n5   {'crop_id': 1060, 'probability': 0.01}   \n6      {'crop_id': 1090, 'probability': 0}   \n7   {'crop_id': 1010, 'probability': 0.43}   \n8      {'crop_id': 1090, 'probability': 0}   \n9   {'crop_id': 1010, 'probability': 0.36}   \n10  {'crop_id': 1010, 'probability': 0.32}   \n11  {'crop_id': 1020, 'probability': 0.06}   \n12   {'crop_id': 1010, 'probability': 0.2}   \n13  {'crop_id': 1010, 'probability': 0.09}   \n14  {'crop_id': 1020, 'probability': 0.01}   \n15   {'crop_id': 1010, 'probability': 0.0}   \n16  {'crop_id': 1010, 'probability': 0.04}   \n17  {'crop_id': 1060, 'probability': 0.25}   \n18   {'crop_id': 1100, 'probability': 0.0}   \n19     {'crop_id': 1090, 'probability': 0}   \n\n                        3rd_classification  \n0   {'crop_id': 1010, 'probability': 0.09}  \n1   {'crop_id': 1090, 'probability': 0.06}  \n2   {'crop_id': 1040, 'probability': 0.02}  \n3    {'crop_id': 1090, 'probability': 0.2}  \n4   {'crop_id': 1090, 'probability': 0.08}  \n5   {'crop_id': 1040, 'probability': 0.01}  \n6      {'crop_id': 1070, 'probability': 0}  \n7   {'crop_id': 1020, 'probability': 0.04}  \n8      {'crop_id': 1070, 'probability': 0}  \n9    {'crop_id': 1040, 'probability': 0.1}  \n10  {'crop_id': 1040, 'probability': 0.07}  \n11  {'crop_id': 1090, 'probability': 0.02}  \n12  {'crop_id': 1020, 'probability': 0.19}  \n13   {'crop_id': 1060, 'probability': 0.0}  \n14  {'crop_id': 1090, 'probability': 0.01}  \n15   {'crop_id': 1090, 'probability': 0.0}  \n16  {'crop_id': 1040, 'probability': 0.02}  \n17   {'crop_id': 1010, 'probability': 0.0}  \n18   {'crop_id': 1090, 'probability': 0.0}  \n19     {'crop_id': 1070, 'probability': 0}  ","content_type":"text/plain"}}}],"key":"axQmuoLlTR"}],"key":"cIW5SidrMt"}],"key":"iuJdFUkjEA"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"South Africa Crop Type Classification on Euro Data Cube (EDC)","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/edc-notebook-lstm","group":"Contributions"},"next":{"title":"Crop-classification using Sentinel-2 time-series","url":"/external-notebooks/eurodatacube/notebooks/notebooks/contributions/eurocrops-crop-classification-example","group":"Contributions"}}},"domain":"http://localhost:3000"}